<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HashMap循环遍历</title>
      <link href="/2022/03/18/Java_10_HashMap%E5%BE%AA%E7%8E%AF%E9%81%8D%E5%8E%86/"/>
      <url>/2022/03/18/Java_10_HashMap%E5%BE%AA%E7%8E%AF%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<p>HashMap 遍历从大的方向来说，可分为以下 4 类：</p><ol><li>迭代器（Iterator）方式遍历；</li><li>For Each 方式遍历；</li><li>Lambda 表达式遍历（JDK 1.8+）;</li><li>Streams API 遍历（JDK 1.8+）。</li></ol><span id="more"></span><p>但每种类型下又有不同的实现方式，因此具体的遍历方式又可以分为以下 7 种：</p><ol><li>使用迭代器（Iterator）EntrySet 的方式进行遍历；</li><li>使用迭代器（Iterator）KeySet 的方式进行遍历；</li><li>使用 For Each EntrySet 的方式进行遍历；</li><li>使用 For Each KeySet 的方式进行遍历；</li><li>使用 Lambda 表达式的方式进行遍历；</li><li>使用 Streams API 单线程的方式进行遍历；</li><li>使用 Streams API 多线程的方式进行遍历。</li></ol><p>接下来我们来看每种遍历方式的具体实现代码。</p><h3 id="1-迭代器-EntrySet"><a href="#1-迭代器-EntrySet" class="headerlink" title="1.迭代器 EntrySet"></a>1.迭代器 EntrySet</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashMapTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建并赋值 HashMap</span></span><br><span class="line">        Map&lt;Integer, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(<span class="number">1</span>, <span class="string">&quot;Java&quot;</span>);</span><br><span class="line">        map.put(<span class="number">2</span>, <span class="string">&quot;JDK&quot;</span>);</span><br><span class="line">        map.put(<span class="number">3</span>, <span class="string">&quot;Spring Framework&quot;</span>);</span><br><span class="line">        map.put(<span class="number">4</span>, <span class="string">&quot;MyBatis framework&quot;</span>);</span><br><span class="line">        map.put(<span class="number">5</span>, <span class="string">&quot;与或非&quot;</span>);</span><br><span class="line">        <span class="comment">// 遍历</span></span><br><span class="line">        Iterator&lt;Map.Entry&lt;Integer, String&gt;&gt; iterator = map.entrySet().iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            Map.Entry&lt;Integer, String&gt; entry = iterator.next();</span><br><span class="line">            System.out.println(entry.getKey());</span><br><span class="line">            System.out.println(entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上程序的执行结果为：</p><blockquote><p>1</p><p>Java</p><p>2</p><p>JDK</p><p>3</p><p>Spring Framework</p><p>4</p><p>MyBatis framework</p><p>5</p><p>与或非</p></blockquote><h3 id="2-迭代器-KeySet"><a href="#2-迭代器-KeySet" class="headerlink" title="2.迭代器 KeySet"></a>2.迭代器 KeySet</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashMapTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建并赋值 HashMap</span></span><br><span class="line">        Map&lt;Integer, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(<span class="number">1</span>, <span class="string">&quot;Java&quot;</span>);</span><br><span class="line">        map.put(<span class="number">2</span>, <span class="string">&quot;JDK&quot;</span>);</span><br><span class="line">        map.put(<span class="number">3</span>, <span class="string">&quot;Spring Framework&quot;</span>);</span><br><span class="line">        map.put(<span class="number">4</span>, <span class="string">&quot;MyBatis framework&quot;</span>);</span><br><span class="line">        map.put(<span class="number">5</span>, <span class="string">&quot;与或非&quot;</span>);</span><br><span class="line">        <span class="comment">// 遍历</span></span><br><span class="line">        Iterator&lt;Integer&gt; iterator = map.keySet().iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">key</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">            System.out.println(key);</span><br><span class="line">            System.out.println(map.get(key));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上程序的执行结果为：</p><blockquote><p>1</p><p>Java</p><p>2</p><p>JDK</p><p>3</p><p>Spring Framework</p><p>4</p><p>MyBatis framework</p><p>5</p><p>与或非</p></blockquote><h3 id="3-ForEach-EntrySet"><a href="#3-ForEach-EntrySet" class="headerlink" title="3.ForEach EntrySet"></a>3.ForEach EntrySet</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashMapTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建并赋值 HashMap</span></span><br><span class="line">        Map&lt;Integer, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(<span class="number">1</span>, <span class="string">&quot;Java&quot;</span>);</span><br><span class="line">        map.put(<span class="number">2</span>, <span class="string">&quot;JDK&quot;</span>);</span><br><span class="line">        map.put(<span class="number">3</span>, <span class="string">&quot;Spring Framework&quot;</span>);</span><br><span class="line">        map.put(<span class="number">4</span>, <span class="string">&quot;MyBatis framework&quot;</span>);</span><br><span class="line">        map.put(<span class="number">5</span>, <span class="string">&quot;与或非&quot;</span>);</span><br><span class="line">        <span class="comment">// 遍历</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer, String&gt; entry : map.entrySet()) &#123;</span><br><span class="line">            System.out.println(entry.getKey());</span><br><span class="line">            System.out.println(entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上程序的执行结果为：</p><blockquote><p>1</p><p>Java</p><p>2</p><p>JDK</p><p>3</p><p>Spring Framework</p><p>4</p><p>MyBatis framework</p><p>5</p><p>与或非</p></blockquote><h3 id="4-ForEach-KeySet"><a href="#4-ForEach-KeySet" class="headerlink" title="4.ForEach KeySet"></a>4.ForEach KeySet</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashMapTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建并赋值 HashMap</span></span><br><span class="line">        Map&lt;Integer, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(<span class="number">1</span>, <span class="string">&quot;Java&quot;</span>);</span><br><span class="line">        map.put(<span class="number">2</span>, <span class="string">&quot;JDK&quot;</span>);</span><br><span class="line">        map.put(<span class="number">3</span>, <span class="string">&quot;Spring Framework&quot;</span>);</span><br><span class="line">        map.put(<span class="number">4</span>, <span class="string">&quot;MyBatis framework&quot;</span>);</span><br><span class="line">        map.put(<span class="number">5</span>, <span class="string">&quot;与或非&quot;</span>);</span><br><span class="line">        <span class="comment">// 遍历</span></span><br><span class="line">        <span class="keyword">for</span> (Integer key : map.keySet()) &#123;</span><br><span class="line">            System.out.println(key);</span><br><span class="line">            System.out.println(map.get(key));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上程序的执行结果为：</p><blockquote><p>1</p><p>Java</p><p>2</p><p>JDK</p><p>3</p><p>Spring Framework</p><p>4</p><p>MyBatis framework</p><p>5</p><p>与或非</p></blockquote><h3 id="5-Lambda"><a href="#5-Lambda" class="headerlink" title="5.Lambda"></a>5.Lambda</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashMapTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建并赋值 HashMap</span></span><br><span class="line">        Map&lt;Integer, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(<span class="number">1</span>, <span class="string">&quot;Java&quot;</span>);</span><br><span class="line">        map.put(<span class="number">2</span>, <span class="string">&quot;JDK&quot;</span>);</span><br><span class="line">        map.put(<span class="number">3</span>, <span class="string">&quot;Spring Framework&quot;</span>);</span><br><span class="line">        map.put(<span class="number">4</span>, <span class="string">&quot;MyBatis framework&quot;</span>);</span><br><span class="line">        map.put(<span class="number">5</span>, <span class="string">&quot;与或非&quot;</span>);</span><br><span class="line">        <span class="comment">// 遍历</span></span><br><span class="line">        map.forEach((key, value) -&gt; &#123;</span><br><span class="line">            System.out.println(key);</span><br><span class="line">            System.out.println(value);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上程序的执行结果为：</p><blockquote><p>1</p><p>Java</p><p>2</p><p>JDK</p><p>3</p><p>Spring Framework</p><p>4</p><p>MyBatis framework</p><p>5</p><p>与或非</p></blockquote><h3 id="6-Streams-API-单线程"><a href="#6-Streams-API-单线程" class="headerlink" title="6.Streams API 单线程"></a>6.Streams API 单线程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashMapTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建并赋值 HashMap</span></span><br><span class="line">        Map&lt;Integer, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(<span class="number">1</span>, <span class="string">&quot;Java&quot;</span>);</span><br><span class="line">        map.put(<span class="number">2</span>, <span class="string">&quot;JDK&quot;</span>);</span><br><span class="line">        map.put(<span class="number">3</span>, <span class="string">&quot;Spring Framework&quot;</span>);</span><br><span class="line">        map.put(<span class="number">4</span>, <span class="string">&quot;MyBatis framework&quot;</span>);</span><br><span class="line">        map.put(<span class="number">5</span>, <span class="string">&quot;与或非&quot;</span>);</span><br><span class="line">        <span class="comment">// 遍历</span></span><br><span class="line">        map.entrySet().stream().forEach((entry) -&gt; &#123;</span><br><span class="line">            System.out.println(entry.getKey());</span><br><span class="line">            System.out.println(entry.getValue());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上程序的执行结果为：</p><blockquote><p>1</p><p>Java</p><p>2</p><p>JDK</p><p>3</p><p>Spring Framework</p><p>4</p><p>MyBatis framework</p><p>5</p><p>与或非</p></blockquote><h3 id="7-Streams-API-多线程"><a href="#7-Streams-API-多线程" class="headerlink" title="7.Streams API 多线程"></a>7.Streams API 多线程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashMapTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建并赋值 HashMap</span></span><br><span class="line">        Map&lt;Integer, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(<span class="number">1</span>, <span class="string">&quot;Java&quot;</span>);</span><br><span class="line">        map.put(<span class="number">2</span>, <span class="string">&quot;JDK&quot;</span>);</span><br><span class="line">        map.put(<span class="number">3</span>, <span class="string">&quot;Spring Framework&quot;</span>);</span><br><span class="line">        map.put(<span class="number">4</span>, <span class="string">&quot;MyBatis framework&quot;</span>);</span><br><span class="line">        map.put(<span class="number">5</span>, <span class="string">&quot;与或非&quot;</span>);</span><br><span class="line">        <span class="comment">// 遍历</span></span><br><span class="line">        map.entrySet().parallelStream().forEach((entry) -&gt; &#123;</span><br><span class="line">            System.out.println(entry.getKey());</span><br><span class="line">            System.out.println(entry.getValue());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上程序的执行结果为：</p><blockquote><p>4</p><p>MyBatis framework</p><p>5</p><p>与或非</p><p>1</p><p>Java</p><p>2</p><p>JDK</p><p>3</p><p>Spring Framework</p></blockquote><h3 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h3><p>接下来我们使用 Oracle 官方提供的性能测试工具 JMH（Java Microbenchmark Harness，JAVA 微基准测试套件）来测试一下这 7 种循环的性能。</p><p>首先，我们先要引入 JMH 框架，在 <code>pom.xml</code> 文件中添加如下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.openjdk.jmh/jmh-core --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openjdk.jmh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jmh-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.openjdk.jmh/jmh-generator-annprocess --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openjdk.jmh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jmh-generator-annprocess<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后编写测试代码，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@BenchmarkMode(Mode.AverageTime)</span> <span class="comment">// 测试完成时间</span></span><br><span class="line"><span class="meta">@OutputTimeUnit(TimeUnit.NANOSECONDS)</span></span><br><span class="line"><span class="meta">@Warmup(iterations = 2, time = 1, timeUnit = TimeUnit.SECONDS)</span> <span class="comment">// 预热 2 轮，每次 1s</span></span><br><span class="line"><span class="meta">@Measurement(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)</span> <span class="comment">// 测试 5 轮，每次 1s</span></span><br><span class="line"><span class="meta">@Fork(1)</span> <span class="comment">// fork 1 个线程</span></span><br><span class="line"><span class="meta">@State(Scope.Thread)</span> <span class="comment">// 每个测试线程一个实例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashMapCycleTest</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> Map&lt;Integer, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>() &#123;&#123;</span><br><span class="line">        <span class="comment">// 添加数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            put(i, <span class="string">&quot;val:&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RunnerException &#123;</span><br><span class="line">        <span class="comment">// 启动基准测试</span></span><br><span class="line">        <span class="type">Options</span> <span class="variable">opt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OptionsBuilder</span>()</span><br><span class="line">                .include(HashMapCycle.class.getSimpleName()) <span class="comment">// 要导入的测试类</span></span><br><span class="line">                .output(<span class="string">&quot;/Users/admin/Desktop/jmh-map.log&quot;</span>) <span class="comment">// 输出测试结果的文件</span></span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Runner</span>(opt).run(); <span class="comment">// 执行测试</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">entrySet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 遍历</span></span><br><span class="line">        Iterator&lt;Map.Entry&lt;Integer, String&gt;&gt; iterator = map.entrySet().iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            Map.Entry&lt;Integer, String&gt; entry = iterator.next();</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">k</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">            <span class="type">String</span> <span class="variable">v</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">forEachEntrySet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 遍历</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer, String&gt; entry : map.entrySet()) &#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">k</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">            <span class="type">String</span> <span class="variable">v</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">keySet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 遍历</span></span><br><span class="line">        Iterator&lt;Integer&gt; iterator = map.keySet().iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">k</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">            <span class="type">String</span> <span class="variable">v</span> <span class="operator">=</span> map.get(k);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">forEachKeySet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 遍历</span></span><br><span class="line">        <span class="keyword">for</span> (Integer key : map.keySet()) &#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">k</span> <span class="operator">=</span> key;</span><br><span class="line">            <span class="type">String</span> <span class="variable">v</span> <span class="operator">=</span> map.get(k);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lambda</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 遍历</span></span><br><span class="line">        map.forEach((key, value) -&gt; &#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">k</span> <span class="operator">=</span> key;</span><br><span class="line">            <span class="type">String</span> <span class="variable">v</span> <span class="operator">=</span> value;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">streamApi</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 单线程遍历</span></span><br><span class="line">        map.entrySet().stream().forEach((entry) -&gt; &#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">k</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">            <span class="type">String</span> <span class="variable">v</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">parallelStreamApi</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 多线程遍历</span></span><br><span class="line">        map.entrySet().parallelStream().forEach((entry) -&gt; &#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">k</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">            <span class="type">String</span> <span class="variable">v</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所有被添加了 <code>@Benchmark</code> 注解的方法都会被测试，因为 parallelStream 为多线程版本性能一定是最好的，所以就不参与测试了，其他 6 个方法的测试结果如下：</p><p><img src="https://gitee.com/andornot888/andornot_images/raw/master//imgs/hashmap1.webp" alt="图片"></p><p>其中 Units 为 ns&#x2F;op 意思是执行完成时间（单位为纳秒），而 Score 列为平均执行时间， <code>±</code> 符号表示误差。从以上结果可以看出，两个 <code>entrySet</code> 的性能相近，并且执行速度最快，接下来是 <code>stream</code> ，然后是两个 <code>keySet</code>，性能最差的是 <code>KeySet</code> 。</p><blockquote><p>注：以上结果基于测试环境：JDK 1.8 &#x2F; Mac mini (2018) &#x2F; Idea 2020.1</p></blockquote><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p><strong>从以上结果可以看出 <code>entrySet</code> 的性能比 <code>keySet</code> 的性能高出了一倍之多，因此我们应该尽量使用 <code>entrySet</code> 来实现 Map 集合的遍历</strong>。</p><h3 id="字节码分析"><a href="#字节码分析" class="headerlink" title="字节码分析"></a>字节码分析</h3><p>要理解以上的测试结果，我们需要把所有遍历代码通过 <code>javac</code> 编译成字节码来看具体的原因。</p><p>编译后，我们使用 Idea 打开字节码，内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by Fernflower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Map.Entry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashMapTest</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> Map&lt;Integer, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>() &#123;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">var1</span> <span class="operator">=</span> <span class="number">0</span>; var1 &lt; <span class="number">2</span>; ++var1) &#123;</span><br><span class="line">                <span class="built_in">this</span>.put(var1, <span class="string">&quot;val:&quot;</span> + var1);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HashMapTest</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] var0)</span> &#123;</span><br><span class="line">        entrySet();</span><br><span class="line">        keySet();</span><br><span class="line">        forEachEntrySet();</span><br><span class="line">        forEachKeySet();</span><br><span class="line">        lambda();</span><br><span class="line">        streamApi();</span><br><span class="line">        parallelStreamApi();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">entrySet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">var0</span> <span class="operator">=</span> map.entrySet().iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(var0.hasNext()) &#123;</span><br><span class="line">            <span class="type">Entry</span> <span class="variable">var1</span> <span class="operator">=</span> (Entry)var0.next();</span><br><span class="line">            System.out.println(var1.getKey());</span><br><span class="line">            System.out.println((String)var1.getValue());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">keySet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">var0</span> <span class="operator">=</span> map.keySet().iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(var0.hasNext()) &#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">var1</span> <span class="operator">=</span> (Integer)var0.next();</span><br><span class="line">            System.out.println(var1);</span><br><span class="line">            System.out.println((String)map.get(var1));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">forEachEntrySet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">var0</span> <span class="operator">=</span> map.entrySet().iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(var0.hasNext()) &#123;</span><br><span class="line">            <span class="type">Entry</span> <span class="variable">var1</span> <span class="operator">=</span> (Entry)var0.next();</span><br><span class="line">            System.out.println(var1.getKey());</span><br><span class="line">            System.out.println((String)var1.getValue());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">forEachKeySet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">var0</span> <span class="operator">=</span> map.keySet().iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(var0.hasNext()) &#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">var1</span> <span class="operator">=</span> (Integer)var0.next();</span><br><span class="line">            System.out.println(var1);</span><br><span class="line">            System.out.println((String)map.get(var1));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">lambda</span><span class="params">()</span> &#123;</span><br><span class="line">        map.forEach((var0, var1) -&gt; &#123;</span><br><span class="line">            System.out.println(var0);</span><br><span class="line">            System.out.println(var1);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">streamApi</span><span class="params">()</span> &#123;</span><br><span class="line">        map.entrySet().stream().forEach((var0) -&gt; &#123;</span><br><span class="line">            System.out.println(var0.getKey());</span><br><span class="line">            System.out.println((String)var0.getValue());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">parallelStreamApi</span><span class="params">()</span> &#123;</span><br><span class="line">        map.entrySet().parallelStream().forEach((var0) -&gt; &#123;</span><br><span class="line">            System.out.println(var0.getKey());</span><br><span class="line">            System.out.println((String)var0.getValue());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从结果可以看出，除了 Lambda 和 Streams API 之外，通过迭代器循环和 <code>for</code> 循环的遍历的 <code>EntrySet</code> 最终生成的代码是一样的，他们都是在循环中创建了一个遍历对象 <code>Entry</code> ，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">entrySet</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Iterator</span> <span class="variable">var0</span> <span class="operator">=</span> map.entrySet().iterator();</span><br><span class="line">    <span class="keyword">while</span>(var0.hasNext()) &#123;</span><br><span class="line">        <span class="type">Entry</span> <span class="variable">var1</span> <span class="operator">=</span> (Entry)var0.next();</span><br><span class="line">        System.out.println(var1.getKey());</span><br><span class="line">        System.out.println((String)var1.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">forEachEntrySet</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Iterator</span> <span class="variable">var0</span> <span class="operator">=</span> map.entrySet().iterator();</span><br><span class="line">    <span class="keyword">while</span>(var0.hasNext()) &#123;</span><br><span class="line">        <span class="type">Entry</span> <span class="variable">var1</span> <span class="operator">=</span> (Entry)var0.next();</span><br><span class="line">        System.out.println(var1.getKey());</span><br><span class="line">        System.out.println((String)var1.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而 <code>KeySet</code> 的代码也是类似的，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">keySet</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Iterator</span> <span class="variable">var0</span> <span class="operator">=</span> map.keySet().iterator();</span><br><span class="line">    <span class="keyword">while</span>(var0.hasNext()) &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">var1</span> <span class="operator">=</span> (Integer)var0.next();</span><br><span class="line">        System.out.println(var1);</span><br><span class="line">        System.out.println((String)map.get(var1));</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">forEachKeySet</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Iterator</span> <span class="variable">var0</span> <span class="operator">=</span> map.keySet().iterator();</span><br><span class="line">    <span class="keyword">while</span>(var0.hasNext()) &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">var1</span> <span class="operator">=</span> (Integer)var0.next();</span><br><span class="line">        System.out.println(var1);</span><br><span class="line">        System.out.println((String)map.get(var1));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以我们在使用迭代器或是 <code>for</code> 循环 <code>EntrySet</code> 时，他们的性能都是相同的，因为他们最终生成的字节码基本都是一样的；同理 <code>KeySet</code> 的两种遍历方式也是类似的。</p><h3 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h3><p><code>EntrySet</code> 之所以比 <code>KeySet</code> 的性能高是因为，<code>KeySet</code> 在循环时使用了 <code>map.get(key)</code>，而 <code>map.get(key)</code> 相当于又遍历了一遍 Map 集合去查询 <code>key</code> 所对应的值。为什么要用“又”这个词？那是因为<strong>在使用迭代器或者 for 循环时，其实已经遍历了一遍 Map 集合了，因此再使用 <code>map.get(key)</code> 查询时，相当于遍历了两遍</strong>。</p><p>而 <code>EntrySet</code> 只遍历了一遍 Map 集合，之后通过代码“Entry&lt;Integer, String&gt; entry &#x3D; iterator.next()”把对象的 <code>key</code> 和 <code>value</code> 值都放入到了 <code>Entry</code> 对象中，因此再获取 <code>key</code> 和 <code>value</code> 值时就无需再遍历 Map 集合，只需要从 <code>Entry</code> 对象中取值就可以了。</p><p>所以，**<code>EntrySet</code> 的性能比 <code>KeySet</code> 的性能高出了一倍，因为 <code>KeySet</code> 相当于循环了两遍 Map 集合，而 <code>EntrySet</code> 只循环了一遍**。</p><h3 id="安全性测试"><a href="#安全性测试" class="headerlink" title="安全性测试"></a>安全性测试</h3><p>从上面的性能测试结果和原理分析，我想大家应该选用那种遍历方式，已经心中有数的，而接下来我们就从「安全」的角度入手，来分析那种遍历方式更安全。</p><p>我们把以上遍历划分为四类进行测试：迭代器方式、For 循环方式、Lambda 方式和 Stream 方式，测试代码如下。</p><h4 id="1-迭代器方式"><a href="#1-迭代器方式" class="headerlink" title="1.迭代器方式"></a>1.迭代器方式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Iterator&lt;Map.Entry&lt;Integer, String&gt;&gt; iterator = map.entrySet().iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">    Map.Entry&lt;Integer, String&gt; entry = iterator.next();</span><br><span class="line">    <span class="keyword">if</span> (entry.getKey() == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 删除</span></span><br><span class="line">        System.out.println(<span class="string">&quot;del:&quot;</span> + entry.getKey());</span><br><span class="line">        iterator.remove();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;show:&quot;</span> + entry.getKey());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上程序的执行结果：</p><blockquote><p>show:0</p><p>del:1</p><p>show:2</p></blockquote><p>测试结果：<strong>迭代器中循环删除数据安全</strong>。</p><h4 id="2-For-循环方式"><a href="#2-For-循环方式" class="headerlink" title="2.For 循环方式"></a>2.For 循环方式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Map.Entry&lt;Integer, String&gt; entry : map.entrySet()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (entry.getKey() == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 删除</span></span><br><span class="line">        System.out.println(<span class="string">&quot;del:&quot;</span> + entry.getKey());</span><br><span class="line">        map.remove(entry.getKey());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;show:&quot;</span> + entry.getKey());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上程序的执行结果：</p><p><img src="https://gitee.com/andornot888/andornot_images/raw/master//imgs/hashmap2.png" alt="图片"></p><p>测试结果：<strong>For 循环中删除数据非安全</strong>。</p><h4 id="3-Lambda-方式"><a href="#3-Lambda-方式" class="headerlink" title="3.Lambda 方式"></a>3.Lambda 方式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">map.forEach((key, value) -&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="number">1</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;del:&quot;</span> + key);</span><br><span class="line">        map.remove(key);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;show:&quot;</span> + key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>以上程序的执行结果：</p><p><img src="https://gitee.com/andornot888/andornot_images/raw/master//imgs/hashmap3.png" alt="图片">测试结果：<strong>Lambda 循环中删除数据非安全</strong>。</p><p><strong>Lambda 删除的正确方式</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据 map 中的 key 去判断删除</span></span><br><span class="line">map.keySet().removeIf(key -&gt; key == <span class="number">1</span>);</span><br><span class="line">map.forEach((key, value) -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;show:&quot;</span> + key);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>以上程序的执行结果：</p><blockquote><p>show:0</p><p>show:2</p></blockquote><p>从上面的代码可以看出，可以先使用 <code>Lambda</code> 的 <code>removeIf</code> 删除多余的数据，再进行循环是一种正确操作集合的方式。</p><h4 id="4-Stream-方式"><a href="#4-Stream-方式" class="headerlink" title="4.Stream 方式"></a>4.Stream 方式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">map.entrySet().stream().forEach((entry) -&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (entry.getKey() == <span class="number">1</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;del:&quot;</span> + entry.getKey());</span><br><span class="line">        map.remove(entry.getKey());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;show:&quot;</span> + entry.getKey());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>以上程序的执行结果：</p><p><img src="https://gitee.com/andornot888/andornot_images/raw/master//imgs/hashmap4.png" alt="图片"></p><p>测试结果：<strong>Stream 循环中删除数据非安全</strong>。</p><p><strong>Stream 循环的正确方式</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">map.entrySet().stream().filter(m -&gt; <span class="number">1</span> != m.getKey()).forEach((entry) -&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (entry.getKey() == <span class="number">1</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;del:&quot;</span> + entry.getKey());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;show:&quot;</span> + entry.getKey());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>以上程序的执行结果：</p><blockquote><p>show:0</p><p>show:2</p></blockquote><p>从上面的代码可以看出，可以使用 <code>Stream</code> 中的 <code>filter</code> 过滤掉无用的数据，再进行遍历也是一种安全的操作集合的方式。</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>我们不能在遍历中使用集合 <code>map.remove()</code> 来删除数据，这是非安全的操作方式，但我们可以使用迭代器的 <code>iterator.remove()</code> 的方法来删除数据，这是安全的删除集合的方式。同样的我们也可以使用 Lambda 中的 <code>removeIf</code> 来提前删除数据，或者是使用 Stream 中的 <code>filter</code> 过滤掉要删除的数据进行循环，这样都是安全的，当然我们也可以在 <code>for</code> 循环前删除数据在遍历也是线程安全的。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文我们讲了 HashMap 4 种遍历方式：迭代器、for、lambda、stream，以及具体的 7 种遍历方法，综合性能和安全性来看，<strong>我们应该尽量使用迭代器（Iterator）来遍历 <code>EntrySet</code> 的遍历方式来操作 Map 集合</strong>，这样就会既安全又高效了。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类加载器</title>
      <link href="/2022/02/09/Java_11_%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/"/>
      <url>/2022/02/09/Java_11_%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="类加载器的作用"><a href="#类加载器的作用" class="headerlink" title="类加载器的作用"></a>类加载器的作用</h3><p>负责将.class文件（存储的物理文件）加载在到内存中</p><p><img src="https://gitee.com/andornot888/andornot_images/raw/master//imgs/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A81.png" alt="01_类加载器"></p><span id="more"></span><h3 id="类加载的过程"><a href="#类加载的过程" class="headerlink" title="类加载的过程"></a>类加载的过程</h3><ul><li><p>类加载时机</p><ul><li>创建类的实例（对象）</li><li>调用类的类方法</li><li>访问类或者接口的类变量，或者为该类变量赋值</li><li>使用反射方式来强制创建某个类或接口对应的java.lang.Class对象</li><li>初始化某个类的子类</li><li>直接使用java.exe命令来运行某个主类</li></ul></li><li><p>类加载过程</p><ol><li><p>加载</p><ul><li>通过包名 + 类名，获取这个类，准备用流进行传输</li><li>在这个类加载到内存中</li><li>加载完毕创建一个class对象</li></ul><p><img src="https://gitee.com/andornot888/andornot_images/raw/master//imgs/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A82.png" alt="02_类加载过程加载"></p></li><li><p>链接</p><ul><li><p>验证</p><p>确保Class文件字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身安全</p><p>(文件中的信息是否符合虚拟机规范有没有安全隐患)</p></li></ul><p><img src="https://gitee.com/andornot888/andornot_images/raw/master//imgs/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A83.png" alt="03_类加载过程验证"></p><ul><li><p>准备</p><p>负责为类的类变量（被static修饰的变量）分配内存，并设置默认初始化值</p><p>(初始化静态变量)</p></li></ul><p><img src="https://gitee.com/andornot888/andornot_images/raw/master//imgs/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A84.png" alt="04_类加载过程准备"></p><ul><li><p>解析</p><p>将类的二进制数据流中的符号引用替换为直接引用</p><p>(本类中如果用到了其他类，此时就需要找到对应的类)</p></li></ul><p><img src="https://gitee.com/andornot888/andornot_images/raw/master//imgs/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A85.png" alt="05_类加载过程解析"></p></li><li><p>初始化</p><p>根据程序员通过程序制定的主观计划去初始化类变量和其他资源</p><p>(静态变量赋值以及初始化其他资源)</p><p><img src="https://gitee.com/andornot888/andornot_images/raw/master//imgs/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A86.png" alt="06_类加载过程初始化"></p></li></ol></li><li><p>小结</p><ul><li>当一个类被使用的时候，才会加载到内存</li><li>类加载的过程: 加载、验证、准备、解析、初始化</li></ul></li></ul><h3 id="类加载的分类"><a href="#类加载的分类" class="headerlink" title="类加载的分类"></a>类加载的分类</h3><ul><li><p>分类</p><ul><li>Bootstrap class loader：虚拟机的内置类加载器，通常表示为null ，并且没有父null</li><li>Platform class loader：平台类加载器,负责加载JDK中一些特殊的模块</li><li>System class loader：系统类加载器,负责加载用户类路径上所指定的类库</li></ul></li><li><p>类加载器的继承关系</p><ul><li>System的父加载器为Platform</li><li>Platform的父加载器为Bootstrap</li></ul></li><li><p>代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassLoaderDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//获取系统类加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">systemClassLoader</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取系统类加载器的父加载器 --- 平台类加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader1</span> <span class="operator">=</span> systemClassLoader.getParent();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取平台类加载器的父加载器 --- 启动类加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader2</span> <span class="operator">=</span> classLoader1.getParent();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;系统类加载器&quot;</span> + systemClassLoader);</span><br><span class="line">        System.out.println(<span class="string">&quot;平台类加载器&quot;</span> + classLoader1);</span><br><span class="line">        System.out.println(<span class="string">&quot;启动类加载器&quot;</span> + classLoader2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h3><ul><li><p>介绍</p><p>如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行，如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器，如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载，这就是双亲委派模式</p><p><img src="https://gitee.com/andornot888/andornot_images/raw/master//imgs/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A87.png" alt="07_双亲委派模型"></p></li></ul><h3 id="ClassLoader-中的两个方法"><a href="#ClassLoader-中的两个方法" class="headerlink" title="ClassLoader 中的两个方法"></a>ClassLoader 中的两个方法</h3><ul><li><p>方法介绍</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public static ClassLoader getSystemClassLoader()</td><td>获取系统类加载器</td></tr><tr><td>public InputStream getResourceAsStream(String name)</td><td>加载某一个资源文件</td></tr></tbody></table></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassLoaderDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//static ClassLoader getSystemClassLoader() 获取系统类加载器</span></span><br><span class="line">        <span class="comment">//InputStream getResourceAsStream(String name)  加载某一个资源文件</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取系统类加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">systemClassLoader</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//利用加载器去加载一个指定的文件</span></span><br><span class="line">        <span class="comment">//参数：文件的路径（放在src的根目录下，默认去那里加载）</span></span><br><span class="line">        <span class="comment">//返回值：字节流。</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> systemClassLoader.getResourceAsStream(<span class="string">&quot;prop.properties&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        prop.load(is);</span><br><span class="line"></span><br><span class="line">        System.out.println(prop);</span><br><span class="line"></span><br><span class="line">        is.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>增强for和集合的四种遍历方式优缺点</title>
      <link href="/2022/02/08/Java_5_%E5%A2%9E%E5%BC%BAfor%E5%92%8C%E9%9B%86%E5%90%88%E7%9A%84%E5%9B%9B%E7%A7%8D%E9%81%8D%E5%8E%86%E6%96%B9%E5%BC%8F%E4%BC%98%E7%BC%BA%E7%82%B9/"/>
      <url>/2022/02/08/Java_5_%E5%A2%9E%E5%BC%BAfor%E5%92%8C%E9%9B%86%E5%90%88%E7%9A%84%E5%9B%9B%E7%A7%8D%E9%81%8D%E5%8E%86%E6%96%B9%E5%BC%8F%E4%BC%98%E7%BC%BA%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<p>增强for的出现是替代迭代器的，所以在遍历集合或者遍历数组就可以使用增强for去完成。</p><p>四种遍历方法：迭代器、普通for循环、增强for循环、(非重点)listiterator(iterator的子接口)两者相类似。</p><span id="more"></span><p>增强for循环的格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(数据大类型  变量名 : 数组或者集合对象名)&#123;</span><br><span class="line">  输出变量</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>  增强for循环的弊端：</p><ul><li><p>如果集合的对象是null，如果再次对集合操作，就会出现异常；</p></li><li><p>对集合进行判断，非空判断解决</p></li></ul><p>(还以一种Vector自带的elements()方法,类似于迭代器的遍历方法)</p><p>如果集合为null,抛出:java.lang.NullPointerException</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForExercise</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">ArrayList&lt;String&gt; array = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"><span class="comment">//array=null;</span></span><br><span class="line">array.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">array.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">array.add(<span class="string">&quot;worlid&quot;</span>);</span><br><span class="line"><span class="comment">// 迭代器遍历</span></span><br><span class="line"><span class="comment">//优点:自带选择判断语句hasNext()方法,不会出现遍历数量出现错误,书写复杂</span></span><br><span class="line"><span class="comment">//    可以对集合进行删除操作</span></span><br><span class="line"><span class="comment">//缺点:该方法只能遍历集合,比较局限,且需要建立对象,占用空间大</span></span><br><span class="line">Iterator&lt;String&gt; it = array.iterator();</span><br><span class="line"><span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> it.next();</span><br><span class="line">System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line"><span class="comment">//普通for循环</span></span><br><span class="line"><span class="comment">//优点:有判断数组长度的控制语句,并且可以选择遍历长度,</span></span><br><span class="line"><span class="comment">//    for循环使用范围广,且使用简单</span></span><br><span class="line"><span class="comment">//缺点:for循环更多适用于循环条件,不能对集合本身进行操作,对于集合遍历稍显不足</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> x=<span class="number">0</span>;x&lt;array.size();x++) &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> array.get(x);</span><br><span class="line">System.out.println(s1);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;-----------------&quot;</span>);</span><br><span class="line"><span class="comment">//增强for循环</span></span><br><span class="line"><span class="comment">//优点:代码简单易读,书写方便</span></span><br><span class="line"><span class="comment">//缺点:不能对集合本身进行操作</span></span><br><span class="line"><span class="keyword">for</span>(String b:array) &#123;</span><br><span class="line">System.out.println(b);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/02/07/hello-world/"/>
      <url>/2022/02/07/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue快速入门以及常用指令</title>
      <link href="/2022/02/07/Vue_1_Vue%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E4%BB%A5%E5%8F%8A%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
      <url>/2022/02/07/Vue_1_Vue%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E4%BB%A5%E5%8F%8A%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="1、Vue-快速入门"><a href="#1、Vue-快速入门" class="headerlink" title="1、Vue 快速入门"></a>1、Vue 快速入门</h3><h4 id="1-1、Vue的介绍"><a href="#1-1、Vue的介绍" class="headerlink" title="1.1、Vue的介绍"></a>1.1、Vue的介绍</h4><ul><li><p>Vue是一套构建用户界面的渐进式前端框架。</p></li><li><p>只关注视图层，并且非常容易学习，还可以很方便的与其它库或已有项目整合。</p></li><li><p>通过尽可能简单的API来实现响应数据的绑定和组合的视图组件。</p></li></ul><span id="more"></span><ul><li>特点<br>易用：在有HTMLCSSJavaScript的基础上，快速上手。<br>灵活：简单小巧的核心，渐进式技术栈，足以应付任何规模的应用。<br>性能：20kbmin+gzip运行大小、超快虚拟DOM、最省心的优化。</li></ul><h4 id="1-2、Vue的快速入门"><a href="#1-2、Vue的快速入门" class="headerlink" title="1.2、Vue的快速入门"></a>1.2、Vue的快速入门</h4><ul><li><strong>开发步骤</strong></li></ul><ol><li>下载和引入vue.js文件。</li><li>编写入门程序。<br>视图：负责页面渲染，主要由HTML+CSS构成。<br>脚本：负责业务数据模型（Model）以及数据的处理逻辑。</li></ol><ul><li><p><strong>代码实现</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>快速入门<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 视图 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;msg&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 脚本</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#div&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>:<span class="string">&quot;Hello Vue&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="1-3、Vue快速入门详解"><a href="#1-3、Vue快速入门详解" class="headerlink" title="1.3、Vue快速入门详解"></a>1.3、Vue快速入门详解</h4><ul><li><p>Vue 核心对象：每一个 Vue 程序都是从一个 Vue 核心对象开始的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line"> 选项列表;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>选项列表<br>el选项：用于接收获取到页面中的元素。(根据常用选择器获取)。<br>data选项：用于保存当前Vue对象中的数据。在视图中声明的变量需要在此处赋值。<br>methods选项：用于定义方法。方法可以直接通过对象名调用，this代表当前Vue对象。</p></li><li><p>数据绑定<br>在视图部分获取脚本部分的数据。</p></li></ul><h4 id="1-4、Vue快速入门的升级"><a href="#1-4、Vue快速入门的升级" class="headerlink" title="1.4、Vue快速入门的升级"></a>1.4、Vue快速入门的升级</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>快速入门升级<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 视图 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>姓名：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>班级：&#123;&#123;classRoom&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;hi()&quot;</span>&gt;</span>打招呼<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;update()&quot;</span>&gt;</span>修改班级<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/ &quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 脚本</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;<span class="comment">// vm实例化时，会将el和data选项变为vm的属性，语法：$属性名</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#div&quot;</span>,<span class="comment">// element:元素，将id为div的元素与vue实例对象进行绑定，绑定之后，div内部就可以使用vue定义的数据</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">classRoom</span>:<span class="string">&quot;三年一班&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">study</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;正在&quot;</span> + <span class="variable language_">this</span>.<span class="property">classRoom</span> + <span class="string">&quot;好好学习!&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//定义打招呼方法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">hi</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        vm.<span class="title function_">study</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//定义修改班级</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">update</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        vm.<span class="property">classRoom</span> = <span class="string">&quot;五年八班&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-5、Vue小结"><a href="#1-5、Vue小结" class="headerlink" title="1.5、Vue小结"></a>1.5、Vue小结</h4><ul><li>Vue是一套构建用户界面的渐进式前端框架。</li><li>Vue的程序包含视图和脚本两个核心部分。</li><li>脚本部分<ul><li>Vue核心对象。</li><li>选项列表<ul><li>el：接收获取的元素。</li><li>data：保存数据。</li><li>methods：定义方法。</li></ul></li></ul></li><li>视图部分<ul><li>数据绑定：</li></ul></li></ul><h3 id="2、Vue-常用指令"><a href="#2、Vue-常用指令" class="headerlink" title="2、Vue 常用指令"></a>2、Vue 常用指令</h3><h4 id="2-1、指令介绍"><a href="#2-1、指令介绍" class="headerlink" title="2.1、指令介绍"></a>2.1、指令介绍</h4><ul><li><p>指令：是带有 v- 前缀的特殊属性，不同指令具有不同含义。例如 v-html，v-if，v-for。</p></li><li><p>使用指令时，通常编写在标签的属性上，值可以使用 JS 的表达式。</p></li><li><p>指令：vue框架定义的，一些标签的自定义的属性。</p></li><li><p>常用指令</p><p><img src="https://gitee.com/andornot888/andornot_images/raw/master//imgs/Vue%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E4%BB%A5%E5%8F%8A%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4_1.png"></p></li></ul><h4 id="2-2、文本插值"><a href="#2-2、文本插值" class="headerlink" title="2.2、文本插值"></a>2.2、文本插值</h4><ul><li><p>v-html：把文本解析为 HTML 代码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>文本插值<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#div&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>:<span class="string">&quot;&lt;b&gt;Hello Vue&lt;/b&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>页面展示：</p><img src="https://gitee.com/andornot888/andornot_images/raw/master//imgs/Vue%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E4%BB%A5%E5%8F%8A%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4_2.png" alt="image-20220126133032882" style="zoom: 80%;" /><h4 id="2-3、绑定属性"><a href="#2-3、绑定属性" class="headerlink" title="2.3、绑定属性"></a>2.3、绑定属性</h4><ul><li><p>v-bind：为 HTML 标签绑定属性值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>绑定属性<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.my</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>百度一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>百度一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;cls&quot;</span>&gt;</span>我是div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#div&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">url</span>:<span class="string">&quot;https://www.baidu.com&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">cls</span>:<span class="string">&quot;my&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="2-4、条件渲染"><a href="#2-4、条件渲染" class="headerlink" title="2.4、条件渲染"></a>2.4、条件渲染</h4><ul><li><p>v-if：条件性的渲染某元素，判定为真时渲染,否则不渲染。</p></li><li><p>v-else：条件性的渲染。</p></li><li><p>v-else-if：条件性的渲染。</p></li><li><p>v-show：根据条件展示某元素，区别在于切换的是display属性的值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>条件渲染<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 判断num的值，对3取余  余数为0显示div1  余数为1显示div2  余数为2显示div3 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;num % 3 == 0&quot;</span>&gt;</span>div1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;num % 3 == 1&quot;</span>&gt;</span>div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>=<span class="string">&quot;num % 3 == 2&quot;</span>&gt;</span>div3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;flag&quot;</span>&gt;</span>div4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#div&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">num</span>:<span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">flag</span>:<span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="2-5、列表渲染"><a href="#2-5、列表渲染" class="headerlink" title="2.5、列表渲染"></a>2.5、列表渲染</h4><ul><li><p>v-for：列表渲染，遍历容器的元素或者对象的属性。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>列表渲染<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(name,index) in names&quot;</span>&gt;</span></span><br><span class="line">                &#123;&#123;name&#125;&#125;&#123;&#123;index&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(value,key) in student&quot;</span>&gt;</span></span><br><span class="line">                &#123;&#123;value&#125;&#125;&#123;&#123;key&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#div&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">names</span>:[<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">student</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">age</span>:<span class="number">23</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>页面展示：</p><p><img src="https://gitee.com/andornot888/andornot_images/raw/master//imgs/Vue%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E4%BB%A5%E5%8F%8A%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4_3.png" alt="image-20220126141148834"></p><h4 id="2-6、事件绑定"><a href="#2-6、事件绑定" class="headerlink" title="2.6、事件绑定"></a>2.6、事件绑定</h4><ul><li><p>v-on：为 HTML 标签绑定事件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>事件绑定<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;change()&quot;</span>&gt;</span>改变div的内容<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:dblclick</span>=<span class="string">&quot;change()&quot;</span>&gt;</span>改变div的内容<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;change()&quot;</span> &gt;</span>改变div的内容<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#div&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>:<span class="string">&quot;与或非&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">change</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;andornot&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;); </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="2-7、表单绑定"><a href="#2-7、表单绑定" class="headerlink" title="2.7、表单绑定"></a>2.7、表单绑定</h4><ul><li><p><strong>表单绑定</strong><br>v-model：在表单元素上创建双向数据绑定。</p></li><li><p><strong>双向数据绑定</strong><br>更新data数据，页面中的数据也会更新。<br>更新页面数据，data数据也会更新。</p></li><li><p><strong>MVVM模型(ModelViewViewModel)：是MVC模式的改进版</strong><br>在前端页面中，JS对象表示Model，页面表示View，两者做到了最大限度的分离。<br>将Model和View关联起来的就是ViewModel，它是桥梁。<br>ViewModel负责把Model的数据同步到View显示出来，还负责把View修改的数据同步回Model。</p><p><img src="https://gitee.com/andornot888/andornot_images/raw/master//imgs/Vue%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E4%BB%A5%E5%8F%8A%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4_4.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>表单绑定<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- v-html &#123;&#123;&#125;&#125; 单向数据绑定：数据变化会影响界面 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span></span><br><span class="line">             <span class="comment">&lt;!-- v-model ：双向数据绑定，数据变化会影响界面，用户修改界面内容会影响数据</span></span><br><span class="line"><span class="comment">                 v-model 只能用在表单控件中</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;age&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">let</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#div&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">username</span>:<span class="string">&quot;张三&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">age</span>:<span class="number">23</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="2-8、小结"><a href="#2-8、小结" class="headerlink" title="2.8、小结"></a>2.8、小结</h4><ul><li><strong>指令：是带有v-前缀的特殊属性，不同指令具有不同含义。</strong></li><li><strong>文本插值</strong><br>v-html：把文本解析为HTML代码。</li><li><strong>绑定属性</strong><br>v-bind：为HTML标签绑定属性值。</li><li><strong>条件渲染</strong><br>v-if：条件性的渲染某元素，判定为真时渲染,否则不渲染。<br>v-else：条件性的渲染。<br>v-else-if：条件性的渲染。<br>v-show：根据条件展示某元素，区别在于切换的是display属性的值。</li><li><strong>列表渲染</strong><br>v-for：列表渲染，遍历容器的元素或者对象的属性。</li><li><strong>事件绑定</strong><br>v-on：为HTML标签绑定事件。</li><li><strong>表单绑定</strong><br>v-model：在表单元素上创建双向数据绑定。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL锁</title>
      <link href="/2022/01/29/MySQL_6_MySQL%E9%94%81/"/>
      <url>/2022/01/29/MySQL_6_MySQL%E9%94%81/</url>
      
        <content type="html"><![CDATA[<h3 id="1-锁的概念"><a href="#1-锁的概念" class="headerlink" title="1.锁的概念"></a>1.锁的概念</h3><ul><li>之前我们学习过多线程，多线程当中如果想保证数据的准确性是如何实现的呢？没错，通过同步实现。同步就相当于是加锁。加了锁以后有什么好处呢？当一个线程真正在操作数据的时候，其他线程只能等待。当一个线程执行完毕后，释放锁。其他线程才能进行操作！</li></ul><span id="more"></span><ul><li><p>那么我们的MySQL数据库中的锁的功能也是类似的。在我们学习事务的时候，讲解过事务的隔离性，可能会出现脏读、不可重复读、幻读的问题，当时我们的解决方式是通过修改事务的隔离级别来控制，但是数据库的隔离级别呢我们并不推荐修改。所以，锁的作用也可以解决掉之前的问题！</p></li><li><p>锁机制 : 数据库为了保证数据的一致性，而使用各种共享的资源在被并发访问时变得有序所设计的一种规则。</p></li><li><p>举例，在电商网站购买商品时，商品表中只存有1个商品，而此时又有两个人同时购买，那么谁能买到就是一个关键的问题。</p><p>这里会用到事务进行一系列的操作：</p><ol><li>先从商品表中取出物品的数据</li><li>然后插入订单</li><li>付款后，再插入付款表信息</li><li>更新商品表中商品的数量</li></ol><p>以上过程中，使用锁可以对商品数量数据信息进行保护，实现隔离，即只允许第一位用户完成整套购买流程，而其他用户只能等待，这样就解决了并发中的矛盾问题。</p></li><li><p>在数据库中，数据是一种供许多用户共享访问的资源，如何保证数据并发访问的一致性、有效性，是所有数据库必须解决的一个问题，MySQL由于自身架构的特点，在不同的存储引擎中，都设计了面对特定场景的锁定机制，所以引擎的差别，导致锁机制也是有很大差别的。</p></li></ul><h3 id="2-锁的分类"><a href="#2-锁的分类" class="headerlink" title="2.锁的分类"></a>2.锁的分类</h3><ul><li>按操作分类：<ul><li>共享锁：也叫读锁。针对同一份数据，多个事务读取操作可以同时加锁而不互相影响 ，但是不能修改数据记录。</li><li>排他锁：也叫写锁。当前的操作没有完成前,会阻断其他操作的读取和写入</li></ul></li><li>按粒度分类：<ul><li>表级锁：操作时，会锁定整个表。开销小，加锁快；不会出现死锁；锁定力度大，发生锁冲突概率高，并发度最低。偏向于MyISAM存储引擎！</li><li>行级锁：操作时，会锁定当前操作行。开销大，加锁慢；会出现死锁；锁定粒度小，发生锁冲突的概率低，并发度高。偏向于InnoDB存储引擎！</li><li>页级锁：锁的粒度、发生冲突的概率和加锁的开销介于表锁和行锁之间，会出现死锁，并发性能一般。</li></ul></li><li>按使用方式分类：<ul><li>悲观锁：每次查询数据时都认为别人会修改，很悲观，所以查询时加锁。</li><li>乐观锁：每次查询数据时都认为别人不会修改，很乐观，但是更新时会判断一下在此期间别人有没有去更新这个数据</li></ul></li><li>不同存储引擎支持的锁</li></ul><table><thead><tr><th>存储引擎</th><th>表级锁</th><th>行级锁</th><th>页级锁</th></tr></thead><tbody><tr><td>MyISAM</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>InnoDB</td><td>支持</td><td>支持</td><td>不支持</td></tr><tr><td>MEMORY</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>BDB</td><td>支持</td><td>不支持</td><td>支持</td></tr></tbody></table><h3 id="3-演示InnoDB锁"><a href="#3-演示InnoDB锁" class="headerlink" title="3.演示InnoDB锁"></a>3.演示InnoDB锁</h3><ul><li>数据准备</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建db13数据库</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE db13;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用db13数据库</span></span><br><span class="line">USE db13;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建student表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student(</span><br><span class="line">id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">NAME <span class="type">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">age <span class="type">INT</span>,</span><br><span class="line">score <span class="type">INT</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 添加数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span> (<span class="keyword">NULL</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="number">23</span>,<span class="number">99</span>),(<span class="keyword">NULL</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="number">24</span>,<span class="number">95</span>),</span><br><span class="line">(<span class="keyword">NULL</span>,<span class="string">&#x27;王五&#x27;</span>,<span class="number">25</span>,<span class="number">98</span>),(<span class="keyword">NULL</span>,<span class="string">&#x27;赵六&#x27;</span>,<span class="number">26</span>,<span class="number">97</span>);</span><br></pre></td></tr></table></figure><ul><li>共享锁</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 标准语法</span></span><br><span class="line"><span class="keyword">SELECT</span>语句 LOCK <span class="keyword">IN</span> SHARE MODE;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 窗口1</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">共享锁：数据可以被多个事务查询，但是不能修改</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">-- 开启事务</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询id为1的数据记录。加入共享锁</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span> LOCK <span class="keyword">IN</span> SHARE MODE;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询分数为99分的数据记录。加入共享锁</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> score<span class="operator">=</span><span class="number">99</span> LOCK <span class="keyword">IN</span> SHARE MODE;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 提交事务</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 窗口2</span></span><br><span class="line"><span class="comment">-- 开启事务</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询id为1的数据记录(普通查询，可以查询)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询id为1的数据记录，并加入共享锁(可以查询。共享锁和共享锁兼容)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span> LOCK <span class="keyword">IN</span> SHARE MODE;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改id为1的姓名为张三三(不能修改，会出现锁的情况。只有窗口1提交事务后，才能修改成功)</span></span><br><span class="line"><span class="keyword">UPDATE</span> student <span class="keyword">SET</span> NAME<span class="operator">=</span><span class="string">&#x27;张三三&#x27;</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改id为2的姓名为李四四(修改成功，InnoDB引擎默认是行锁)</span></span><br><span class="line"><span class="keyword">UPDATE</span> student <span class="keyword">SET</span> NAME<span class="operator">=</span><span class="string">&#x27;李四四&#x27;</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改id为3的姓名为王五五(注意：InnoDB引擎如果不采用带索引的列。则会提升为表锁)</span></span><br><span class="line"><span class="keyword">UPDATE</span> student <span class="keyword">SET</span> NAME<span class="operator">=</span><span class="string">&#x27;王五五&#x27;</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 提交事务</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><ul><li>排他锁</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 标准语法</span></span><br><span class="line"><span class="keyword">SELECT</span>语句 <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 窗口1</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">排他锁：加锁的数据，不能被其他事务加锁查询或修改</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">-- 开启事务</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询id为1的数据记录，并加入排他锁</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 提交事务</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 窗口2</span></span><br><span class="line"><span class="comment">-- 开启事务</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询id为1的数据记录(普通查询没问题)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询id为1的数据记录，并加入共享锁(不能查询。因为排他锁不能和其他锁共存)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span> LOCK <span class="keyword">IN</span> SHARE MODE;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询id为1的数据记录，并加入排他锁(不能查询。因为排他锁不能和其他锁共存)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改id为1的姓名为张三(不能修改，会出现锁的情况。只有窗口1提交事务后，才能修改成功)</span></span><br><span class="line"><span class="keyword">UPDATE</span> student <span class="keyword">SET</span> NAME<span class="operator">=</span><span class="string">&#x27;张三&#x27;</span> <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 提交事务</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><ul><li>注意：锁的兼容性<ul><li>共享锁和共享锁     兼容</li><li>共享锁和排他锁     冲突</li><li>排他锁和排他锁     冲突</li><li>排他锁和共享锁     冲突</li></ul></li></ul><h3 id="4-演示MyISAM锁"><a href="#4-演示MyISAM锁" class="headerlink" title="4.演示MyISAM锁"></a>4.演示MyISAM锁</h3><ul><li>数据准备</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建product表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> product(</span><br><span class="line">id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">NAME <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">price <span class="type">INT</span></span><br><span class="line">)ENGINE <span class="operator">=</span> MYISAM;  <span class="comment">-- 指定存储引擎为MyISAM</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product <span class="keyword">VALUES</span> (<span class="keyword">NULL</span>,<span class="string">&#x27;华为手机&#x27;</span>,<span class="number">4999</span>),(<span class="keyword">NULL</span>,<span class="string">&#x27;小米手机&#x27;</span>,<span class="number">2999</span>),</span><br><span class="line">(<span class="keyword">NULL</span>,<span class="string">&#x27;苹果&#x27;</span>,<span class="number">8999</span>),(<span class="keyword">NULL</span>,<span class="string">&#x27;中兴&#x27;</span>,<span class="number">1999</span>);</span><br></pre></td></tr></table></figure><ul><li>读锁</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 标准语法</span></span><br><span class="line"><span class="comment">-- 加锁</span></span><br><span class="line">LOCK <span class="keyword">TABLE</span> 表名 READ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 解锁(将当前会话所有的表进行解锁)</span></span><br><span class="line">UNLOCK TABLES;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 窗口1</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">读锁：所有连接只能读取数据，不能修改</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">-- 为product表加入读锁</span></span><br><span class="line">LOCK <span class="keyword">TABLE</span> product READ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询product表(查询成功)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改华为手机的价格为5999(修改失败)</span></span><br><span class="line"><span class="keyword">UPDATE</span> product <span class="keyword">SET</span> price<span class="operator">=</span><span class="number">5999</span> <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 解锁</span></span><br><span class="line">UNLOCK TABLES;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 窗口2</span></span><br><span class="line"><span class="comment">-- 查询product表(查询成功)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改华为手机的价格为5999(不能修改，窗口1解锁后才能修改成功)</span></span><br><span class="line"><span class="keyword">UPDATE</span> product <span class="keyword">SET</span> price<span class="operator">=</span><span class="number">5999</span> <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure><ul><li>写锁</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 标准语法</span></span><br><span class="line"><span class="comment">-- 加锁</span></span><br><span class="line">LOCK <span class="keyword">TABLE</span> 表名 WRITE;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 解锁(将当前会话所有的表进行解锁)</span></span><br><span class="line">UNLOCK TABLES;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 窗口1</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">写锁：其他连接不能查询和修改数据</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">-- 为product表添加写锁</span></span><br><span class="line">LOCK <span class="keyword">TABLE</span> product WRITE;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询product表(查询成功)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改小米手机的金额为3999(修改成功)</span></span><br><span class="line"><span class="keyword">UPDATE</span> product <span class="keyword">SET</span> price<span class="operator">=</span><span class="number">3999</span> <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 解锁</span></span><br><span class="line">UNLOCK TABLES;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 窗口2</span></span><br><span class="line"><span class="comment">-- 查询product表(不能查询。只有窗口1解锁后才能查询成功)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改小米手机的金额为2999(不能修改。只有窗口1解锁后才能修改成功)</span></span><br><span class="line"><span class="keyword">UPDATE</span> product <span class="keyword">SET</span> price<span class="operator">=</span><span class="number">2999</span> <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">2</span>;</span><br></pre></td></tr></table></figure><h3 id="5-演示悲观锁和乐观锁"><a href="#5-演示悲观锁和乐观锁" class="headerlink" title="5.演示悲观锁和乐观锁"></a>5.演示悲观锁和乐观锁</h3><ul><li><p>悲观锁的概念</p><ul><li>就是很悲观，它对于数据被外界修改的操作持保守态度，认为数据随时会修改。</li><li>整个数据处理中需要将数据加锁。悲观锁一般都是依靠关系型数据库提供的锁机制。</li><li>我们之前所学的行锁，表锁不论是读写锁都是悲观锁。</li></ul></li><li><p>乐观锁的概念</p><ul><li>就是很乐观，每次自己操作数据的时候认为没有人会来修改它，所以不去加锁。</li><li>但是在更新的时候会去判断在此期间数据有没有被修改。</li><li>需要用户自己去实现，不会发生并发抢占资源，只有在提交操作的时候检查是否违反数据完整性。</li></ul></li><li><p>悲观锁和乐观锁使用前提</p><ul><li>对于读的操作远多于写的操作的时候，这时候一个更新操作加锁会阻塞所有的读取操作，降低了吞吐量。最后还要释放锁，锁是需要一些开销的，这时候可以选择乐观锁。</li><li>如果是读写比例差距不是非常大或者系统没有响应不及时，吞吐量瓶颈的问题，那就不要去使用乐观锁，它增加了复杂度，也带来了业务额外的风险。这时候可以选择悲观锁。</li></ul></li><li><p>乐观锁的实现方式</p><ul><li><p>版本号</p><ul><li>给数据表中添加一个version列，每次更新后都将这个列的值加1。</li><li>读取数据时，将版本号读取出来，在执行更新的时候，比较版本号。</li><li>如果相同则执行更新，如果不相同，说明此条数据已经发生了变化。</li><li>用户自行根据这个通知来决定怎么处理，比如重新开始一遍，或者放弃本次更新。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建city表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> city(</span><br><span class="line">id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,  <span class="comment">-- 城市id</span></span><br><span class="line">NAME <span class="type">VARCHAR</span>(<span class="number">20</span>),                   <span class="comment">-- 城市名称</span></span><br><span class="line">VERSION <span class="type">INT</span>                         <span class="comment">-- 版本号</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> city <span class="keyword">VALUES</span> (<span class="keyword">NULL</span>,<span class="string">&#x27;北京&#x27;</span>,<span class="number">1</span>),(<span class="keyword">NULL</span>,<span class="string">&#x27;上海&#x27;</span>,<span class="number">1</span>),(<span class="keyword">NULL</span>,<span class="string">&#x27;广州&#x27;</span>,<span class="number">1</span>),(<span class="keyword">NULL</span>,<span class="string">&#x27;深圳&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改北京为北京市</span></span><br><span class="line"><span class="comment">-- 1.查询北京的version</span></span><br><span class="line"><span class="keyword">SELECT</span> VERSION <span class="keyword">FROM</span> city <span class="keyword">WHERE</span> NAME<span class="operator">=</span><span class="string">&#x27;北京&#x27;</span>;</span><br><span class="line"><span class="comment">-- 2.修改北京为北京市，版本号+1。并对比版本号</span></span><br><span class="line"><span class="keyword">UPDATE</span> city <span class="keyword">SET</span> NAME<span class="operator">=</span><span class="string">&#x27;北京市&#x27;</span>,VERSION<span class="operator">=</span>VERSION<span class="operator">+</span><span class="number">1</span> <span class="keyword">WHERE</span> NAME<span class="operator">=</span><span class="string">&#x27;北京&#x27;</span> <span class="keyword">AND</span> VERSION<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure></li><li><p>时间戳</p><ul><li>和版本号方式基本一样，给数据表中添加一个列，名称无所谓，数据类型需要是timestamp</li><li>每次更新后都将最新时间插入到此列。</li><li>读取数据时，将时间读取出来，在执行更新的时候，比较时间。</li><li>如果相同则执行更新，如果不相同，说明此条数据已经发生了变化。</li></ul></li></ul></li></ul><h3 id="6-锁的总结"><a href="#6-锁的总结" class="headerlink" title="6.锁的总结"></a>6.锁的总结</h3><ul><li><p>表锁和行锁</p><ul><li>行锁：锁的粒度更细，加行锁的性能损耗较大。并发处理能力较高。InnoDB引擎默认支持！</li><li>表锁：锁的粒度较粗，加表锁的性能损耗较小。并发处理能力较低。InnoDB、MyISAM引擎支持！</li></ul></li><li><p>InnoDB锁优化建议</p><ul><li><p>尽量通过带索引的列来完成数据查询，从而避免InnoDB无法加行锁而升级为表锁。</p></li><li><p>合理设计索引，索引要尽可能准确，尽可能的缩小锁定范围，避免造成不必要的锁定。</p></li><li><p>尽可能减少基于范围的数据检索过滤条件。</p></li><li><p>尽量控制事务的大小，减少锁定的资源量和锁定时间长度。</p></li><li><p>在同一个事务中，尽可能做到一次锁定所需要的所有资源，减少死锁产生概率。</p></li><li><p>对于非常容易产生死锁的业务部分，可以尝试使用升级锁定颗粒度，通过表级锁定来减少死锁的产生。</p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL索引</title>
      <link href="/2022/01/26/MySQL_5_MySQL%E7%B4%A2%E5%BC%95/"/>
      <url>/2022/01/26/MySQL_5_MySQL%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<h3 id="1-索引的概念"><a href="#1-索引的概念" class="headerlink" title="1.索引的概念"></a>1.索引的概念</h3><ul><li>我们之前学习过集合，其中的ArrayList集合的特点之一就是有索引。那么有索引会带来哪些好处呢？</li></ul><span id="more"></span><ul><li><p>没错，查询数据快！我们可以通过索引来快速查找到想要的数据。那么对于我们的MySQL数据库中的索引功能也是类似的！</p></li><li><p>MySQL数据库中的索引：是帮助MySQL高效获取数据的一种数据结构！所以，索引的本质就是数据结构。</p></li><li><p>在表数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式指向数据， 这样就可以在这些数据结构上实现高级查找算法，这种数据结构就是索引。</p></li><li><p>一张数据表，用于保存数据。   一个索引配置文件，用于保存索引，每个索引都去指向了某一个数据(表格演示)</p></li><li><p>举例，无索引和有索引的查找原理</p></li></ul><p><img src="https://gitee.com/andornot888/andornot_images/raw/master//imgs/MySQL%E7%B4%A2%E5%BC%95_1.png" alt="04"></p><h3 id="2-索引的分类"><a href="#2-索引的分类" class="headerlink" title="2.索引的分类"></a>2.索引的分类</h3><ul><li>功能分类 <ul><li>普通索引： 最基本的索引，它没有任何限制。</li><li>唯一索引：索引列的值必须唯一，但允许有空值。如果是组合索引，则列值组合必须唯一。</li><li>主键索引：一种特殊的唯一索引，不允许有空值。一般在建表时同时创建主键索引。</li><li>组合索引：顾名思义，就是将单列索引进行组合。</li><li>外键索引：只有InnoDB引擎支持外键索引，用来保证数据的一致性、完整性和实现级联操作。</li><li>全文索引：快速匹配全部文档的方式。InnoDB引擎5.6版本后才支持全文索引。MEMORY引擎不支持。</li></ul></li><li>结构分类<ul><li>B+Tree索引 ：MySQL使用最频繁的一个索引数据结构，是InnoDB和MyISAM存储引擎默认的索引类型。</li><li>Hash索引 : MySQL中Memory存储引擎默认支持的索引类型。</li></ul></li></ul><h3 id="3-索引的操作"><a href="#3-索引的操作" class="headerlink" title="3.索引的操作"></a>3.索引的操作</h3><ul><li>数据准备</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建db12数据库</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE db12;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用db12数据库</span></span><br><span class="line">USE db12;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建student表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student(</span><br><span class="line">id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">NAME <span class="type">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">age <span class="type">INT</span>,</span><br><span class="line">score <span class="type">INT</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 添加数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span> (<span class="keyword">NULL</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="number">23</span>,<span class="number">98</span>),(<span class="keyword">NULL</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="number">24</span>,<span class="number">95</span>),</span><br><span class="line">(<span class="keyword">NULL</span>,<span class="string">&#x27;王五&#x27;</span>,<span class="number">25</span>,<span class="number">96</span>),(<span class="keyword">NULL</span>,<span class="string">&#x27;赵六&#x27;</span>,<span class="number">26</span>,<span class="number">94</span>),(<span class="keyword">NULL</span>,<span class="string">&#x27;周七&#x27;</span>,<span class="number">27</span>,<span class="number">99</span>);</span><br></pre></td></tr></table></figure><ul><li>创建索引<ul><li>注意：如果一个表中有一列是主键，那么就会默认为其创建主键索引！(主键列不需要单独创建索引)</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 标准语法</span></span><br><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">UNIQUE</span><span class="operator">|</span>FULLTEXT] INDEX 索引名称</span><br><span class="line">[<span class="keyword">USING</span> 索引类型]  <span class="comment">-- 默认是B+TREE</span></span><br><span class="line"><span class="keyword">ON</span> 表名(列名...);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 为student表中姓名列创建一个普通索引</span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX idx_name <span class="keyword">ON</span> student(NAME);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 为student表中年龄列创建一个唯一索引</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> INDEX idx_age <span class="keyword">ON</span> student(age);</span><br></pre></td></tr></table></figure><ul><li>查看索引</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 标准语法</span></span><br><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> 表名;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看student表中的索引</span></span><br><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> student;</span><br></pre></td></tr></table></figure><ul><li>alter语句添加索引</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 普通索引</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> INDEX 索引名称(列名);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 组合索引</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> INDEX 索引名称(列名<span class="number">1</span>,列名<span class="number">2</span>,...);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 主键索引</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">PRIMARY</span> KEY(主键列名); </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 外键索引(添加外键约束，就是外键索引)</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> 外键名 <span class="keyword">FOREIGN</span> KEY (本表外键列名) <span class="keyword">REFERENCES</span> 主表名(主键列名);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 唯一索引</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> 索引名称(列名);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 全文索引(mysql只支持文本类型)</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> FULLTEXT 索引名称(列名);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 为student表中name列添加全文索引</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student <span class="keyword">ADD</span> FULLTEXT idx_fulltext_name(name);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看student表中的索引</span></span><br><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> student;</span><br></pre></td></tr></table></figure><ul><li>删除索引</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 标准语法</span></span><br><span class="line"><span class="keyword">DROP</span> INDEX 索引名称 <span class="keyword">ON</span> 表名;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除student表中的idx_score索引</span></span><br><span class="line"><span class="keyword">DROP</span> INDEX idx_score <span class="keyword">ON</span> student;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看student表中的索引</span></span><br><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> student;</span><br></pre></td></tr></table></figure><h3 id="4-索引效率的测试"><a href="#4-索引效率的测试" class="headerlink" title="4.索引效率的测试"></a>4.索引效率的测试</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建product商品表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> product(</span><br><span class="line">id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,  <span class="comment">-- 商品id</span></span><br><span class="line">NAME <span class="type">VARCHAR</span>(<span class="number">10</span>),    <span class="comment">-- 商品名称</span></span><br><span class="line">price <span class="type">INT</span>                           <span class="comment">-- 商品价格</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 定义存储函数，生成长度为10的随机字符串并返回</span></span><br><span class="line">DELIMITER $</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> rand_string() </span><br><span class="line"><span class="keyword">RETURNS</span> <span class="type">VARCHAR</span>(<span class="number">255</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> big_str <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIGKLMNOPQRSTUVWXYZ&#x27;</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> small_str <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">WHILE i <span class="operator">&lt;=</span> <span class="number">10</span> DO</span><br><span class="line"><span class="keyword">SET</span> small_str <span class="operator">=</span>CONCAT(small_str,<span class="built_in">SUBSTRING</span>(big_str,<span class="built_in">FLOOR</span>(<span class="number">1</span><span class="operator">+</span>RAND()<span class="operator">*</span><span class="number">52</span>),<span class="number">1</span>));</span><br><span class="line"><span class="keyword">SET</span> i<span class="operator">=</span>i<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">END</span> WHILE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">RETURN</span> small_str;</span><br><span class="line"><span class="keyword">END</span>$</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 定义存储过程，添加100万条数据到product表中</span></span><br><span class="line">DELIMITER $</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> pro_test()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> num <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">WHILE num <span class="operator">&lt;=</span> <span class="number">1000000</span> DO</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product <span class="keyword">VALUES</span> (<span class="keyword">NULL</span>,rand_string(),num);</span><br><span class="line"><span class="keyword">SET</span> num <span class="operator">=</span> num <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">END</span> WHILE;</span><br><span class="line"><span class="keyword">END</span>$</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 调用存储过程</span></span><br><span class="line"><span class="keyword">CALL</span> pro_test();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询总记录条数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> product;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询product表的索引</span></span><br><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> product;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询name为OkIKDLVwtG的数据   (0.049)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> NAME<span class="operator">=</span><span class="string">&#x27;OkIKDLVwtG&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 通过id列查询OkIKDLVwtG的数据  (1毫秒)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">999998</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 为name列添加索引</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> product <span class="keyword">ADD</span> INDEX idx_name(NAME);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询name为OkIKDLVwtG的数据   (0.001)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> NAME<span class="operator">=</span><span class="string">&#x27;OkIKDLVwtG&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">范围查询</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">-- 查询价格为800~1000之间的所有数据 (0.052)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> price <span class="keyword">BETWEEN</span> <span class="number">800</span> <span class="keyword">AND</span> <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">排序查询</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">-- 查询价格为800~1000之间的所有数据,降序排列  (0.083)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> price <span class="keyword">BETWEEN</span> <span class="number">800</span> <span class="keyword">AND</span> <span class="number">1000</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> price <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 为price列添加索引</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> product <span class="keyword">ADD</span> INDEX idx_price(price);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询价格为800~1000之间的所有数据 (0.011)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> price <span class="keyword">BETWEEN</span> <span class="number">800</span> <span class="keyword">AND</span> <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询价格为800~1000之间的所有数据,降序排列  (0.001)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> price <span class="keyword">BETWEEN</span> <span class="number">800</span> <span class="keyword">AND</span> <span class="number">1000</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> price <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><h3 id="5-索引的实现原则"><a href="#5-索引的实现原则" class="headerlink" title="5.索引的实现原则"></a>5.索引的实现原则</h3><ul><li>索引是在MySQL的存储引擎中实现的，所以每种存储引擎的索引不一定完全相同，也不是所有的引擎支持所有的索引类型。这里我们主要介绍InnoDB引擎的实现的<strong>B+Tree索引</strong>。</li><li>B+Tree是一种树型数据结构，是B-Tree的变种。通常使用在数据库和操作系统中的文件系统，特点是能够保持数据稳定有序。我们逐步的来了解一下。</li></ul><h4 id="5-1磁盘存储"><a href="#5-1磁盘存储" class="headerlink" title="5.1磁盘存储"></a>5.1磁盘存储</h4><ul><li>系统从磁盘读取数据到内存时是以磁盘块（block）为基本单位的</li><li>位于同一个磁盘块中的数据会被一次性读取出来，而不是需要什么取什么。</li><li>InnoDB存储引擎中有页（Page）的概念，页是其磁盘管理的最小单位。InnoDB存储引擎中默认每个页的大小为16KB。</li><li>InnoDB引擎将若干个地址连接磁盘块，以此来达到页的大小16KB，在查询数据时如果一个页中的每条数据都能有助于定位数据记录的位置，这将会减少磁盘I&#x2F;O次数，提高查询效率。</li></ul><h4 id="5-2BTree"><a href="#5-2BTree" class="headerlink" title="5.2BTree"></a>5.2BTree</h4><ul><li><p>BTree结构的数据可以让系统高效的找到数据所在的磁盘块。为了描述BTree，首先定义一条记录为一个二元组[key, data] ，key为记录的键值，对应表中的主键值，data为一行记录中除主键外的数据。对于不同的记录，key值互不相同。BTree中的每个节点根据实际情况可以包含大量的关键字信息和分支，如下图所示为一个3阶的BTree： </p><p><img src="https://gitee.com/andornot888/andornot_images/raw/master//imgs/MySQL%E7%B4%A2%E5%BC%95_2.png" alt="05"></p></li><li><p>根据图中结构显示，每个节点占用一个盘块的磁盘空间，一个节点上有两个升序排序的关键字和三个指向子树根节点的指针，指针存储的是子节点所在磁盘块的地址。两个关键词划分成的三个范围域对应三个指针指向的子树的数据的范围域。以根节点为例，关键字为17和35，P1指针指向的子树的数据范围为小于17，P2指针指向的子树的数据范围为17~35，P3指针指向的子树的数据范围为大于35。</p></li></ul><p>查找顺序：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">模拟查找<span class="number">15</span>的过程 : </span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>根节点找到磁盘块<span class="number">1</span>，读入内存。【磁盘I<span class="operator">/</span>O操作第<span class="number">1</span>次】</span><br><span class="line">比较关键字<span class="number">15</span>在区间（<span class="operator">&lt;</span><span class="number">17</span>），找到磁盘块<span class="number">1</span>的指针P1。</span><br><span class="line"><span class="number">2.</span>P1指针找到磁盘块<span class="number">2</span>，读入内存。【磁盘I<span class="operator">/</span>O操作第<span class="number">2</span>次】</span><br><span class="line">比较关键字<span class="number">15</span>在区间（<span class="operator">&gt;</span><span class="number">12</span>），找到磁盘块<span class="number">2</span>的指针P3。</span><br><span class="line"><span class="number">3.</span>P3指针找到磁盘块<span class="number">7</span>，读入内存。【磁盘I<span class="operator">/</span>O操作第<span class="number">3</span>次】</span><br><span class="line">在磁盘块<span class="number">7</span>中找到关键字<span class="number">15</span>。</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 分析上面过程，发现需要3次磁盘I/O操作，和3次内存查找操作。</span></span><br><span class="line"><span class="comment">-- 由于内存中的关键字是一个有序表结构，可以利用二分法查找提高效率。而3次磁盘I/O操作是影响整个BTree查找效率的决定因素。BTree使用较少的节点个数，使每次磁盘I/O取到内存的数据都发挥了作用，从而提高了查询效率。</span></span><br></pre></td></tr></table></figure><h4 id="5-3B-Tree"><a href="#5-3B-Tree" class="headerlink" title="5.3B+Tree"></a>5.3B+Tree</h4><ul><li>B+Tree是在BTree基础上的一种优化，使其更适合实现外存储索引结构，InnoDB存储引擎就是用B+Tree实现其索引结构。</li><li>从上一节中的BTree结构图中可以看到每个节点中不仅包含数据的key值，还有data值。而每一个页的存储空间是有限的，如果data数据较大时将会导致每个节点              （即一个页）能存储的key的数量很小，当存储的数据量很大时同样会导致B-Tree的深度较大，增大查询时的磁盘I&#x2F;O次数，进而影响查询效率。在B+Tree中，所有数据记录节点都是按照键值大小顺序存放在同一层的叶子节点上，而非叶子节点上只存储key值信息，这样可以大大加大每个节点存储的key值数量，降低B+Tree的高度。</li><li>B+Tree相对于BTree区别：<ul><li>非叶子节点只存储键值信息。</li><li>所有叶子节点之间都有一个连接指针。</li><li>数据记录都存放在叶子节点中。</li></ul></li><li>将上一节中的BTree优化，由于B+Tree的非叶子节点只存储键值信息，假设每个磁盘块能存储4个键值及指针信息，则变成B+Tree后其结构如下图所示：</li></ul><p><img src="https://gitee.com/andornot888/andornot_images/raw/master//imgs/MySQL%E7%B4%A2%E5%BC%95_3.png" alt="06"></p><p>通常在B+Tree上有两个头指针，一个指向根节点，另一个指向关键字最小的叶子节点，而且所有叶子节点（即数据节点）之间是一种链式环结构。因此可以对B+Tree进行两种查找运算：</p><ul><li>【有范围】对于主键的范围查找和分页查找</li><li>【有顺序】从根节点开始，进行随机查找</li></ul><p>实际情况中每个节点可能不能填充满，因此在数据库中，B+Tree的高度一般都在2~4层。MySQL的InnoDB存储引擎在设计时是将根节点常驻内存的，也就是说查找某一键值的行记录时最多只需要1~3次磁盘I&#x2F;O操作。</p><h3 id="6-总结：索引的设计原则"><a href="#6-总结：索引的设计原则" class="headerlink" title="6.总结：索引的设计原则"></a>6.总结：索引的设计原则</h3><p>索引的设计可以遵循一些已有的原则，创建索引的时候请尽量考虑符合这些原则，便于提升索引的使用效率，更高效的使用索引。</p><ul><li>创建索引时的原则<ul><li>对查询频次较高，且数据量比较大的表建立索引。</li><li>使用唯一索引，区分度越高，使用索引的效率越高。</li><li>索引字段的选择，最佳候选列应当从where子句的条件中提取，如果where子句中的组合比较多，那么应当挑选最常用、过滤效果最好的列的组合。</li><li>使用短索引，索引创建之后也是使用硬盘来存储的，因此提升索引访问的I&#x2F;O效率，也可以提升总体的访问效率。假如构成索引的字段总长度比较短，那么在给定大小的存储块内可以存储更多的索引值，相应的可以有效的提升MySQL访问索引的I&#x2F;O效率。</li><li>索引可以有效的提升查询数据的效率，但索引数量不是多多益善，索引越多，维护索引的代价自然也就水涨船高。对于插入、更新、删除等DML操作比较频繁的表来说，索引过多，会引入相当高的维护代价，降低DML操作的效率，增加相应操作的时间消耗。另外索引过多的话，MySQL也会犯选择困难病，虽然最终仍然会找到一个可用的索引，但无疑提高了选择的代价。</li></ul></li><li>联合索引的特点</li></ul><p>在mysql建立联合索引时会遵循最左前缀匹配的原则，即最左优先，在检索数据时从联合索引的最左边开始匹配，<br>对列name列、address和列phone列建一个联合索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> <span class="keyword">ADD</span> INDEX index_three(name,address,phone);</span><br></pre></td></tr></table></figure><p>联合索引index_three实际建立了(name)、(name,address)、(name,address,phone)三个索引。所以下面的三个SQL语句都可以命中索引。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> address <span class="operator">=</span> <span class="string">&#x27;北京&#x27;</span> <span class="keyword">AND</span> phone <span class="operator">=</span> <span class="string">&#x27;12345&#x27;</span> <span class="keyword">AND</span> name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span> <span class="keyword">AND</span> address <span class="operator">=</span> <span class="string">&#x27;北京&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>;</span><br></pre></td></tr></table></figure><p>上面三个查询语句执行时会依照最左前缀匹配原则，检索时分别会使用索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(name,address,phone)</span><br><span class="line">(name,address)</span><br><span class="line">(name)</span><br></pre></td></tr></table></figure><p>进行数据匹配。</p><p>索引的字段可以是任意顺序的，如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 优化器会帮助我们调整顺序，下面的SQL语句都可以命中索引</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> address <span class="operator">=</span> <span class="string">&#x27;北京&#x27;</span> <span class="keyword">AND</span> phone <span class="operator">=</span> <span class="string">&#x27;12345&#x27;</span> <span class="keyword">AND</span> name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>;</span><br></pre></td></tr></table></figure><p>Mysql的优化器会帮助我们调整where条件中的顺序，以匹配我们建立的索引。</p><p>联合索引中最左边的列不包含在条件查询中，所以根据上面的原则，下面的SQL语句就不会命中索引。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 联合索引中最左边的列不包含在条件查询中，下面的SQL语句就不会命中索引</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> address <span class="operator">=</span> <span class="string">&#x27;北京&#x27;</span> <span class="keyword">AND</span> phone <span class="operator">=</span> <span class="string">&#x27;12345&#x27;</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL存储引擎</title>
      <link href="/2022/01/25/MySQL_4_MySQL%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/"/>
      <url>/2022/01/25/MySQL_4_MySQL%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</url>
      
        <content type="html"><![CDATA[<h3 id="1-MySQL体系结构"><a href="#1-MySQL体系结构" class="headerlink" title="1.MySQL体系结构"></a>1.MySQL体系结构</h3><ul><li><p>体系结构的概念</p><ul><li>任何一套系统当中，每个部件都能起到一定的作用！</li></ul></li></ul><span id="more"></span><ul><li>MySQL的体系结构</li></ul><p><img src="https://gitee.com/andornot888/andornot_images/raw/master//imgs/MySQL%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E_1.png" alt="02"></p><ul><li>体系结构详解<ul><li>客户端连接<ul><li>支持接口：支持的客户端连接，例如C、Java、PHP等语言来连接MySQL数据库</li></ul></li><li>第一层：网络连接层<ul><li>连接池：管理、缓冲用户的连接，线程处理等需要缓存的需求。</li><li>例如：当客户端发送一个请求连接，会从连接池中获取一个连接进行使用。</li></ul></li><li>第二层：核心服务层<ul><li>管理服务和工具：系统的管理和控制工具，例如备份恢复、复制、集群等。 </li><li>SQL接口：接受SQL命令，并且返回查询结果。</li><li>查询解析器：验证和解析SQL命令，例如过滤条件、语法结构等。 </li><li>查询优化器：在执行查询之前，使用默认的一套优化机制进行优化sql语句</li><li>缓存：如果缓存当中有想查询的数据，则直接将缓存中的数据返回。没有的话再重新查询！</li></ul></li><li>第三层：存储引擎层<ul><li>插件式存储引擎：管理和操作数据的一种机制，包括(存储数据、如何更新、查询数据等)</li></ul></li><li>第四层：系统文件层<ul><li>文件系统：配置文件、数据文件、日志文件、错误文件、二进制文件等等的保存</li></ul></li></ul></li></ul><h3 id="2-MySQL存储引擎"><a href="#2-MySQL存储引擎" class="headerlink" title="2.MySQL存储引擎"></a>2.MySQL存储引擎</h3><ul><li><p>引擎的概念</p><ul><li>生活中，引擎就是整个机器运行的核心，不同的引擎具备不同的功能。</li></ul></li><li><p>MySQL存储引擎的概念</p><ul><li>MySQL数据库使用不同的机制存取表文件 , 机制的差别在于不同的存储方式、索引技巧、锁定水平以及广泛的不同的功能和能力，在MySQL中 , 将这些不同的技术及配套的功能称为<strong>存储引擎</strong></li><li>在关系型数据库中数据的存储是以表的形式存进行储的，所以存储引擎也可以称为<strong>表类型</strong>（即存储和操作此表的类型）。</li><li>Oracle , SqlServer等数据库只有一种存储引擎 , 而MySQL针对不同的需求, 配置MySQL的不同的存储引擎 , 就会让数据库采取了不同的处理数据的方式和扩展功能。</li><li>通过选择不同的引擎 ,能够获取最佳的方案 ,  也能够获得额外的速度或者功能，提高程序的整体效果。所以了解引擎的特性 , 才能贴合我们的需求 , 更好的发挥数据库的性能。</li></ul></li><li><p>MySQL支持的存储引擎</p><ul><li>MySQL5.7支持的引擎包括：InnoDB、MyISAM、MEMORY、Archive、Federate、CSV、BLACKHOLE等</li><li>其中较为常用的有三种：InnoDB、MyISAM、MEMORY</li></ul></li></ul><h3 id="3-常用引擎的特性对比"><a href="#3-常用引擎的特性对比" class="headerlink" title="3.常用引擎的特性对比"></a>3.常用引擎的特性对比</h3><ul><li>常用的存储引擎<ul><li>MyISAM存储引擎<ul><li>访问快,不支持事务和外键。表结构保存在.frm文件中，表数据保存在.MYD文件中，索引保存在.MYI文件中。</li></ul></li><li>InnoDB存储引擎(MySQL5.5版本后默认的存储引擎)<ul><li>支持事务 ,占用磁盘空间大 ,支持并发控制。表结构保存在.frm文件中，如果是共享表空间，数据和索引保存在 innodb_data_home_dir 和 innodb_data_file_path定义的表空间中，可以是多个文件。如果是多表空间存储，每个表的数据和索引单独保存在 .ibd 中。</li></ul></li><li>MEMORY存储引擎<ul><li>内存存储 , 速度快 ,不安全 ,适合小量快速访问的数据。表结构保存在.frm中。</li></ul></li></ul></li><li>特性对比</li></ul><table><thead><tr><th>特性</th><th>MyISAM</th><th>InnoDB</th><th>MEMORY</th></tr></thead><tbody><tr><td>存储限制</td><td>有(平台对文件系统大小的限制)</td><td>64TB</td><td>有(平台的内存限制)</td></tr><tr><td><strong>事务安全</strong></td><td><strong>不支持</strong></td><td><strong>支持</strong></td><td><strong>不支持</strong></td></tr><tr><td><strong>锁机制</strong></td><td><strong>表锁</strong></td><td><strong>表锁&#x2F;行锁</strong></td><td><strong>表锁</strong></td></tr><tr><td>B+Tree索引</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>哈希索引</td><td>不支持</td><td>不支持</td><td>支持</td></tr><tr><td>全文索引</td><td>支持</td><td>支持</td><td>不支持</td></tr><tr><td><strong>集群索引</strong></td><td><strong>不支持</strong></td><td><strong>支持</strong></td><td><strong>不支持</strong></td></tr><tr><td>数据索引</td><td>不支持</td><td>支持</td><td>支持</td></tr><tr><td>数据缓存</td><td>不支持</td><td>支持</td><td>N&#x2F;A</td></tr><tr><td>索引缓存</td><td>支持</td><td>支持</td><td>N&#x2F;A</td></tr><tr><td>数据可压缩</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>空间使用</td><td>低</td><td>高</td><td>N&#x2F;A</td></tr><tr><td>内存使用</td><td>低</td><td>高</td><td>中等</td></tr><tr><td>批量插入速度</td><td>高</td><td>低</td><td>高</td></tr><tr><td><strong>外键</strong></td><td><strong>不支持</strong></td><td><strong>支持</strong></td><td><strong>不支持</strong></td></tr></tbody></table><h3 id="4-引擎的操作"><a href="#4-引擎的操作" class="headerlink" title="4.引擎的操作"></a>4.引擎的操作</h3><ul><li>查询数据库支持的引擎</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 标准语法</span></span><br><span class="line"><span class="keyword">SHOW</span> ENGINES;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询数据库支持的存储引擎</span></span><br><span class="line"><span class="keyword">SHOW</span> ENGINES;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 表含义:</span></span><br><span class="line">  <span class="operator">-</span> support : 指服务器是否支持该存储引擎</span><br><span class="line">  <span class="operator">-</span> transactions : 指存储引擎是否支持事务</span><br><span class="line">  <span class="operator">-</span> XA : 指存储引擎是否支持分布式事务处理</span><br><span class="line">  <span class="operator">-</span> Savepoints : 指存储引擎是否支持保存点</span><br></pre></td></tr></table></figure><ul><li>查询某个数据库中所有数据表的引擎</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 标准语法</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">TABLE</span> STATUS <span class="keyword">FROM</span> 数据库名称;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看db9数据库所有表的存储引擎</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">TABLE</span> STATUS <span class="keyword">FROM</span> db9;</span><br></pre></td></tr></table></figure><ul><li>查询某个数据库中某个数据表的引擎</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 标准语法</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">TABLE</span> STATUS <span class="keyword">FROM</span> 数据库名称 <span class="keyword">WHERE</span> NAME <span class="operator">=</span> <span class="string">&#x27;数据表名称&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看db9数据库中stu_score表的存储引擎</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">TABLE</span> STATUS <span class="keyword">FROM</span> db9 <span class="keyword">WHERE</span> NAME <span class="operator">=</span> <span class="string">&#x27;stu_score&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>创建数据表，指定存储引擎</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 标准语法</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">列名,数据类型,</span><br><span class="line">    ...</span><br><span class="line">)ENGINE <span class="operator">=</span> 引擎名称;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建db11数据库</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE db11;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用db11数据库</span></span><br><span class="line">USE db11;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建engine_test表，指定存储引擎为MyISAM</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> engine_test(</span><br><span class="line">id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">NAME <span class="type">VARCHAR</span>(<span class="number">10</span>)</span><br><span class="line">)ENGINE <span class="operator">=</span> MYISAM;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询engine_test表的引擎</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">TABLE</span> STATUS <span class="keyword">FROM</span> db11 <span class="keyword">WHERE</span> NAME <span class="operator">=</span> <span class="string">&#x27;engine_test&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>修改表的存储引擎</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 标准语法</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 ENGINE <span class="operator">=</span> 引擎名称;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改engine_test表的引擎为InnoDB</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> engine_test ENGINE <span class="operator">=</span> INNODB;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询engine_test表的引擎</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">TABLE</span> STATUS <span class="keyword">FROM</span> db11 <span class="keyword">WHERE</span> NAME <span class="operator">=</span> <span class="string">&#x27;engine_test&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="5-总结：引擎的选择"><a href="#5-总结：引擎的选择" class="headerlink" title="5.总结：引擎的选择"></a>5.总结：引擎的选择</h3><ul><li>MyISAM ：由于MyISAM不支持事务、不支持外键、支持全文检索和表级锁定，读写相互阻塞，读取速度快，节约资源，所以如果应用是以<strong>查询操作</strong>和<strong>插入操作</strong>为主，只有很少的<strong>更新和删除</strong>操作，并且对事务的完整性、并发性要求不是很高，那么选择这个存储引擎是非常合适的。</li><li>InnoDB : 是MySQL的默认存储引擎， 由于InnoDB支持事务、支持外键、行级锁定 ，支持所有辅助索引(5.5.5后不支持全文检索)，高缓存，所以用于对事务的完整性有比较高的要求，在并发条件下要求数据的一致性，读写频繁的操作，那么InnoDB存储引擎是比较合适的选择，比如BBS、计费系统、充值转账等</li><li>MEMORY：将所有数据保存在RAM中，在需要快速定位记录和其他类似数据环境下，可以提供更快的访问。MEMORY的缺陷就是对表的大小有限制，太大的表无法缓存在内存中，其次是要确保表的数据可以恢复，数据库异常终止后表中的数据是可以恢复的。MEMORY表通常用于更新不太频繁的小表，用以快速得到访问结果。</li><li>总结：针对不同的需求场景，来选择最适合的存储引擎即可！如果不确定、则使用数据库默认的存储引擎！</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL事务</title>
      <link href="/2022/01/24/MySQL_3_MySQL%E4%BA%8B%E5%8A%A1/"/>
      <url>/2022/01/24/MySQL_3_MySQL%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h3 id="1-事务的概念"><a href="#1-事务的概念" class="headerlink" title="1.事务的概念"></a>1.事务的概念</h3><p> 一条或多条 SQL 语句组成一个执行单元，其特点是这个单元要么同时成功要么同时失败，单元中的每条 SQL 语句都相互依赖，形成一个整体，如果某条 SQL 语句执行失败或者出现错误，那么整个单元就会回滚，撤回到事务最初的状态，如果单元中所有的 SQL 语句都执行成功，则事务就顺利执行。</p><span id="more"></span><h3 id="2-事务的数据准备"><a href="#2-事务的数据准备" class="headerlink" title="2.事务的数据准备"></a>2.事务的数据准备</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建db10数据库</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE db10;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用db10数据库</span></span><br><span class="line">USE db10;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建账户表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> account(</span><br><span class="line">id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,<span class="comment">-- 账户id</span></span><br><span class="line">NAME <span class="type">VARCHAR</span>(<span class="number">20</span>),<span class="comment">-- 账户名称</span></span><br><span class="line">money <span class="keyword">DOUBLE</span><span class="comment">-- 账户余额</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 添加数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> account <span class="keyword">VALUES</span> (<span class="keyword">NULL</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="number">1000</span>),(<span class="keyword">NULL</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h3 id="3-未管理事务演示"><a href="#3-未管理事务演示" class="headerlink" title="3.未管理事务演示"></a>3.未管理事务演示</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 张三给李四转账500元</span></span><br><span class="line"><span class="comment">-- 1.张三账户-500</span></span><br><span class="line"><span class="keyword">UPDATE</span> account <span class="keyword">SET</span> money<span class="operator">=</span>money<span class="number">-500</span> <span class="keyword">WHERE</span> NAME<span class="operator">=</span><span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"><span class="comment">-- 2.李四账户+500</span></span><br><span class="line">出错了...</span><br><span class="line"><span class="keyword">UPDATE</span> account <span class="keyword">SET</span> money<span class="operator">=</span>money<span class="operator">+</span><span class="number">500</span> <span class="keyword">WHERE</span> NAME<span class="operator">=</span><span class="string">&#x27;李四&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 该场景下，这两条sql语句要么同时成功，要么同时失败。就需要被事务所管理！</span></span><br></pre></td></tr></table></figure><h3 id="4-管理事务演示"><a href="#4-管理事务演示" class="headerlink" title="4.管理事务演示"></a>4.管理事务演示</h3><ul><li>操作事务的三个步骤<ol><li>开启事务：记录回滚点，并通知服务器，将要执行一组操作，要么同时成功、要么同时失败</li><li>执行sql语句：执行具体的一条或多条sql语句</li><li>结束事务(提交|回滚)<ul><li>提交：没出现问题，数据进行更新</li><li>回滚：出现问题，数据恢复到开启事务时的状态</li></ul></li></ol></li><li>开启事务</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 标准语法</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br></pre></td></tr></table></figure><ul><li>回滚事务</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 标准语法</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br></pre></td></tr></table></figure><ul><li>提交事务</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 标准语法</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><ul><li>管理事务演示</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 开启事务</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 张三给李四转账500元</span></span><br><span class="line"><span class="comment">-- 1.张三账户-500</span></span><br><span class="line"><span class="keyword">UPDATE</span> account <span class="keyword">SET</span> money<span class="operator">=</span>money<span class="number">-500</span> <span class="keyword">WHERE</span> NAME<span class="operator">=</span><span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"><span class="comment">-- 2.李四账户+500</span></span><br><span class="line"><span class="comment">-- 出错了...</span></span><br><span class="line"><span class="keyword">UPDATE</span> account <span class="keyword">SET</span> money<span class="operator">=</span>money<span class="operator">+</span><span class="number">500</span> <span class="keyword">WHERE</span> NAME<span class="operator">=</span><span class="string">&#x27;李四&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 回滚事务(出现问题)</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 提交事务(没出现问题)</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><h3 id="5-事务的提交方式"><a href="#5-事务的提交方式" class="headerlink" title="5.事务的提交方式"></a>5.事务的提交方式</h3><ul><li><p>提交方式</p><ul><li>自动提交(MySQL默认为自动提交)</li><li>手动提交</li></ul></li><li><p>修改提交方式</p><ul><li>查看提交方式</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 标准语法</span></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@AUTOCOMMIT</span>;  <span class="comment">-- 1代表自动提交    0代表手动提交</span></span><br></pre></td></tr></table></figure><ul><li>修改提交方式</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 标准语法</span></span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@AUTOCOMMIT</span><span class="operator">=</span>数字;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改为手动提交</span></span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@AUTOCOMMIT</span><span class="operator">=</span><span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看提交方式</span></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@AUTOCOMMIT</span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="6-事务的四大特征-ACID"><a href="#6-事务的四大特征-ACID" class="headerlink" title="6.事务的四大特征(ACID)"></a>6.事务的四大特征(ACID)</h3><ul><li>原子性(atomicity)<ul><li>原子性是指事务包含的所有操作要么全部成功，要么全部失败回滚，因此事务的操作如果成功就必须要完全应用到数据库，如果操作失败则不能对数据库有任何影响</li></ul></li><li>一致性(consistency)<ul><li>一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态</li><li>拿转账来说，假设张三和李四两者的钱加起来一共是2000，那么不管A和B之间如何转账，转几次账，事务结束后两个用户的钱相加起来应该还得是2000，这就是事务的一致性</li></ul></li><li>隔离性(isolcation)<ul><li>隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离</li></ul></li><li>持久性(durability)<ul><li>持久性是指一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作</li></ul></li></ul><h3 id="7-事务的隔离级别"><a href="#7-事务的隔离级别" class="headerlink" title="7.事务的隔离级别"></a>7.事务的隔离级别</h3><ul><li>隔离级别的概念<ul><li>多个客户端操作时 ,各个客户端的事务之间应该是隔离的，相互独立的 , 不受影响的。</li><li>而如果多个事务操作同一批数据时，则需要设置不同的隔离级别 , 否则就会产生问题 。</li><li>我们先来了解一下四种隔离级别的名称 , 再来看看可能出现的问题</li></ul></li><li>四种隔离级别</li></ul><table><thead><tr><th>1</th><th>读未提交</th><th>read uncommitted</th></tr></thead><tbody><tr><td><strong>2</strong></td><td><strong>读已提交</strong></td><td><strong>read committed</strong></td></tr><tr><td><strong>3</strong></td><td><strong>可重复读</strong></td><td><strong>repeatable read</strong></td></tr><tr><td><strong>4</strong></td><td><strong>串行化</strong></td><td><strong>serializable</strong></td></tr></tbody></table><ul><li>可能引发的问题</li></ul><table><thead><tr><th>问题</th><th>现象</th></tr></thead><tbody><tr><td><strong>脏读</strong></td><td><strong>是指在一个事务处理过程中读取了另一个未提交的事务中的数据 , 导致两次查询结果不一致</strong></td></tr><tr><td><strong>不可重复读</strong></td><td><strong>是指在一个事务处理过程中读取了另一个事务中修改并已提交的数据, 导致两次查询结果不一致</strong></td></tr><tr><td><strong>幻读</strong></td><td><strong>select 某记录是否存在，不存在，准备插入此记录，但执行 insert 时发现此记录已存在，无法插入。或不存在执行delete删除，却发现删除成功</strong></td></tr></tbody></table><ul><li>查询数据库隔离级别</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 标准语法</span></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@TX</span>_ISOLATION;</span><br></pre></td></tr></table></figure><ul><li>修改数据库隔离级别</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 标准语法</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> TRANSACTION ISOLATION LEVEL 级别字符串;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改数据库隔离级别为read uncommitted</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> TRANSACTION ISOLATION LEVEL read uncommitted;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看隔离级别</span></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@TX</span>_ISOLATION;   <span class="comment">-- 修改后需要断开连接重新开</span></span><br></pre></td></tr></table></figure><h3 id="8-事务隔离级别演示"><a href="#8-事务隔离级别演示" class="headerlink" title="8.事务隔离级别演示"></a>8.事务隔离级别演示</h3><ul><li><p>脏读的问题</p><ul><li>窗口1</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询账户表</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 设置隔离级别为read uncommitted</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> transaction isolation level read uncommitted;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 开启事务</span></span><br><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 转账</span></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">-</span> <span class="number">500</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">+</span> <span class="number">500</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 窗口2查询转账结果 ,出现脏读(查询到其他事务未提交的数据)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 窗口2查看转账结果后，执行回滚</span></span><br><span class="line"><span class="keyword">rollback</span>;</span><br></pre></td></tr></table></figure><ul><li>窗口2</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询隔离级别</span></span><br><span class="line"><span class="keyword">select</span> @<span class="variable">@tx</span>_isolation;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 开启事务</span></span><br><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询账户表</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account;</span><br></pre></td></tr></table></figure></li><li><p>解决脏读的问题和演示不可重复读的问题</p><ul><li>窗口1</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 设置隔离级别为read committed</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> transaction isolation level read committed;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 开启事务</span></span><br><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 转账</span></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">-</span> <span class="number">500</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">+</span> <span class="number">500</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 窗口2查看转账结果，并没有发生变化(脏读问题被解决了)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 执行提交事务。</span></span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 窗口2查看转账结果，数据发生了变化(出现了不可重复读的问题，读取到其他事务已提交的数据)</span></span><br></pre></td></tr></table></figure><ul><li>窗口2</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询隔离级别</span></span><br><span class="line"><span class="keyword">select</span> @<span class="variable">@tx</span>_isolation;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 开启事务</span></span><br><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询账户表</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account;</span><br></pre></td></tr></table></figure></li><li><p>解决不可重复读的问题</p><ul><li>窗口1</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 设置隔离级别为repeatable read</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> transaction isolation level repeatable read;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 开启事务</span></span><br><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 转账</span></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">-</span> <span class="number">500</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">+</span> <span class="number">500</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 窗口2查看转账结果，并没有发生变化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 执行提交事务</span></span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 这个时候窗口2只要还在上次事务中，看到的结果都是相同的。只有窗口2结束事务，才能看到变化(不可重复读的问题被解决)</span></span><br></pre></td></tr></table></figure><ul><li>窗口2</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询隔离级别</span></span><br><span class="line"><span class="keyword">select</span> @<span class="variable">@tx</span>_isolation;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 开启事务</span></span><br><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询账户表</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 提交事务</span></span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询账户表</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account;</span><br></pre></td></tr></table></figure></li><li><p>幻读的问题和解决</p><ul><li>窗口1</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 设置隔离级别为repeatable read</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> transaction isolation level repeatable read;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 开启事务</span></span><br><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加一条记录</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> account <span class="keyword">VALUES</span> (<span class="number">3</span>,<span class="string">&#x27;王五&#x27;</span>,<span class="number">1500</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询账户表，本窗口可以查看到id为3的结果</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> account;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 提交事务</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><ul><li>窗口2</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询隔离级别</span></span><br><span class="line"><span class="keyword">select</span> @<span class="variable">@tx</span>_isolation;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 开启事务</span></span><br><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询账户表，查询不到新添加的id为3的记录</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加id为3的一条数据，发现添加失败。出现了幻读</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> account <span class="keyword">VALUES</span> (<span class="number">3</span>,<span class="string">&#x27;测试&#x27;</span>,<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 提交事务</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询账户表，查询到了新添加的id为3的记录</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account;</span><br></pre></td></tr></table></figure><ul><li>解决幻读的问题</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">窗口1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">-- 设置隔离级别为serializable</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> transaction isolation level serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 开启事务</span></span><br><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加一条记录</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> account <span class="keyword">VALUES</span> (<span class="number">4</span>,<span class="string">&#x27;赵六&#x27;</span>,<span class="number">1600</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询账户表，本窗口可以查看到id为4的结果</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> account;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 提交事务</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">窗口2</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">-- 查询隔离级别</span></span><br><span class="line"><span class="keyword">select</span> @<span class="variable">@tx</span>_isolation;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 开启事务</span></span><br><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询账户表，发现查询语句无法执行，数据表被锁住！只有窗口1提交事务后，才可以继续操作</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加id为4的一条数据，发现已经存在了，就不会再添加了！幻读的问题被解决</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> account <span class="keyword">VALUES</span> (<span class="number">4</span>,<span class="string">&#x27;测试&#x27;</span>,<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 提交事务</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="9-隔离级别总结"><a href="#9-隔离级别总结" class="headerlink" title="9.隔离级别总结"></a>9.隔离级别总结</h3><table><thead><tr><th></th><th>隔离级别</th><th>名称</th><th>出现脏读</th><th>出现不可重复读</th><th>出现幻读</th><th>数据库默认隔离级别</th></tr></thead><tbody><tr><td>1</td><td><strong>read uncommitted</strong></td><td>读未提交</td><td>是</td><td>是</td><td>是</td><td></td></tr><tr><td>2</td><td><strong>read committed</strong></td><td>读已提交</td><td>否</td><td>是</td><td>是</td><td>Oracle &#x2F; SQL Server</td></tr><tr><td>3</td><td><strong>repeatable read</strong></td><td>可重复读</td><td>否</td><td>否</td><td>是</td><td>MySQL</td></tr><tr><td>4</td><td>**serializable **</td><td>串行化</td><td>否</td><td>否</td><td>否</td><td></td></tr></tbody></table><blockquote><p>注意：隔离级别从小到大安全性越来越高，但是效率越来越低 , 所以不建议使用READ UNCOMMITTED 和 SERIALIZABLE 隔离级别.</p></blockquote><h3 id="10-事务的总结"><a href="#10-事务的总结" class="headerlink" title="10.事务的总结"></a>10.事务的总结</h3><ul><li>一条或多条 SQL 语句组成一个执行单元，其特点是这个单元要么同时成功要么同时失败。例如转账操作</li><li>开启事务：start transaction;</li><li>回滚事务：rollback;</li><li>提交事务：commit;</li><li>事务四大特征<ul><li>原子性</li><li>持久性</li><li>隔离性</li><li>一致性</li></ul></li><li>事务的隔离级别<ul><li>read uncommitted(读未提交)</li><li>read committed (读已提交)</li><li>repeatable read (可重复读)</li><li>serializable (串行化)</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>update联合更新</title>
      <link href="/2022/01/12/MySQL_2_update%E8%81%94%E5%90%88%E6%9B%B4%E6%96%B0/"/>
      <url>/2022/01/12/MySQL_2_update%E8%81%94%E5%90%88%E6%9B%B4%E6%96%B0/</url>
      
        <content type="html"><![CDATA[<p>  更新处理数据时，单表联合更新出现错误：</p><blockquote><p>1093 - You can’t specify target table ‘a’ for update in FROM clause</p></blockquote><span id="more"></span><p>多表联合更新正常</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> mz_xzjg </span><br><span class="line"><span class="keyword">SET</span> DEFSTR11 <span class="operator">=</span> ( <span class="keyword">SELECT</span> 区划编码 <span class="keyword">FROM</span> `sheet1` <span class="keyword">WHERE</span> sheet1.`区划名称` <span class="operator">=</span> mz_xzjg.DEFSTR13 ) </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">NODE_LEVEL <span class="operator">&lt;</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><p>当单表联合时报错误提示，不能在FROM子句中指定更新的目标表’a’  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 错误用法</span></span><br><span class="line"><span class="keyword">UPDATE</span> mz_xzjg a </span><br><span class="line"><span class="keyword">SET</span> a.DEFSTR11 <span class="operator">=</span> ( <span class="keyword">SELECT</span> b.DEFSTR11 <span class="keyword">FROM</span> `mz_xzjg` b <span class="keyword">WHERE</span> b.XZQH_ID <span class="operator">=</span> a.node_pid ) </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">NODE_LEVEL <span class="operator">=</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><p>复制了一张<code>mz_xzjg</code>表<code>mz_xzjg_copy1</code>,没有报错</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> mz_xzjg a </span><br><span class="line"><span class="keyword">SET</span> a.DEFSTR11 <span class="operator">=</span> ( <span class="keyword">SELECT</span> b.DEFSTR11 <span class="keyword">FROM</span> `mz_xzjg_copy1` b <span class="keyword">WHERE</span> b.XZQH_ID <span class="operator">=</span> a.node_pid ) </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">NODE_LEVEL <span class="operator">=</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><p><code>mz_xzjg_copy1</code>相当于一张临时表，直接SELECT</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> mz_xzjg a </span><br><span class="line"><span class="keyword">SET</span> a.DEFSTR11 <span class="operator">=</span> ( <span class="keyword">SELECT</span> b.DEFSTR11 <span class="keyword">FROM</span> ( <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `mz_xzjg` ) b <span class="keyword">WHERE</span> b.XZQH_ID <span class="operator">=</span> a.node_pid ) </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">NODE_LEVEL <span class="operator">=</span> <span class="number">4</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>身份证工具类</title>
      <link href="/2021/12/31/Java_4_IDCardUtil/"/>
      <url>/2021/12/31/Java_4_IDCardUtil/</url>
      
        <content type="html"><![CDATA[<p>校验身份证号；</p><p>根据身份证号获取年龄、出生日期、性别。</p><span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IDCardUtil</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 15位身份证号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">FIFTEEN_ID_CARD</span> <span class="operator">=</span> <span class="number">15</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 18位身份证号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">EIGHTEEN_ID_CARD</span> <span class="operator">=</span> <span class="number">18</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">SimpleDateFormat</span> <span class="variable">format</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据身份证号获取性别</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> IDCard</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getSex</span><span class="params">(String IDCard)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sex</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(IDCard)) &#123;</span><br><span class="line">            <span class="comment">// 15位身份证号</span></span><br><span class="line">            <span class="keyword">if</span> (IDCard.length() == FIFTEEN_ID_CARD) &#123;</span><br><span class="line">                <span class="keyword">if</span> (Integer.parseInt(IDCard.substring(<span class="number">14</span>, <span class="number">15</span>)) % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                    sex = <span class="string">&quot;2&quot;</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    sex = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 18位身份证号</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (IDCard.length() == EIGHTEEN_ID_CARD) &#123;</span><br><span class="line">                <span class="comment">// 判断性别</span></span><br><span class="line">                <span class="keyword">if</span> (Integer.parseInt(IDCard.substring(<span class="number">16</span>).substring(<span class="number">0</span>, <span class="number">1</span>)) % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                    sex = <span class="string">&quot;2&quot;</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    sex = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据身份证号获取年龄</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> IDCard</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title function_">getAge</span><span class="params">(String IDCard)</span> &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(IDCard) &amp;&amp; isValid(IDCard)) &#123;</span><br><span class="line">            <span class="comment">// 15位身份证号</span></span><br><span class="line">            <span class="keyword">if</span> (IDCard.length() == FIFTEEN_ID_CARD) &#123;</span><br><span class="line">                <span class="comment">// 身份证上的年份(15位身份证为1980年前的)</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">uyear</span> <span class="operator">=</span> <span class="string">&quot;19&quot;</span> + IDCard.substring(<span class="number">6</span>, <span class="number">8</span>);</span><br><span class="line">                <span class="comment">// 身份证上的月份</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">uyue</span> <span class="operator">=</span> IDCard.substring(<span class="number">8</span>, <span class="number">10</span>);</span><br><span class="line">                <span class="comment">// 当前年份</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">fyear</span> <span class="operator">=</span> format.format(date).substring(<span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">                <span class="comment">// 当前月份</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">fyue</span> <span class="operator">=</span> format.format(date).substring(<span class="number">5</span>, <span class="number">7</span>);</span><br><span class="line">                <span class="keyword">if</span> (Integer.parseInt(uyue) &lt;= Integer.parseInt(fyue)) &#123;</span><br><span class="line">                    age = Integer.parseInt(fyear) - Integer.parseInt(uyear) + <span class="number">1</span>;</span><br><span class="line">                    <span class="comment">// 当前用户还没过生</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    age = Integer.parseInt(fyear) - Integer.parseInt(uyear);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 18位身份证号</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (IDCard.length() == EIGHTEEN_ID_CARD) &#123;</span><br><span class="line">                <span class="comment">// 身份证上的年份</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">year</span> <span class="operator">=</span> IDCard.substring(<span class="number">6</span>).substring(<span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">                <span class="comment">// 身份证上的月份</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">yue</span> <span class="operator">=</span> IDCard.substring(<span class="number">10</span>).substring(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">                <span class="comment">// 当前年份</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">fyear</span> <span class="operator">=</span> format.format(date).substring(<span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">                <span class="comment">// 当前月份</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">fyue</span> <span class="operator">=</span> format.format(date).substring(<span class="number">5</span>, <span class="number">7</span>);</span><br><span class="line">                <span class="comment">// 当前月份大于用户出身的月份表示已过生日</span></span><br><span class="line">                <span class="keyword">if</span> (Integer.parseInt(yue) &lt;= Integer.parseInt(fyue)) &#123;</span><br><span class="line">                    age = Integer.parseInt(fyear) - Integer.parseInt(year) + <span class="number">1</span>;</span><br><span class="line">                    <span class="comment">// 当前用户还没过生日</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    age = Integer.parseInt(fyear) - Integer.parseInt(year);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取出生日期 yyyy年MM月dd日</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> IDCard</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getBirthday</span><span class="params">(String IDCard)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">birthday</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">year</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">month</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">day</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(IDCard)) &#123;</span><br><span class="line">            <span class="comment">// 15位身份证号</span></span><br><span class="line">            <span class="keyword">if</span> (IDCard.length() == FIFTEEN_ID_CARD) &#123;</span><br><span class="line">                <span class="comment">// 身份证上的年份(15位身份证为1980年前的)</span></span><br><span class="line">                year = <span class="string">&quot;19&quot;</span> + IDCard.substring(<span class="number">6</span>, <span class="number">8</span>);</span><br><span class="line">                <span class="comment">// 身份证上的月份</span></span><br><span class="line">                month = IDCard.substring(<span class="number">8</span>, <span class="number">10</span>);</span><br><span class="line">                <span class="comment">// 身份证上的日期</span></span><br><span class="line">                day = IDCard.substring(<span class="number">10</span>, <span class="number">12</span>);</span><br><span class="line">                <span class="comment">// 18位身份证号</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (IDCard.length() == EIGHTEEN_ID_CARD) &#123;</span><br><span class="line">                <span class="comment">// 身份证上的年份</span></span><br><span class="line">                year = IDCard.substring(<span class="number">6</span>).substring(<span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">                <span class="comment">// 身份证上的月份</span></span><br><span class="line">                month = IDCard.substring(<span class="number">10</span>).substring(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">                <span class="comment">// 身份证上的日期</span></span><br><span class="line">                day = IDCard.substring(<span class="number">12</span>).substring(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            birthday = year + <span class="string">&quot;-&quot;</span> + month + <span class="string">&quot;-&quot;</span> + day;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 身份证验证</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     *            号码内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否有效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">validResult</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">idNumPattern</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;(^[1-9]\\d&#123;5&#125;(18|19|([23]\\d))\\d&#123;2&#125;((0[1-9])|(10|11|12))(([0-2][1-9])&quot;</span> +</span><br><span class="line">                <span class="string">&quot;|10|20|30|31)\\d&#123;3&#125;[0-9Xx]$)|(^[1-9]\\d&#123;5&#125;\\d&#123;2&#125;((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\\d&#123;2&#125;$)&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 格式验证</span></span><br><span class="line">        <span class="keyword">if</span> (!idNumPattern.matcher(id).matches())&#123;</span><br><span class="line">            validResult = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 校验长度只能为15或18</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> id.length();</span><br><span class="line">        <span class="keyword">if</span> (len != FIFTEEN_ID_CARD &amp;&amp; len != EIGHTEEN_ID_CARD) &#123;</span><br><span class="line">            validResult = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> validResult;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抽奖（生成不重复随机数）</title>
      <link href="/2021/12/28/Java_3_core_array_lottery/"/>
      <url>/2021/12/28/Java_3_core_array_lottery/</url>
      
        <content type="html"><![CDATA[<p>​    来自《Java核心技术》数组章节的案例，根据开奖的数量和开奖的最大值输出不重复随机数，即开奖结果。</p><span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Lottery</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入开奖的数量：&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入开奖的最大值：&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//填充数组：1，2，3，...，n</span></span><br><span class="line">        <span class="type">int</span>[] numbers = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">            numbers[i] = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] result = <span class="keyword">new</span> <span class="title class_">int</span>[k];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; result.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> (<span class="type">int</span>) (Math.random() * n);<span class="comment">//生成一个0~（n-1）之间的随机索引</span></span><br><span class="line">            result[i] = numbers[r];</span><br><span class="line">            numbers[r] = numbers[n - <span class="number">1</span>];<span class="comment">//将numbers数组的最后一个值赋给上一步生成的“随机数”所在的索引位置，避免生成重复结果</span></span><br><span class="line">            n--;</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(result);</span><br><span class="line">        System.out.println(<span class="string">&quot;开奖结果为：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> r : result) &#123;</span><br><span class="line">            System.out.println(r);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获取时间差</title>
      <link href="/2021/12/24/Java_2_getTimeDeffer/"/>
      <url>/2021/12/24/Java_2_getTimeDeffer/</url>
      
        <content type="html"><![CDATA[<p>  根据两个字符串类型时间获取时分秒时间差。</p><span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取时间差</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> time1 time2 需要计算的时间</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getTimeDeffer</span><span class="params">(String time1, String time2)</span> &#123;</span><br><span class="line">       <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">       <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">       <span class="keyword">if</span> (time1 != <span class="literal">null</span> &amp;&amp; time2 != <span class="literal">null</span> &amp;&amp; time1.length() != <span class="number">0</span> &amp;&amp; time2.length() != <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="type">long</span> <span class="variable">dt1</span> <span class="operator">=</span> sdf.parse(time1).getTime();</span><br><span class="line">               <span class="type">long</span> <span class="variable">dt2</span> <span class="operator">=</span> sdf.parse(time2).getTime();</span><br><span class="line">               <span class="type">long</span> <span class="variable">dc</span> <span class="operator">=</span> Math.abs(dt2 - dt1);</span><br><span class="line">               <span class="type">long</span> <span class="variable">seconds</span> <span class="operator">=</span> dc / <span class="number">1000</span>;</span><br><span class="line">               <span class="type">long</span> <span class="variable">date</span> <span class="operator">=</span> seconds / (<span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span>);     <span class="comment">//相差的天数</span></span><br><span class="line">               <span class="type">long</span> <span class="variable">hour</span> <span class="operator">=</span> (seconds - date * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span>) / (<span class="number">60</span> * <span class="number">60</span>);<span class="comment">//相差的小时数</span></span><br><span class="line">               <span class="type">long</span> <span class="variable">minut</span> <span class="operator">=</span> (seconds - date * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> - hour * <span class="number">60</span> * <span class="number">60</span>) / (<span class="number">60</span>);<span class="comment">//相差的分钟数</span></span><br><span class="line">               <span class="type">long</span> <span class="variable">second</span> <span class="operator">=</span> (seconds - date * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> - hour * <span class="number">60</span> * <span class="number">60</span> - minut * <span class="number">60</span>);<span class="comment">//相差的秒数</span></span><br><span class="line">               <span class="keyword">return</span> (date == <span class="number">0</span> ? <span class="string">&quot;&quot;</span> : (date + <span class="string">&quot;天&quot;</span>)) + (hour == <span class="number">0</span> ? <span class="string">&quot;&quot;</span> : (hour + <span class="string">&quot;小时&quot;</span>)) + (minut == <span class="number">0</span> ? <span class="string">&quot;&quot;</span> : (minut + <span class="string">&quot;分&quot;</span>)) + (second == <span class="number">0</span> ? <span class="string">&quot;&quot;</span> : (second + <span class="string">&quot;秒&quot;</span>));</span><br><span class="line">           &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github的.gitignore忽略文件</title>
      <link href="/2021/12/21/git_1_gitignore/"/>
      <url>/2021/12/21/git_1_gitignore/</url>
      
        <content type="html"><![CDATA[<p>一定要养成在项目开始就创建.gitignore文件的习惯，否则一旦push，处理起来会非常麻烦。</p><p>当然如果已经push了怎么办 ？</p><p>当然也有解决方法，如下：</p><span id="more"></span><p>有时候在项目开发过程中，突然心血来潮想把某些目录或文件加入忽略规则，按照上述方法定义后发现并未生效，原因是.gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。那么解决方法就是先把本地缓存删除（改变成未track状态），然后再提交：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">rm</span> -r --cached .</span><br><span class="line"></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line">git commit -m <span class="string">&#x27;update .gitignore&#x27;</span></span><br></pre></td></tr></table></figure><hr><p><strong>推荐：</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">rm</span> --cached ignore_file //文件名</span><br><span class="line"></span><br><span class="line">git commit -m <span class="string">&#x27;update .gitignore&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>外观数列</title>
      <link href="/2021/12/19/Interview_1_CountandSay/"/>
      <url>/2021/12/19/Interview_1_CountandSay/</url>
      
        <content type="html"><![CDATA[<p>来自朋友面试华为的题，在leetcode上原题为外观数列<a href="https://leetcode-cn.com/problems/count-and-say/">38. 外观数列 - 力扣（LeetCode） (leetcode-cn.com)</a>。</p><span id="more"></span><p>有一个数列A[n]，从A[0]开始每一项都是一个数字，数列中A[n+1]都是A[n]的描述，其中A[0]&#x3D;1。<br>规则如下：</p><blockquote><p> A[0]:1</p><p> A[1]:11 含义其中A[0]&#x3D;1是1个1 即11</p><p> 表示A[0]从左到右连续出现了1次1</p><p> A[2]:21 含义其中A[1]&#x3D;11是2个1 即21</p><p> 表示A[1]从左到右连续出现了2次1</p><p> A[3]:1211 含义其中A[2]从左到右是由一个2和一个1组成 即1211</p><p> 表示A[2]从左到右连续出现了一次2又连续出现了一次1</p><p> A[4]:111221  含义A[3]&#x3D;1211 从左到右是由一个1和一个2两个1 即111221</p><p> 表示A[3]从左到右连续出现了一次1又连续出现了一次2又连续出现了2次1</p></blockquote><p>我的题解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">A</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">       Map&lt;Integer, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">       map.put(<span class="number">0</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">       map.put(<span class="number">1</span>,<span class="string">&quot;11&quot;</span>);</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">2</span>; j &lt;= n; j++) &#123;</span><br><span class="line">           <span class="type">char</span>[] chars = map.get(j-<span class="number">1</span>).toCharArray();</span><br><span class="line">           <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">           <span class="type">String</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">           <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">               <span class="keyword">if</span> (i==chars.length-<span class="number">1</span> &amp;&amp; chars[i] == chars[i-<span class="number">1</span>])&#123;</span><br><span class="line">                   num++;</span><br><span class="line">                   temp = temp + num + chars[i-<span class="number">1</span>];</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               &#125;<span class="keyword">else</span> <span class="keyword">if</span> (chars[i] == chars[i-<span class="number">1</span>])&#123;</span><br><span class="line">                   num++;</span><br><span class="line">                   <span class="keyword">continue</span>;</span><br><span class="line">               &#125;<span class="keyword">else</span> <span class="keyword">if</span> (i==chars.length-<span class="number">1</span> &amp;&amp; chars[i] != chars[i-<span class="number">1</span>])&#123;</span><br><span class="line">                   temp = temp + num + chars[i-<span class="number">1</span>];</span><br><span class="line">                   num=<span class="number">1</span>;</span><br><span class="line">                   temp = temp + num + chars[i];</span><br><span class="line">               &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                   temp = temp + num + chars[i-<span class="number">1</span>];</span><br><span class="line">                   num=<span class="number">1</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           map.put(j,temp);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> map.get(n);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><hr><p>看完力扣原题题解后，发现使用<code>StringBuilder </code>代替<code>String</code>进行拼接时，效率可以提高很多，两者区别可以看这一篇</p><p><a href="https://daijing.online/Java_1_String-StringBuffer%E5%92%8CStringBuilder/">String、StringBuffer和StringBuilder的区别 – 与或非’s blog – 个人分享、记录、成长 (daijing.online)</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">countAndSay</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">Map&lt;Integer, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">       map.put(<span class="number">0</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">       map.put(<span class="number">1</span>,<span class="string">&quot;11&quot;</span>);</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">2</span>; j &lt;= n; j++) &#123;</span><br><span class="line">           <span class="type">char</span>[] chars = map.get(j-<span class="number">1</span>).toCharArray();</span><br><span class="line">           <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">           <span class="type">StringBuilder</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">           <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">               <span class="keyword">if</span> (i==chars.length-<span class="number">1</span> &amp;&amp; chars[i] == chars[i-<span class="number">1</span>])&#123;</span><br><span class="line">                   num++;</span><br><span class="line">                   temp.append(num).append(chars[i-<span class="number">1</span>]);</span><br><span class="line">                  <span class="comment">// temp = temp + num + chars[i-1];</span></span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               &#125;<span class="keyword">else</span> <span class="keyword">if</span> (chars[i] == chars[i-<span class="number">1</span>])&#123;</span><br><span class="line">                   num++;</span><br><span class="line">                   <span class="keyword">continue</span>;</span><br><span class="line">               &#125;<span class="keyword">else</span> <span class="keyword">if</span> (i==chars.length-<span class="number">1</span> &amp;&amp; chars[i] != chars[i-<span class="number">1</span>])&#123;</span><br><span class="line">                   temp.append(num).append(chars[i-<span class="number">1</span>]);</span><br><span class="line">                   <span class="comment">//temp = temp + num + chars[i-1];</span></span><br><span class="line">                   num=<span class="number">1</span>;</span><br><span class="line">                   temp.append(num).append(chars[i]);</span><br><span class="line">                   <span class="comment">//temp = temp + num + chars[i];</span></span><br><span class="line">               &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                   temp.append(num).append(chars[i-<span class="number">1</span>]);</span><br><span class="line">                  <span class="comment">// temp = temp + num + chars[i-1];</span></span><br><span class="line">                   num=<span class="number">1</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           map.put(j,temp.toString());</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> map.get(n);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>另外还有偷懒解法，就是直接打表，执行效率最高</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Interview </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打开新标签页</title>
      <link href="/2021/12/17/HTML_1_OpenNewTab/"/>
      <url>/2021/12/17/HTML_1_OpenNewTab/</url>
      
        <content type="html"><![CDATA[<p>打开新标签页需配置&lt;a&gt;标签target属性为<code>_blank</code>。</p><ul><li>_parent：在父窗口中打开链接。</li><li>_self：默认，当前页面跳转。</li><li>_top：在当前窗体打开链接，并替换当前的整个窗体(框架页)。</li><li>_blank：新窗口打开。</li></ul><span id="more"></span><p>打开新标签页：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.xxx.com/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>访问xxx!<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML常用转义字符</title>
      <link href="/2021/12/17/HTML_2_CommonEscape/"/>
      <url>/2021/12/17/HTML_2_CommonEscape/</url>
      
        <content type="html"><![CDATA[<p>实体名称易理解，但不一定支持所有浏览器；</p><p>实体(Entity)编号，各种浏览器都能处理。</p><span id="more"></span><p><img src="https://gitee.com/andornot888/andornot_images/raw/master//imgs/HTML%E5%B8%B8%E7%94%A8%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6.png" alt="image-20211217224643782"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>exists和in的区别</title>
      <link href="/2021/12/17/MySQL_1_ExistsAndIn/"/>
      <url>/2021/12/17/MySQL_1_ExistsAndIn/</url>
      
        <content type="html"><![CDATA[<p>in是把外表和内表作hash连接，而exists是对外表作loop循环，每次loop循环再对内表进行查询，一直以来认为exists比in效率高的说法是不准确的。</p><span id="more"></span><h2 id="1、in和exists"><a href="#1、in和exists" class="headerlink" title="1、in和exists"></a>1、in和exists</h2><p>　外表大，用IN；内表大，用EXISTS；</p><p>　　原理：</p><p>　　用in：外表使用了索引，直接作hash连接；</p><p>　　用exists：内表使用了索引，外表作loop循环再进行匹配；</p><p>例如：表A(小表)，表B(大表)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> A <span class="keyword">where</span> cc <span class="keyword">in</span>(<span class="keyword">select</span> cc <span class="keyword">from</span> B)　　<span class="comment">--&gt;效率低，用到了A表上cc列的索引；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> A <span class="keyword">where</span> <span class="keyword">exists</span>(<span class="keyword">select</span> cc <span class="keyword">from</span> B <span class="keyword">where</span> cc<span class="operator">=</span>A.cc)　　<span class="comment">--&gt;效率高，用到了B表上cc列的索引。</span></span><br></pre></td></tr></table></figure><p>相反的：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> B <span class="keyword">where</span> cc <span class="keyword">in</span>(<span class="keyword">select</span> cc <span class="keyword">from</span> A)　　<span class="comment">--&gt;效率高，用到了B表上cc列的索引</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> B <span class="keyword">where</span> <span class="keyword">exists</span>(<span class="keyword">select</span> cc <span class="keyword">from</span> A <span class="keyword">where</span> cc<span class="operator">=</span>B.cc)　　<span class="comment">--&gt;效率低，用到了A表上cc列的索引。</span></span><br></pre></td></tr></table></figure><h2 id="2、not-in-和not-exists"><a href="#2、not-in-和not-exists" class="headerlink" title="2、not in 和not exists"></a>2、not in 和not exists</h2><p>　性能：not in不走索引，所以一般都用not exists；</p><p>​    区别：还有一点区别就是，not in字段为null的不进行筛选出来；而使用not exists即可；</p><p>　这也就是说有时定义字段，用not null比较好了，这样也能避免not in查询出错。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> #t1(c1 <span class="type">int</span>,c2 <span class="type">int</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> #t2(c1 <span class="type">int</span>,c2 <span class="type">int</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> #t1 <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> #t1 <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> #t2 <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> #t2 <span class="keyword">values</span>(<span class="number">1</span>,<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> #t1 <span class="keyword">where</span> c2 <span class="keyword">not</span> <span class="keyword">in</span>(<span class="keyword">select</span> c2 <span class="keyword">from</span> #t2);　　<span class="comment">--&gt;执行结果：无</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> #t1 <span class="keyword">where</span> <span class="keyword">not</span> <span class="keyword">exists</span>(<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> #t2 <span class="keyword">where</span> #t2.c2<span class="operator">=</span>#t1.c2)　　<span class="comment">--&gt;执行结果：1　　3</span></span><br></pre></td></tr></table></figure><p>如果查询语句使用了not in，那么对内外表都进行全表扫描，没有用到索引；而not exists的子查询依然能用到表上的索引。所以无论哪个表大，用not exists都比not in 要快。</p><h2 id="3、in-与-x3D-的区别"><a href="#3、in-与-x3D-的区别" class="headerlink" title="3、in 与 &#x3D; 的区别"></a>3、in 与 &#x3D; 的区别</h2><p><code>select name from student where name in(&#39;zhang&#39;,&#39;wang&#39;,&#39;zhao&#39;);</code><br>与</p><p><code>select name from student where name=&#39;zhang&#39; or name=&#39;wang&#39; or name=&#39;zhao&#39;</code><br>的结果是相同的。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>prop() 和 attr() 的区别</title>
      <link href="/2021/10/28/jQuery_1_prop()%20%E5%92%8C%20attr()%20%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2021/10/28/jQuery_1_prop()%20%E5%92%8C%20attr()%20%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>attr和prop分别是单词attribute和property的缩写，并且它们均表示”属性”的意思。</p><p>不过，在jQuery中，attribute和property却是两个不同的概念。attribute表示HTML文档节点的属性，property表示JS对象的属性。</p><span id="more"></span><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这里的id、class、data_id均是该元素文档节点的attribute --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;message&quot;</span> <span class="attr">class</span>=<span class="string">&quot;test&quot;</span> <span class="attr">data_id</span>=<span class="string">&quot;123&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 这里的name、age是Person的property</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> <span class="title class_">Person</span> = &#123; <span class="attr">name</span>: <span class="string">&quot;小明&quot;</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在jQuery中，prop()函数的设计目标是用于设置或获取指定DOM元素(指的是JS对象，Element类型)上的属性(property)；attr()函数的设计目标是用于设置或获取指定DOM元素所对应的文档节点上的属性(attribute)。</p><p>此外，对于表单元素的checked、selected、disabled等属性，在jQuery 1.6之前，attr()获取这些属性的返回值为Boolean类型：如果被选中(或禁用)就返回true，否则返回false。</p><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>attr(name,[value])</td><td>获得&#x2F;设置属性的值</td></tr><tr><td>prop(name,[value])</td><td>获得&#x2F;设置属性的值（checked、selected、disabled）</td></tr></tbody></table><ul><li>prop专门用于操作单选框，复选框，下拉列表</li></ul><p>但是从1.6开始，使用attr()获取这些属性的返回值为String类型，如果被选中(或禁用)就返回checked、selected或disabled，否则(即元素节点没有该属性)返回undefined。并且，在某些版本中，这些属性值表示文档加载时的初始状态值，即使之后更改了这些元素的选中(或禁用)状态，对应的属性值也不会发生改变。</p><p>因为jQuery认为：attribute的checked、selected、disabled就是表示该属性初始状态的值，property的checked、selected、disabled才表示该属性实时状态的值(值为true或false)。</p><p>因此，在jQuery 1.6及以后版本中，请使用prop()函数来设置或获取checked、selected、disabled等属性。对于其它能够用prop()实现的操作，也尽量使用prop()函数。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// $(&#x27;button&#x27;).on(&#x27;click&#x27;,function()&#123;</span></span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// var r = $(&#x27;input&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">11</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> ($(<span class="string">&#x27;input&#x27;</span>).<span class="title function_">prop</span>(<span class="string">&#x27;checked&#x27;</span>)) &#123;</span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;input&#x27;</span>).<span class="title function_">prop</span>(<span class="string">&#x27;checked&#x27;</span>,<span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;input&#x27;</span>).<span class="title function_">prop</span>(<span class="string">&#x27;checked&#x27;</span>,<span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对象、数组、集合工具类</title>
      <link href="/2021/03/19/Spring_%E5%AF%B9%E8%B1%A1%E3%80%81%E6%95%B0%E7%BB%84%E3%80%81%E9%9B%86%E5%90%88%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
      <url>/2021/03/19/Spring_%E5%AF%B9%E8%B1%A1%E3%80%81%E6%95%B0%E7%BB%84%E3%80%81%E9%9B%86%E5%90%88%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h3 id="ObjectUtils"><a href="#ObjectUtils" class="headerlink" title="ObjectUtils"></a>ObjectUtils</h3><h4 id="1-获取对象的基本信息"><a href="#1-获取对象的基本信息" class="headerlink" title="1.获取对象的基本信息"></a>1.获取对象的基本信息</h4><span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取对象的类名。参数为 null 时，返回字符串：&quot;null&quot; </span></span><br><span class="line">String <span class="title function_">nullSafeClassName</span><span class="params">(Object obj)</span></span><br><span class="line"><span class="comment">// 参数为 null 时，返回 0</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">nullSafeHashCode</span><span class="params">(Object object)</span></span><br><span class="line"><span class="comment">// 参数为 null 时，返回字符串：&quot;null&quot;</span></span><br><span class="line">String <span class="title function_">nullSafeToString</span><span class="params">(<span class="type">boolean</span>[] array)</span></span><br><span class="line"><span class="comment">// 获取对象 HashCode（十六进制形式字符串）。参数为 null 时，返回 0 </span></span><br><span class="line">String <span class="title function_">getIdentityHexString</span><span class="params">(Object obj)</span></span><br><span class="line"><span class="comment">// 获取对象的类名和 HashCode。 参数为 null 时，返回字符串：&quot;&quot; </span></span><br><span class="line">String <span class="title function_">identityToString</span><span class="params">(Object obj)</span></span><br><span class="line"><span class="comment">// 相当于 toString()方法，但参数为 null 时，返回字符串：&quot;&quot;</span></span><br><span class="line">String <span class="title function_">getDisplayString</span><span class="params">(Object obj)</span></span><br></pre></td></tr></table></figure><h4 id="2-判断工具"><a href="#2-判断工具" class="headerlink" title="2.判断工具"></a>2.判断工具</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断数组是否为空</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">(Object[] array)</span></span><br><span class="line"><span class="comment">// 判断参数对象是否是数组</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isArray</span><span class="params">(Object obj)</span></span><br><span class="line"><span class="comment">// 判断数组中是否包含指定元素</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">containsElement</span><span class="params">(Object[] array, Object element)</span></span><br><span class="line"><span class="comment">// 相等，或同为 null时，返回 true</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">nullSafeEquals</span><span class="params">(Object o1, Object o2)</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">判断参数对象是否为空，判断标准为：</span></span><br><span class="line"><span class="comment">    Optional: Optional.empty()</span></span><br><span class="line"><span class="comment">       Array: length == 0</span></span><br><span class="line"><span class="comment">CharSequence: length == 0</span></span><br><span class="line"><span class="comment">  Collection: Collection.isEmpty()</span></span><br><span class="line"><span class="comment">         Map: Map.isEmpty()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">(Object obj)</span></span><br></pre></td></tr></table></figure><h4 id="3-其他工具方法"><a href="#3-其他工具方法" class="headerlink" title="3.其他工具方法"></a>3.其他工具方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 向参数数组的末尾追加新元素，并返回一个新数组</span></span><br><span class="line">&lt;A, O <span class="keyword">extends</span> <span class="title class_">A</span>&gt; A[] addObjectToArray(A[] array, O obj)</span><br><span class="line"><span class="comment">// 原生基础类型数组 --&gt; 包装类数组</span></span><br><span class="line">Object[] toObjectArray(Object source)</span><br></pre></td></tr></table></figure><h3 id="StringUtils"><a href="#StringUtils" class="headerlink" title="StringUtils"></a>StringUtils</h3><h4 id="1-字符串判断工具"><a href="#1-字符串判断工具" class="headerlink" title="1.字符串判断工具"></a>1.字符串判断工具</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断字符串是否为 null，或 &quot;&quot;。注意，包含空白符的字符串为非空</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">(Object str)</span></span><br><span class="line"><span class="comment">// 判断字符串是否是以指定内容结束。忽略大小写</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">endsWithIgnoreCase</span><span class="params">(String str, String suffix)</span></span><br><span class="line"><span class="comment">// 判断字符串是否已指定内容开头。忽略大小写</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">startsWithIgnoreCase</span><span class="params">(String str, String prefix)</span> </span><br><span class="line"><span class="comment">// 是否包含空白符</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">containsWhitespace</span><span class="params">(String str)</span></span><br><span class="line"><span class="comment">// 判断字符串非空且长度不为 0，即，Not Empty</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">hasLength</span><span class="params">(CharSequence str)</span></span><br><span class="line"><span class="comment">// 判断字符串是否包含实际内容，即非仅包含空白符，也就是 Not Blank</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">hasText</span><span class="params">(CharSequence str)</span></span><br><span class="line"><span class="comment">// 判断字符串指定索引处是否包含一个子串。</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">substringMatch</span><span class="params">(CharSequence str, <span class="type">int</span> index, CharSequence substring)</span></span><br><span class="line"><span class="comment">// 计算一个字符串中指定子串的出现次数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">countOccurrencesOf</span><span class="params">(String str, String sub)</span></span><br></pre></td></tr></table></figure><h4 id="2-字符串操作工具"><a href="#2-字符串操作工具" class="headerlink" title="2.字符串操作工具"></a>2.字符串操作工具</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查找并替换指定子串</span></span><br><span class="line">String <span class="title function_">replace</span><span class="params">(String inString, String oldPattern, String newPattern)</span></span><br><span class="line"><span class="comment">// 去除尾部的特定字符</span></span><br><span class="line">String <span class="title function_">trimTrailingCharacter</span><span class="params">(String str, <span class="type">char</span> trailingCharacter)</span> </span><br><span class="line"><span class="comment">// 去除头部的特定字符</span></span><br><span class="line">String <span class="title function_">trimLeadingCharacter</span><span class="params">(String str, <span class="type">char</span> leadingCharacter)</span></span><br><span class="line"><span class="comment">// 去除头部的空白符</span></span><br><span class="line">String <span class="title function_">trimLeadingWhitespace</span><span class="params">(String str)</span></span><br><span class="line"><span class="comment">// 去除头部的空白符</span></span><br><span class="line">String <span class="title function_">trimTrailingWhitespace</span><span class="params">(String str)</span></span><br><span class="line"><span class="comment">// 去除头部和尾部的空白符</span></span><br><span class="line">String <span class="title function_">trimWhitespace</span><span class="params">(String str)</span></span><br><span class="line"><span class="comment">// 删除开头、结尾和中间的空白符</span></span><br><span class="line">String <span class="title function_">trimAllWhitespace</span><span class="params">(String str)</span></span><br><span class="line"><span class="comment">// 删除指定子串</span></span><br><span class="line">String <span class="title function_">delete</span><span class="params">(String inString, String pattern)</span></span><br><span class="line"><span class="comment">// 删除指定字符（可以是多个）</span></span><br><span class="line">String <span class="title function_">deleteAny</span><span class="params">(String inString, String charsToDelete)</span></span><br><span class="line"><span class="comment">// 对数组的每一项执行 trim() 方法</span></span><br><span class="line">String[] trimArrayElements(String[] array)</span><br><span class="line"><span class="comment">// 将 URL 字符串进行解码</span></span><br><span class="line">String <span class="title function_">uriDecode</span><span class="params">(String source, Charset charset)</span></span><br></pre></td></tr></table></figure><h4 id="3-路径相关工具方法"><a href="#3-路径相关工具方法" class="headerlink" title="3.路径相关工具方法"></a>3.路径相关工具方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解析路径字符串，优化其中的 “..” </span></span><br><span class="line">String <span class="title function_">cleanPath</span><span class="params">(String path)</span></span><br><span class="line"><span class="comment">// 解析路径字符串，解析出文件名部分</span></span><br><span class="line">String <span class="title function_">getFilename</span><span class="params">(String path)</span></span><br><span class="line"><span class="comment">// 解析路径字符串，解析出文件后缀名</span></span><br><span class="line">String <span class="title function_">getFilenameExtension</span><span class="params">(String path)</span></span><br><span class="line"><span class="comment">// 比较两个两个字符串，判断是否是同一个路径。会自动处理路径中的 “..” </span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">pathEquals</span><span class="params">(String path1, String path2)</span></span><br><span class="line"><span class="comment">// 删除文件路径名中的后缀部分</span></span><br><span class="line">String <span class="title function_">stripFilenameExtension</span><span class="params">(String path)</span> </span><br><span class="line"><span class="comment">// 以 “. 作为分隔符，获取其最后一部分</span></span><br><span class="line">String <span class="title function_">unqualify</span><span class="params">(String qualifiedName)</span></span><br><span class="line"><span class="comment">// 以指定字符作为分隔符，获取其最后一部分</span></span><br><span class="line">String <span class="title function_">unqualify</span><span class="params">(String qualifiedName, <span class="type">char</span> separator)</span></span><br></pre></td></tr></table></figure><h3 id="CollectionUtils"><a href="#CollectionUtils" class="headerlink" title="CollectionUtils"></a>CollectionUtils</h3><h4 id="1-集合判断工具"><a href="#1-集合判断工具" class="headerlink" title="1.集合判断工具"></a>1.集合判断工具</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断 List/Set 是否为空</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">(Collection&lt;?&gt; collection)</span></span><br><span class="line"><span class="comment">// 判断 Map 是否为空</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">(Map&lt;?,?&gt; map)</span></span><br><span class="line"><span class="comment">// 判断 List/Set 中是否包含某个对象</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">containsInstance</span><span class="params">(Collection&lt;?&gt; collection, Object element)</span></span><br><span class="line"><span class="comment">// 以迭代器的方式，判断 List/Set 中是否包含某个对象</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Iterator&lt;?&gt; iterator, Object element)</span></span><br><span class="line"><span class="comment">// 判断 List/Set 是否包含某些对象中的任意一个</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">containsAny</span><span class="params">(Collection&lt;?&gt; source, Collection&lt;?&gt; candidates)</span></span><br><span class="line"><span class="comment">// 判断 List/Set 中的每个元素是否唯一。即 List/Set 中不存在重复元素</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">hasUniqueObject</span><span class="params">(Collection&lt;?&gt; collection)</span></span><br></pre></td></tr></table></figure><h4 id="2-集合操作工具"><a href="#2-集合操作工具" class="headerlink" title="2.集合操作工具"></a>2.集合操作工具</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将 Array 中的元素都添加到 List/Set 中</span></span><br><span class="line">&lt;E&gt; <span class="keyword">void</span> <span class="title function_">mergeArrayIntoCollection</span><span class="params">(Object array, Collection&lt;E&gt; collection)</span>  </span><br><span class="line"><span class="comment">// 将 Properties 中的键值对都添加到 Map 中</span></span><br><span class="line">&lt;K,V&gt; <span class="keyword">void</span> <span class="title function_">mergePropertiesIntoMap</span><span class="params">(Properties props, Map&lt;K,V&gt; map)</span></span><br><span class="line"><span class="comment">// 返回 List 中最后一个元素</span></span><br><span class="line">&lt;T&gt; T <span class="title function_">lastElement</span><span class="params">(List&lt;T&gt; list)</span>  </span><br><span class="line"><span class="comment">// 返回 Set 中最后一个元素</span></span><br><span class="line">&lt;T&gt; T <span class="title function_">lastElement</span><span class="params">(Set&lt;T&gt; set)</span> </span><br><span class="line"><span class="comment">// 返回参数 candidates 中第一个存在于参数 source 中的元素</span></span><br><span class="line">&lt;E&gt; E <span class="title function_">findFirstMatch</span><span class="params">(Collection&lt;?&gt; source, Collection&lt;E&gt; candidates)</span></span><br><span class="line"><span class="comment">// 返回 List/Set 中指定类型的元素。</span></span><br><span class="line">&lt;T&gt; T <span class="title function_">findValueOfType</span><span class="params">(Collection&lt;?&gt; collection, Class&lt;T&gt; type)</span></span><br><span class="line"><span class="comment">// 返回 List/Set 中指定类型的元素。如果第一种类型未找到，则查找第二种类型，以此类推</span></span><br><span class="line">Object <span class="title function_">findValueOfType</span><span class="params">(Collection&lt;?&gt; collection, Class&lt;?&gt;[] types)</span></span><br><span class="line"><span class="comment">// 返回 List/Set 中元素的类型</span></span><br><span class="line">Class&lt;?&gt; findCommonElementType(Collection&lt;?&gt; collection)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> API </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反射、AOP工具类</title>
      <link href="/2021/03/11/Spring_%E5%8F%8D%E5%B0%84%E3%80%81AOP%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
      <url>/2021/03/11/Spring_%E5%8F%8D%E5%B0%84%E3%80%81AOP%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h3 id="ReflectionUtils"><a href="#ReflectionUtils" class="headerlink" title="ReflectionUtils"></a>ReflectionUtils</h3><h4 id="1-获取方法"><a href="#1-获取方法" class="headerlink" title="1.获取方法"></a>1.获取方法</h4><span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在类中查找指定方法</span></span><br><span class="line">Method <span class="title function_">findMethod</span><span class="params">(Class&lt;?&gt; clazz, String name)</span> </span><br><span class="line"><span class="comment">// 同上，额外提供方法参数类型作查找条件</span></span><br><span class="line">Method <span class="title function_">findMethod</span><span class="params">(Class&lt;?&gt; clazz, String name, Class&lt;?&gt;... paramTypes)</span> </span><br><span class="line"><span class="comment">// 获得类中所有方法，包括继承而来的</span></span><br><span class="line">Method[] getAllDeclaredMethods(Class&lt;?&gt; leafClass) </span><br><span class="line"><span class="comment">// 在类中查找指定构造方法</span></span><br><span class="line">Constructor&lt;T&gt; <span class="title function_">accessibleConstructor</span><span class="params">(Class&lt;T&gt; clazz, Class&lt;?&gt;... parameterTypes)</span> </span><br><span class="line"><span class="comment">// 是否是 equals() 方法</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isEqualsMethod</span><span class="params">(Method method)</span> </span><br><span class="line"><span class="comment">// 是否是 hashCode() 方法 </span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isHashCodeMethod</span><span class="params">(Method method)</span> </span><br><span class="line"><span class="comment">// 是否是 toString() 方法</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isToStringMethod</span><span class="params">(Method method)</span> </span><br><span class="line"><span class="comment">// 是否是从 Object 类继承而来的方法</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isObjectMethod</span><span class="params">(Method method)</span> </span><br><span class="line"><span class="comment">// 检查一个方法是否声明抛出指定异常</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">declaresException</span><span class="params">(Method method, Class&lt;?&gt; exceptionType)</span> </span><br></pre></td></tr></table></figure><h4 id="2-执行方法"><a href="#2-执行方法" class="headerlink" title="2.执行方法"></a>2.执行方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 执行方法</span></span><br><span class="line">Object <span class="title function_">invokeMethod</span><span class="params">(Method method, Object target)</span>  </span><br><span class="line"><span class="comment">// 同上，提供方法参数</span></span><br><span class="line">Object <span class="title function_">invokeMethod</span><span class="params">(Method method, Object target, Object... args)</span> </span><br><span class="line"><span class="comment">// 取消 Java 权限检查。以便后续执行该私有方法</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">makeAccessible</span><span class="params">(Method method)</span> </span><br><span class="line"><span class="comment">// 取消 Java 权限检查。以便后续执行私有构造方法</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">makeAccessible</span><span class="params">(Constructor&lt;?&gt; ctor)</span> </span><br></pre></td></tr></table></figure><h4 id="3-获取字段"><a href="#3-获取字段" class="headerlink" title="3.获取字段"></a>3.获取字段</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在类中查找指定属性</span></span><br><span class="line">Field <span class="title function_">findField</span><span class="params">(Class&lt;?&gt; clazz, String name)</span> </span><br><span class="line"><span class="comment">// 同上，多提供了属性的类型</span></span><br><span class="line">Field <span class="title function_">findField</span><span class="params">(Class&lt;?&gt; clazz, String name, Class&lt;?&gt; type)</span> </span><br><span class="line"><span class="comment">// 是否为一个 &quot;public static final&quot; 属性</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isPublicStaticFinal</span><span class="params">(Field field)</span> </span><br></pre></td></tr></table></figure><h4 id="4-设置字段"><a href="#4-设置字段" class="headerlink" title="4.设置字段"></a>4.设置字段</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取 target 对象的 field 属性值</span></span><br><span class="line">Object <span class="title function_">getField</span><span class="params">(Field field, Object target)</span> </span><br><span class="line"><span class="comment">// 设置 target 对象的 field 属性值，值为 value</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setField</span><span class="params">(Field field, Object target, Object value)</span> </span><br><span class="line"><span class="comment">// 同类对象属性对等赋值</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">shallowCopyFieldState</span><span class="params">(Object src, Object dest)</span></span><br><span class="line"><span class="comment">// 取消 Java 的权限控制检查。以便后续读写该私有属性</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">makeAccessible</span><span class="params">(Field field)</span> </span><br><span class="line"><span class="comment">// 对类的每个属性执行 callback</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">doWithFields</span><span class="params">(Class&lt;?&gt; clazz, ReflectionUtils.FieldCallback fc)</span> </span><br><span class="line"><span class="comment">// 同上，多了个属性过滤功能。</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">doWithFields</span><span class="params">(Class&lt;?&gt; clazz, ReflectionUtils.FieldCallback fc, </span></span><br><span class="line"><span class="params">                  ReflectionUtils.FieldFilter ff)</span> </span><br><span class="line"><span class="comment">// 同上，但不包括继承而来的属性</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">doWithLocalFields</span><span class="params">(Class&lt;?&gt; clazz, ReflectionUtils.FieldCallback fc)</span> </span><br></pre></td></tr></table></figure><h3 id="AopUtils"><a href="#AopUtils" class="headerlink" title="AopUtils"></a>AopUtils</h3><h4 id="1-判断代理类型"><a href="#1-判断代理类型" class="headerlink" title="1.判断代理类型"></a>1.判断代理类型</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断是不是 Spring 代理对象</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isAopProxy</span><span class="params">()</span></span><br><span class="line"><span class="comment">// 判断是不是 jdk 动态代理对象</span></span><br><span class="line">isJdkDynamicProxy()</span><br><span class="line"><span class="comment">// 判断是不是 CGLIB 代理对象</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isCglibProxy</span><span class="params">()</span></span><br></pre></td></tr></table></figure><h4 id="2-获取被代理对象的-class"><a href="#2-获取被代理对象的-class" class="headerlink" title="2.获取被代理对象的 class"></a>2.获取被代理对象的 class</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取被代理的目标 class</span></span><br><span class="line">Class&lt;?&gt; getTargetClass()</span><br></pre></td></tr></table></figure><h3 id="AopContext"><a href="#AopContext" class="headerlink" title="AopContext"></a>AopContext</h3><h4 id="1-获取当前对象的代理对象"><a href="#1-获取当前对象的代理对象" class="headerlink" title="1.获取当前对象的代理对象"></a>1.获取当前对象的代理对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object <span class="title function_">currentProxy</span><span class="params">()</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> API </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>断言工具类</title>
      <link href="/2021/03/06/Spring_%E6%96%AD%E8%A8%80%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
      <url>/2021/03/06/Spring_%E6%96%AD%E8%A8%80%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<ol><li><p>断言是一个逻辑判断，用于检查不应该发生的情况</p></li><li><p>Assert 关键字在 JDK1.4 中引入，可通过 JVM 参数<code>-enableassertions</code>开启</p></li><li><p>SpringBoot 中提供了 Assert 断言工具类，通常用于数据合法性检查</p></li></ol><span id="more"></span>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 要求参数 object 必须为非空（Not Null），否则抛出异常，不予放行</span></span><br><span class="line"><span class="comment">// 参数 message 参数用于定制异常信息。</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">notNull</span><span class="params">(Object object, String message)</span></span><br><span class="line"><span class="comment">// 要求参数必须空（Null），否则抛出异常，不予『放行』。</span></span><br><span class="line"><span class="comment">// 和 notNull() 方法断言规则相反</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">isNull</span><span class="params">(Object object, String message)</span></span><br><span class="line"><span class="comment">// 要求参数必须为真（True），否则抛出异常，不予『放行』。</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">isTrue</span><span class="params">(<span class="type">boolean</span> expression, String message)</span></span><br><span class="line"><span class="comment">// 要求参数（List/Set）必须非空（Not Empty），否则抛出异常，不予放行</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">notEmpty</span><span class="params">(Collection collection, String message)</span></span><br><span class="line"><span class="comment">// 要求参数（String）必须有长度（即，Not Empty），否则抛出异常，不予放行</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">hasLength</span><span class="params">(String text, String message)</span></span><br><span class="line"><span class="comment">// 要求参数（String）必须有内容（即，Not Blank），否则抛出异常，不予放行</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">hasText</span><span class="params">(String text, String message)</span></span><br><span class="line"><span class="comment">// 要求参数是指定类型的实例，否则抛出异常，不予放行</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">isInstanceOf</span><span class="params">(Class type, Object obj, String message)</span></span><br><span class="line"><span class="comment">// 要求参数 `subType` 必须是参数 superType 的子类或实现类，否则抛出异常，不予放行</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">isAssignable</span><span class="params">(Class superType, Class subType, String message)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> API </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件、资源、IO 流工具类</title>
      <link href="/2021/02/18/Spring_%E6%96%87%E4%BB%B6%E3%80%81%E8%B5%84%E6%BA%90%E3%80%81IO%20%E6%B5%81%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
      <url>/2021/02/18/Spring_%E6%96%87%E4%BB%B6%E3%80%81%E8%B5%84%E6%BA%90%E3%80%81IO%20%E6%B5%81%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h3 id="FileCopyUtils"><a href="#FileCopyUtils" class="headerlink" title="FileCopyUtils"></a>FileCopyUtils</h3><h4 id="1-输入"><a href="#1-输入" class="headerlink" title="1.输入"></a>1.输入</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从文件中读入到字节数组中</span></span><br><span class="line"><span class="type">byte</span>[] copyToByteArray(File in)</span><br><span class="line"><span class="comment">// 从输入流中读入到字节数组中</span></span><br><span class="line"><span class="type">byte</span>[] copyToByteArray(InputStream in)</span><br><span class="line"><span class="comment">// 从输入流中读入到字符串中</span></span><br><span class="line">String <span class="title function_">copyToString</span><span class="params">(Reader in)</span></span><br></pre></td></tr></table></figure><span id="more"></span><h4 id="2-输出"><a href="#2-输出" class="headerlink" title="2.输出"></a>2.输出</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从字节数组到文件</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">copy</span><span class="params">(<span class="type">byte</span>[] in, File out)</span></span><br><span class="line"><span class="comment">// 从文件到文件</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">copy</span><span class="params">(File in, File out)</span></span><br><span class="line"><span class="comment">// 从字节数组到输出流</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">copy</span><span class="params">(<span class="type">byte</span>[] in, OutputStream out)</span> </span><br><span class="line"><span class="comment">// 从输入流到输出流</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">copy</span><span class="params">(InputStream in, OutputStream out)</span> </span><br><span class="line"><span class="comment">// 从输入流到输出流</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">copy</span><span class="params">(Reader in, Writer out)</span></span><br><span class="line"><span class="comment">// 从字符串到输出流</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">copy</span><span class="params">(String in, Writer out)</span></span><br></pre></td></tr></table></figure><h3 id="ResourceUtils"><a href="#ResourceUtils" class="headerlink" title="ResourceUtils"></a>ResourceUtils</h3><h4 id="1-从资源路径获取文件"><a href="#1-从资源路径获取文件" class="headerlink" title="1.从资源路径获取文件"></a>1.从资源路径获取文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断字符串是否是一个合法的 URL 字符串。</span></span><br><span class="line"><span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isUrl</span><span class="params">(String resourceLocation)</span></span><br><span class="line"><span class="comment">// 获取 URL</span></span><br><span class="line"><span class="keyword">static</span> URL <span class="title function_">getURL</span><span class="params">(String resourceLocation)</span> </span><br><span class="line"><span class="comment">// 获取文件（在 JAR 包内无法正常使用，需要是一个独立的文件）</span></span><br><span class="line"><span class="keyword">static</span> File <span class="title function_">getFile</span><span class="params">(String resourceLocation)</span></span><br></pre></td></tr></table></figure><h4 id="2-Resource"><a href="#2-Resource" class="headerlink" title="2.Resource"></a>2.Resource</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件系统资源 D:\...</span></span><br><span class="line">FileSystemResource</span><br><span class="line"><span class="comment">// URL 资源，如 file://... http://...</span></span><br><span class="line">UrlResource</span><br><span class="line"><span class="comment">// 类路径下的资源，classpth:...</span></span><br><span class="line">ClassPathResource</span><br><span class="line"><span class="comment">// Web 容器上下文中的资源（jar 包、war 包）</span></span><br><span class="line">ServletContextResource</span><br><span class="line"><span class="comment">// 判断资源是否存在</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">exists</span><span class="params">()</span></span><br><span class="line"><span class="comment">// 从资源中获得 File 对象</span></span><br><span class="line">File <span class="title function_">getFile</span><span class="params">()</span></span><br><span class="line"><span class="comment">// 从资源中获得 URI 对象</span></span><br><span class="line">URI <span class="title function_">getURI</span><span class="params">()</span></span><br><span class="line"><span class="comment">// 从资源中获得 URI 对象</span></span><br><span class="line">URL <span class="title function_">getURL</span><span class="params">()</span></span><br><span class="line"><span class="comment">// 获得资源的 InputStream</span></span><br><span class="line">InputStream <span class="title function_">getInputStream</span><span class="params">()</span></span><br><span class="line"><span class="comment">// 获得资源的描述信息</span></span><br><span class="line">String <span class="title function_">getDescription</span><span class="params">()</span></span><br></pre></td></tr></table></figure><h3 id="StreamUtils"><a href="#StreamUtils" class="headerlink" title="StreamUtils"></a>StreamUtils</h3><h4 id="1-输入-1"><a href="#1-输入-1" class="headerlink" title="1.输入"></a>1.输入</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">copy</span><span class="params">(<span class="type">byte</span>[] in, OutputStream out)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">copy</span><span class="params">(InputStream in, OutputStream out)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">copy</span><span class="params">(String in, Charset charset, OutputStream out)</span></span><br><span class="line"><span class="type">long</span> <span class="title function_">copyRange</span><span class="params">(InputStream in, OutputStream out, <span class="type">long</span> start, <span class="type">long</span> end)</span></span><br></pre></td></tr></table></figure><h4 id="2-输出-1"><a href="#2-输出-1" class="headerlink" title="2.输出"></a>2.输出</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span>[] copyToByteArray(InputStream in)</span><br><span class="line">String <span class="title function_">copyToString</span><span class="params">(InputStream in, Charset charset)</span></span><br><span class="line"><span class="comment">// 舍弃输入流中的内容</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">drain</span><span class="params">(InputStream in)</span> </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> API </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>绝对路径与相对路径的区别</title>
      <link href="/2021/01/21/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86_%E7%BB%9D%E5%AF%B9%E8%B7%AF%E5%BE%84%E4%B8%8E%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2021/01/21/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86_%E7%BB%9D%E5%AF%B9%E8%B7%AF%E5%BE%84%E4%B8%8E%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h3 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h3><p>是从盘符开始的路径，形如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\windows\system32\cmd.exe</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h3><p>是从当前路径开始的路径，假如当前路径为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\windows</span><br></pre></td></tr></table></figure><p>要描述上述路径，只需输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">system32\cmd.exe</span><br></pre></td></tr></table></figure><p>实际上，严格的相对路径写法应为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\system32\cmd.exe</span><br></pre></td></tr></table></figure><p>其中，.表示当前路径，在通道情况下可以省略，只有在特殊的情况下不能省略。</p><p>假如当前路径为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\program files</span><br></pre></td></tr></table></figure><p>要调用上述命令，则需要输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">..\windows\system32\cmd.exe</span><br></pre></td></tr></table></figure><p>其中，..为父目录。</p><p>当前路径如果为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c:\program files\common files</span><br></pre></td></tr></table></figure><p>则需要输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">..\..\windows\system32\cmd.exe</span><br></pre></td></tr></table></figure><p>另外，还有一种不包含盘符的特殊绝对路径，形如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\windows\system32\cmd.exe</span><br></pre></td></tr></table></figure><p>无论当前路径是什么，会自动地从当前盘的根目录开始查找指定的程序。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>String、StringBuffer和StringBuilder的区别</title>
      <link href="/2021/01/20/Java_1_String%E3%80%81StringBuffer%E5%92%8CStringBuilder/"/>
      <url>/2021/01/20/Java_1_String%E3%80%81StringBuffer%E5%92%8CStringBuilder/</url>
      
        <content type="html"><![CDATA[<p>string、stringbuffer和stringbuilder的区别是什么？string为什么是不可变的？</p><span id="more"></span><h2 id="Answer："><a href="#Answer：" class="headerlink" title="Answer："></a>Answer：</h2><ul><li><p><code>String</code> 类中使用 final 关键字修饰字符数组来保存字符串，<code>private final char value[]</code>，所以<code>String</code> 对象是不可变的。</p><blockquote><p>补充：在 Java 9 之后，String 、<code>StringBuilder</code> 与 <code>StringBuffer</code> 的实现改用 byte 数组存储字符串 <code>private final byte[] value</code></p></blockquote><p>而 <code>StringBuilder</code> 与 <code>StringBuffer</code> 都继承自 <code>AbstractStringBuilder</code> 类，在 <code>AbstractStringBuilder</code> 中也是使用字符数组保存字符串<code>char[]value</code> 但是没有用 <code>final</code> 关键字修饰，所以这两种对象都是可变的。</p></li><li><p><code>StringBuffer</code> 对方法加了同步锁或者对调用的方法加了同步锁，所以是线程安全的。<code>StringBuilder</code> 并没有对方法进行加同步锁，所以是非线程安全的。</p></li><li><p>每次对 <code>String</code> 类型进行改变的时候，都会生成一个新的 <code>String</code> 对象，然后将指针指向新的 <code>String</code> 对象。<code>StringBuffer</code> 每次都会对 <code>StringBuffer</code> 对象本身进行操作，而不是生成新的对象并改变对象引用。相同情况下使用 <code>StringBuilder</code> 相比使用 <code>StringBuffer</code> 仅能获得 10%~15% 左右的性能提升，但却要冒多线程不安全的风险。</p></li><li><p>操作少量的数据: 适用 <code>String</code></p></li><li><p>单线程操作字符串缓冲区下操作大量数据: 适用 <code>StringBuilder</code></p></li><li><p>多线程操作字符串缓冲区下操作大量数据: 适用 <code>StringBuffer</code></p></li></ul><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><h3 id="1-String对象的两种创建方式："><a href="#1-String对象的两种创建方式：" class="headerlink" title="1.String对象的两种创建方式："></a>1.String对象的两种创建方式：</h3><blockquote><p>从概念上讲，Java字符串就是Unicode字符序列。例如，串”Java\u2122” 由5个Unicode字符J、 a、 v、 a和TM。Java没有内置的字符串类型，而是在标准Java类库中提供了一个预定义类，很自然地叫做String。每个用双引号括起来的字符串都是Strinq类的一个实例。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;abcd&quot;</span>;</span><br><span class="line">     <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abcd&quot;</span>);</span><br><span class="line">     System.out.println(str1==str2);<span class="comment">//false</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/andornot888/andornot_images/raw/master//imgs/String%E4%B8%A4%E7%A7%8D%E5%88%9B%E5%BB%BA%E6%96%B9%E5%BC%8F.png" alt="image-20210827170942332"></p><p>这两种不同的创建方法是有差别的，第一种方式是在常量池中拿对象，第二种方式是直接在堆内存空间创建一个新的对象。</p><p><strong>String 类型的常量池比较特殊。它的主要使用方法有两种：</strong></p><ul><li>直接使用双引号声明出来的 String 对象会直接存储在常量池中。</li><li>如果不是用双引号声明的 String 对象，可以使用 String 提供的 intern 方法。String.intern() 是一个 Native 方法，它的作用是：如果运行时常量池中已经包含一个等于此 String 对象内容的字符串，则返回常量池中该字符串的引用；如果没有，则在常量池中创建与此 String 内容相同的字符串，并返回常量池中创建的字符串的引用。</li></ul><p>String.intern()方法主要适用于程序中需要保存有限个会被反复使用的值的场景，这样可以减少内存消耗，同时在进行比较操作时减少时耗，提高程序性能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;计算机&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> s1.intern();</span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="string">&quot;计算机&quot;</span>;</span><br><span class="line">System.out.println(s2);<span class="comment">//计算机</span></span><br><span class="line">System.out.println(s1 == s2);<span class="comment">//false，因为一个是堆内存中的String对象一个是常量池中的String对象，</span></span><br><span class="line">System.out.println(s3 == s2);<span class="comment">//true，因为两个都是常量池中的String对象</span></span><br></pre></td></tr></table></figure><h3 id="2-String-字符串拼接"><a href="#2-String-字符串拼接" class="headerlink" title="2.String 字符串拼接"></a>2.String 字符串拼接</h3><p>如果一个String类型和一个非String类型进行拼接，String类型在前</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">ans</span> <span class="operator">=</span> s + num;</span><br></pre></td></tr></table></figure><p>面试题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;str&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;ing&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> <span class="string">&quot;str&quot;</span> + <span class="string">&quot;ing&quot;</span>;<span class="comment">//常量池中的对象</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str4</span> <span class="operator">=</span> str1 + str2; <span class="comment">//在堆上创建的新的对象  </span></span><br><span class="line"><span class="type">String</span> <span class="variable">str5</span> <span class="operator">=</span> <span class="string">&quot;string&quot;</span>;<span class="comment">//常量池中的对象</span></span><br><span class="line">System.out.println(str3 == str4);<span class="comment">//false</span></span><br><span class="line">System.out.println(str3 == str5);<span class="comment">//true</span></span><br><span class="line">System.out.println(str4 == str5);<span class="comment">//false</span></span><br></pre></td></tr></table></figure><h3 id="3-空值与Null串"><a href="#3-空值与Null串" class="headerlink" title="3.空值与Null串"></a>3.空值与Null串</h3><p>检查一个字符串既不是<code>null</code>，也不为空串，这种情况使用以下条件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(str != <span class="literal">null</span> &amp;&amp; str.length() != <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>首先要检查str不为null。</p><h3 id="4-String-API"><a href="#4-String-API" class="headerlink" title="4.String API"></a>4.String API</h3><ul><li><p><strong>int compareTo (String other)</strong></p><p>按照字典顺序,如果字符串位于other之前,返回一个负数;如果字符串位于other之后,返回一个正数;如果两个字符串相等,返回0。</p></li><li><p><strong>boolean startsWith (String prefix)</strong></p></li><li><p><strong>boolean endsWith (String suffix)</strong></p><p>如果字符串以suffix开头或结尾,则返回true。</p></li><li><p><strong>int indexOf (String str)</strong></p><p><strong>int indexof (String str, int fromlndex)</strong></p><p><strong>int indexOf (int cp)</strong></p><p><strong>int indexof (int cp, int fromlndex)</strong></p><p>返回与字符串str或代码点cp匹配的第一个子串的开始位置。这个位置从索引0或fromlndex开始计算。如果在原始串中不存在str,返回-1 </p></li><li><p><strong>String trim ()</strong></p><p>返回一个新字符串。这个字符串将删除了原始字符串头部和尾部的空格。</p></li><li><p><strong>String join (CharSequence delimiter,CharSequence…elements) 8</strong></p><p>返回一个新字符串,用给定的定界符连接所有元素。</p></li></ul><h2 id="StringBuilder-和StringBuffer"><a href="#StringBuilder-和StringBuffer" class="headerlink" title="StringBuilder 和StringBuffer"></a>StringBuilder 和StringBuffer</h2><h3 id="1-构建字符串构建器"><a href="#1-构建字符串构建器" class="headerlink" title="1.构建字符串构建器"></a>1.构建字符串构建器</h3><p>有些时候,需要由较短的字符串构建字符串,例如,按键或来自文件中的单词。采用字符串连接的方式达到此目的效率比较低。每次连接字符串,都会构建一个新的String对象,既耗时,又浪费空间。</p><p>使用StringBuilder类就可以避免这个问题的发生,如果需要用许多小段的字符串构建一个字符串,那么应该按照下列步骤进行。</p><p>首先,构建一个空的字符串构建器:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br></pre></td></tr></table></figure><p>当每次需要添加一部分内容时,就调用append方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">builder. append (ch); <span class="comment">// appends a single character </span></span><br><span class="line"></span><br><span class="line">builder. append(str); <span class="comment">// appends a string</span></span><br></pre></td></tr></table></figure><p>在需要构建字符串时就调用toString方法,将可以得到一个String对象,其中包含了构建器中的字符序列。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">completedString</span> <span class="operator">=</span> builder. toString();</span><br></pre></td></tr></table></figure><blockquote><p>注释:在JDK5.0中引入StringBuilder类。这个类的前身是StringBuffer,其效率稍有些低,但允许采用多线程的方式执行添加或删除字符的操作。如果所有字符串在一个单线程中编辑(通常都是这样) ,则应该用StringBuilder替代它。<strong>这两个类的API是相同的。</strong> </p></blockquote><h3 id="2-常用API"><a href="#2-常用API" class="headerlink" title="2.常用API"></a>2.常用API</h3><ul><li><p><strong>StringBuilder append (String str)</strong></p><p>追加一个字符串并返回this</p></li><li><p><strong>StringBuilder append (char c)</strong></p><p>追加一个代码单元并返回this</p></li><li><p><strong>StringBuilder appendCodePoint (int cp)</strong></p><p>追加一个代码点,并将其转换为一个或两个代码单元并返回this</p></li><li><p><strong>void setCharAt (inti, char c)</strong></p><p>将第i个代码单元设置为c</p></li><li><p><strong>StringBuilder insert (int offset, String str)</strong></p><p>在offset位置插入一个字符串并返回this</p></li><li><p><strong>StringBuilder insert (int offset, Char c)</strong></p><p>在offset位置插入一个代码单元并返回this</p></li><li><p><strong>StringBuilder delete (int startindex, int endindex)</strong></p><p>删除偏移量从startIndex到-endindex-1的代码单元并返回this.</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XML相关知识</title>
      <link href="/2021/01/12/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86_XML/"/>
      <url>/2021/01/12/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86_XML/</url>
      
        <content type="html"><![CDATA[<p>  XML 指可扩展标记语言（e<strong>X</strong>tensible <strong>M</strong>arkup <strong>L</strong>anguage）。</p><p>XML 被设计用来传输和存储数据。</p><span id="more"></span><h2 id="XML与HTML的主要区别"><a href="#XML与HTML的主要区别" class="headerlink" title="XML与HTML的主要区别"></a>XML与HTML的主要区别</h2><ul><li>与HTML不同， XML是大小写敏感的。例如，<code>&lt;H1&gt;</code>和<code>&lt;h1&gt;</code>是不同的XML标签。</li><li>在HTML中，如果从上下文可以分清哪里是段落或列表项的结尾，那么结束标签(如<code>&lt;/p&gt;</code>或<code>&lt;/li&gt;</code>)就可以省略，而在XML中结束标签绝对不能省略。</li><li>在XML中，只有单个标签而没有相对应的结束标签的元素必须以<code>/</code>结尾，比如<code>&lt;img src=&quot;coffeecup.png&quot;/&gt;</code>。这样，解析器就知道不需要查找<code>&lt;/img&gt;</code>标签了。</li><li>在XML中,属性值必须用引号括起来。在HTML中，引号是可有可无的。例如，<code>&lt;applet code=&quot;MyApplet.class&quot; width=300 height=300&gt;</code>对HTML来说是合法的，但是对XML来说则是不合法的。在XML中,必须使用引号，比如， <code>width=&quot;300&quot;</code>。</li><li>在 HTML 中，属性名可以没有值。例如 <code>&lt;input type=&quot;radio&quot; name=&quot;language&quot; value=&quot;Java&quot; checked&gt;</code>。在XML中，所有属性必须都有属性值，比如，<code>checked=&quot;true&quot;</code>或<code>checked=&quot;checked&quot;</code>。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
