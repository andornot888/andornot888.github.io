<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>个人简历</title>
      <link href="/2022/03/15/%E4%B8%AA%E4%BA%BA%E7%AE%80%E5%8E%86/"/>
      <url>/2022/03/15/%E4%B8%AA%E4%BA%BA%E7%AE%80%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th align="center">姓名：</th><th>与或非</th></tr></thead><tbody><tr><td align="center"><strong>手机号：</strong></td><td>18438568005</td></tr><tr><td align="center"><strong>邮箱：</strong></td><td><a href="mailto:&#106;&#x6c;&#x6a;&#x69;&#x6e;&#103;&#50;&#x39;&#x39;&#64;&#x71;&#x71;&#46;&#x63;&#x6f;&#109;">&#106;&#x6c;&#x6a;&#x69;&#x6e;&#103;&#50;&#x39;&#x39;&#64;&#x71;&#x71;&#46;&#x63;&#x6f;&#109;</a></td></tr><tr><td align="center"><strong>求职意向：</strong></td><td>Java开发工程师</td></tr></tbody></table><span id="more"></span><ul><li><p><strong>教育经历</strong></p></li><li><p><strong>个人技能</strong></p><ol><li><p>熟悉HTML5、JavaScript、jQuery、Ajax等前端技术；了解Vue等前端框架。</p></li><li><p>扎实的Java基础：熟练使用集合、多线程、JDBC等。</p></li><li><p>熟练运用Mysql数据库；了解数据库的优化：索引设置、索引底层数据结构、事务隔离级别等。</p></li><li><p>熟练使用ETL工具Kettle对数据进行抽取、清洗、转换等操作。</p></li><li><p>熟悉使用SpringBoot 快速开发框架；掌握Spring、SpringMVC、MyBatis等技术框架；熟悉Spring的IOC、AOP核心。</p></li><li><p>熟练使用Dubbo、Zookeeper等分布式技术框架；了解SpringCloud微服务框架：Eureka、Consul注册中心等。</p></li><li><p>熟悉Redis中央缓存、应用场景、常用数据类型及指令。</p></li><li><p>熟练使用RocketMQ消息中间件；了解应用解耦、流量削峰等应用场景。</p></li><li><p>熟练使用Linux常见命令：日志排查线上问题等。</p></li><li><p>熟练使用Idea、VSCode开发工具；掌握SVN、Git代码版本控制工具。</p></li></ol></li><li><p><strong>工作经历</strong></p></li><li><p><strong>项目经历</strong></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 个人简历 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人简历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>近期学习计划</title>
      <link href="/2022/03/01/%E8%BF%91%E6%9C%9F%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/"/>
      <url>/2022/03/01/%E8%BF%91%E6%9C%9F%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>3.15之前回顾知识点</th><th>计划周期</th><th>完成程度</th></tr></thead><tbody><tr><td>Redis</td><td>1天</td><td></td></tr><tr><td>Spring</td><td>1天</td><td></td></tr><tr><td>SpringMVC</td><td>1天</td><td></td></tr><tr><td>Dubbo</td><td>1天</td><td></td></tr><tr><td>ZooKeeper</td><td>1天</td><td></td></tr><tr><td>SpringBoot</td><td>1天</td><td></td></tr><tr><td>ElaticSearch</td><td>2天</td><td></td></tr><tr><td>RocketMQ</td><td>2天</td><td></td></tr><tr><td>SpringCloud</td><td>2天</td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 学习计划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习计划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue快速入门以及常用指令</title>
      <link href="/2022/02/07/Vue_1_Vue%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E4%BB%A5%E5%8F%8A%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
      <url>/2022/02/07/Vue_1_Vue%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E4%BB%A5%E5%8F%8A%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="1、Vue-快速入门"><a href="#1、Vue-快速入门" class="headerlink" title="1、Vue 快速入门"></a>1、Vue 快速入门</h3><h4 id="1-1、Vue的介绍"><a href="#1-1、Vue的介绍" class="headerlink" title="1.1、Vue的介绍"></a>1.1、Vue的介绍</h4><ul><li><p>Vue是一套构建用户界面的渐进式前端框架。</p></li><li><p>只关注视图层，并且非常容易学习，还可以很方便的与其它库或已有项目整合。</p></li><li><p>通过尽可能简单的API来实现响应数据的绑定和组合的视图组件。</p></li></ul><span id="more"></span><ul><li>特点<br>易用：在有HTMLCSSJavaScript的基础上，快速上手。<br>灵活：简单小巧的核心，渐进式技术栈，足以应付任何规模的应用。<br>性能：20kbmin+gzip运行大小、超快虚拟DOM、最省心的优化。</li></ul><h4 id="1-2、Vue的快速入门"><a href="#1-2、Vue的快速入门" class="headerlink" title="1.2、Vue的快速入门"></a>1.2、Vue的快速入门</h4><ul><li><strong>开发步骤</strong></li></ul><ol><li>下载和引入vue.js文件。</li><li>编写入门程序。<br>视图：负责页面渲染，主要由HTML+CSS构成。<br>脚本：负责业务数据模型（Model）以及数据的处理逻辑。</li></ol><ul><li><p><strong>代码实现</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>快速入门<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 视图 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;msg&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 脚本</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#div&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>:<span class="string">&quot;Hello Vue&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="1-3、Vue快速入门详解"><a href="#1-3、Vue快速入门详解" class="headerlink" title="1.3、Vue快速入门详解"></a>1.3、Vue快速入门详解</h4><ul><li><p>Vue 核心对象：每一个 Vue 程序都是从一个 Vue 核心对象开始的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line"> 选项列表;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>选项列表<br>el选项：用于接收获取到页面中的元素。(根据常用选择器获取)。<br>data选项：用于保存当前Vue对象中的数据。在视图中声明的变量需要在此处赋值。<br>methods选项：用于定义方法。方法可以直接通过对象名调用，this代表当前Vue对象。</p></li><li><p>数据绑定<br>在视图部分获取脚本部分的数据。</p></li></ul><h4 id="1-4、Vue快速入门的升级"><a href="#1-4、Vue快速入门的升级" class="headerlink" title="1.4、Vue快速入门的升级"></a>1.4、Vue快速入门的升级</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>快速入门升级<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 视图 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>姓名：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>班级：&#123;&#123;classRoom&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;hi()&quot;</span>&gt;</span>打招呼<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;update()&quot;</span>&gt;</span>修改班级<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/ &quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 脚本</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;<span class="comment">// vm实例化时，会将el和data选项变为vm的属性，语法：$属性名</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#div&quot;</span>,<span class="comment">// element:元素，将id为div的元素与vue实例对象进行绑定，绑定之后，div内部就可以使用vue定义的数据</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">classRoom</span>:<span class="string">&quot;三年一班&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">study</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;正在&quot;</span> + <span class="variable language_">this</span>.<span class="property">classRoom</span> + <span class="string">&quot;好好学习!&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//定义打招呼方法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">hi</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        vm.<span class="title function_">study</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//定义修改班级</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">update</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        vm.<span class="property">classRoom</span> = <span class="string">&quot;五年八班&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-5、Vue小结"><a href="#1-5、Vue小结" class="headerlink" title="1.5、Vue小结"></a>1.5、Vue小结</h4><ul><li>Vue是一套构建用户界面的渐进式前端框架。</li><li>Vue的程序包含视图和脚本两个核心部分。</li><li>脚本部分<ul><li>Vue核心对象。</li><li>选项列表<ul><li>el：接收获取的元素。</li><li>data：保存数据。</li><li>methods：定义方法。</li></ul></li></ul></li><li>视图部分<ul><li>数据绑定：</li></ul></li></ul><h3 id="2、Vue-常用指令"><a href="#2、Vue-常用指令" class="headerlink" title="2、Vue 常用指令"></a>2、Vue 常用指令</h3><h4 id="2-1、指令介绍"><a href="#2-1、指令介绍" class="headerlink" title="2.1、指令介绍"></a>2.1、指令介绍</h4><ul><li><p>指令：是带有 v- 前缀的特殊属性，不同指令具有不同含义。例如 v-html，v-if，v-for。</p></li><li><p>使用指令时，通常编写在标签的属性上，值可以使用 JS 的表达式。</p></li><li><p>指令：vue框架定义的，一些标签的自定义的属性。</p></li><li><p>常用指令</p><p><img src="https://gitee.com/andornot888/andornot_images/raw/master//imgs/Vue1_1.png"></p></li></ul><h4 id="2-2、文本插值"><a href="#2-2、文本插值" class="headerlink" title="2.2、文本插值"></a>2.2、文本插值</h4><ul><li><p>v-html：把文本解析为 HTML 代码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>文本插值<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#div&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>:<span class="string">&quot;&lt;b&gt;Hello Vue&lt;/b&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>页面展示：</p><img src="https://gitee.com/andornot888/andornot_images/raw/master//imgs/Vue1_2.png" alt="image-20220126133032882" style="zoom: 80%;" /><h4 id="2-3、绑定属性"><a href="#2-3、绑定属性" class="headerlink" title="2.3、绑定属性"></a>2.3、绑定属性</h4><ul><li><p>v-bind：为 HTML 标签绑定属性值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>绑定属性<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.my</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>百度一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>百度一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;cls&quot;</span>&gt;</span>我是div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#div&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">url</span>:<span class="string">&quot;https://www.baidu.com&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">cls</span>:<span class="string">&quot;my&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="2-4、条件渲染"><a href="#2-4、条件渲染" class="headerlink" title="2.4、条件渲染"></a>2.4、条件渲染</h4><ul><li><p>v-if：条件性的渲染某元素，判定为真时渲染,否则不渲染。</p></li><li><p>v-else：条件性的渲染。</p></li><li><p>v-else-if：条件性的渲染。</p></li><li><p>v-show：根据条件展示某元素，区别在于切换的是display属性的值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>条件渲染<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 判断num的值，对3取余  余数为0显示div1  余数为1显示div2  余数为2显示div3 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;num % 3 == 0&quot;</span>&gt;</span>div1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;num % 3 == 1&quot;</span>&gt;</span>div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>=<span class="string">&quot;num % 3 == 2&quot;</span>&gt;</span>div3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;flag&quot;</span>&gt;</span>div4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#div&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">num</span>:<span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">flag</span>:<span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="2-5、列表渲染"><a href="#2-5、列表渲染" class="headerlink" title="2.5、列表渲染"></a>2.5、列表渲染</h4><ul><li><p>v-for：列表渲染，遍历容器的元素或者对象的属性。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>列表渲染<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(name,index) in names&quot;</span>&gt;</span></span><br><span class="line">                &#123;&#123;name&#125;&#125;&#123;&#123;index&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(value,key) in student&quot;</span>&gt;</span></span><br><span class="line">                &#123;&#123;value&#125;&#125;&#123;&#123;key&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#div&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">names</span>:[<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">student</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">age</span>:<span class="number">23</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>页面展示：</p><p><img src="https://gitee.com/andornot888/andornot_images/raw/master//imgs/Vue1_3.png" alt="image-20220126141148834"></p><h4 id="2-6、事件绑定"><a href="#2-6、事件绑定" class="headerlink" title="2.6、事件绑定"></a>2.6、事件绑定</h4><ul><li><p>v-on：为 HTML 标签绑定事件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>事件绑定<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;change()&quot;</span>&gt;</span>改变div的内容<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:dblclick</span>=<span class="string">&quot;change()&quot;</span>&gt;</span>改变div的内容<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;change()&quot;</span> &gt;</span>改变div的内容<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#div&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>:<span class="string">&quot;与或非&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">change</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;andornot&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;); </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="2-7、表单绑定"><a href="#2-7、表单绑定" class="headerlink" title="2.7、表单绑定"></a>2.7、表单绑定</h4><ul><li><p><strong>表单绑定</strong><br>v-model：在表单元素上创建双向数据绑定。</p></li><li><p><strong>双向数据绑定</strong><br>更新data数据，页面中的数据也会更新。<br>更新页面数据，data数据也会更新。</p></li><li><p><strong>MVVM模型(ModelViewViewModel)：是MVC模式的改进版</strong><br>在前端页面中，JS对象表示Model，页面表示View，两者做到了最大限度的分离。<br>将Model和View关联起来的就是ViewModel，它是桥梁。<br>ViewModel负责把Model的数据同步到View显示出来，还负责把View修改的数据同步回Model。</p><p><img src="https://gitee.com/andornot888/andornot_images/raw/master//imgs/Vue1_4.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>表单绑定<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- v-html &#123;&#123;&#125;&#125; 单向数据绑定：数据变化会影响界面 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span></span><br><span class="line">             <span class="comment">&lt;!-- v-model ：双向数据绑定，数据变化会影响界面，用户修改界面内容会影响数据</span></span><br><span class="line"><span class="comment">                 v-model 只能用在表单控件中</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;age&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">let</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#div&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">username</span>:<span class="string">&quot;张三&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">age</span>:<span class="number">23</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="2-8、小结"><a href="#2-8、小结" class="headerlink" title="2.8、小结"></a>2.8、小结</h4><ul><li><strong>指令：是带有v-前缀的特殊属性，不同指令具有不同含义。</strong></li><li><strong>文本插值</strong><br>v-html：把文本解析为HTML代码。</li><li><strong>绑定属性</strong><br>v-bind：为HTML标签绑定属性值。</li><li><strong>条件渲染</strong><br>v-if：条件性的渲染某元素，判定为真时渲染,否则不渲染。<br>v-else：条件性的渲染。<br>v-else-if：条件性的渲染。<br>v-show：根据条件展示某元素，区别在于切换的是display属性的值。</li><li><strong>列表渲染</strong><br>v-for：列表渲染，遍历容器的元素或者对象的属性。</li><li><strong>事件绑定</strong><br>v-on：为HTML标签绑定事件。</li><li><strong>表单绑定</strong><br>v-model：在表单元素上创建双向数据绑定。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>prop() 和 attr() 的区别</title>
      <link href="/2022/01/28/jQuery_1_prop()%20%E5%92%8C%20attr()%20%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2022/01/28/jQuery_1_prop()%20%E5%92%8C%20attr()%20%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>attr和prop分别是单词attribute和property的缩写，并且它们均表示”属性”的意思。</p><p>不过，在jQuery中，attribute和property却是两个不同的概念。attribute表示HTML文档节点的属性，property表示JS对象的属性。</p><span id="more"></span><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这里的id、class、data_id均是该元素文档节点的attribute --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;message&quot;</span> <span class="attr">class</span>=<span class="string">&quot;test&quot;</span> <span class="attr">data_id</span>=<span class="string">&quot;123&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 这里的name、age是Person的property</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> <span class="title class_">Person</span> = &#123; <span class="attr">name</span>: <span class="string">&quot;小明&quot;</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在jQuery中，prop()函数的设计目标是用于设置或获取指定DOM元素(指的是JS对象，Element类型)上的属性(property)；attr()函数的设计目标是用于设置或获取指定DOM元素所对应的文档节点上的属性(attribute)。</p><p>此外，对于表单元素的checked、selected、disabled等属性，在jQuery 1.6之前，attr()获取这些属性的返回值为Boolean类型：如果被选中(或禁用)就返回true，否则返回false。</p><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>attr(name,[value])</td><td>获得&#x2F;设置属性的值</td></tr><tr><td>prop(name,[value])</td><td>获得&#x2F;设置属性的值（checked、selected、disabled）</td></tr></tbody></table><ul><li>prop专门用于操作单选框，复选框，下拉列表</li></ul><p>但是从1.6开始，使用attr()获取这些属性的返回值为String类型，如果被选中(或禁用)就返回checked、selected或disabled，否则(即元素节点没有该属性)返回undefined。并且，在某些版本中，这些属性值表示文档加载时的初始状态值，即使之后更改了这些元素的选中(或禁用)状态，对应的属性值也不会发生改变。</p><p>因为jQuery认为：attribute的checked、selected、disabled就是表示该属性初始状态的值，property的checked、selected、disabled才表示该属性实时状态的值(值为true或false)。</p><p>因此，在jQuery 1.6及以后版本中，请使用prop()函数来设置或获取checked、selected、disabled等属性。对于其它能够用prop()实现的操作，也尽量使用prop()函数。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// $(&#x27;button&#x27;).on(&#x27;click&#x27;,function()&#123;</span></span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// var r = $(&#x27;input&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">11</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> ($(<span class="string">&#x27;input&#x27;</span>).<span class="title function_">prop</span>(<span class="string">&#x27;checked&#x27;</span>)) &#123;</span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;input&#x27;</span>).<span class="title function_">prop</span>(<span class="string">&#x27;checked&#x27;</span>,<span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&#x27;input&#x27;</span>).<span class="title function_">prop</span>(<span class="string">&#x27;checked&#x27;</span>,<span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>外观数列</title>
      <link href="/2022/01/19/Interview_1_CountandSay/"/>
      <url>/2022/01/19/Interview_1_CountandSay/</url>
      
        <content type="html"><![CDATA[<p>来自朋友面试华为的题，在leetcode上原题为外观数列<a href="https://leetcode-cn.com/problems/count-and-say/">38. 外观数列 - 力扣（LeetCode） (leetcode-cn.com)</a>。</p><span id="more"></span><p>有一个数列A[n]，从A[0]开始每一项都是一个数字，数列中A[n+1]都是A[n]的描述，其中A[0]&#x3D;1。<br>规则如下：</p><blockquote><p> A[0]:1</p><p> A[1]:11 含义其中A[0]&#x3D;1是1个1 即11</p><p> 表示A[0]从左到右连续出现了1次1</p><p> A[2]:21 含义其中A[1]&#x3D;11是2个1 即21</p><p> 表示A[1]从左到右连续出现了2次1</p><p> A[3]:1211 含义其中A[2]从左到右是由一个2和一个1组成 即1211</p><p> 表示A[2]从左到右连续出现了一次2又连续出现了一次1</p><p> A[4]:111221  含义A[3]&#x3D;1211 从左到右是由一个1和一个2两个1 即111221</p><p> 表示A[3]从左到右连续出现了一次1又连续出现了一次2又连续出现了2次1</p></blockquote><p>我的题解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">A</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">       Map&lt;Integer, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">       map.put(<span class="number">0</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">       map.put(<span class="number">1</span>,<span class="string">&quot;11&quot;</span>);</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">2</span>; j &lt;= n; j++) &#123;</span><br><span class="line">           <span class="type">char</span>[] chars = map.get(j-<span class="number">1</span>).toCharArray();</span><br><span class="line">           <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">           <span class="type">String</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">           <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">               <span class="keyword">if</span> (i==chars.length-<span class="number">1</span> &amp;&amp; chars[i] == chars[i-<span class="number">1</span>])&#123;</span><br><span class="line">                   num++;</span><br><span class="line">                   temp = temp + num + chars[i-<span class="number">1</span>];</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               &#125;<span class="keyword">else</span> <span class="keyword">if</span> (chars[i] == chars[i-<span class="number">1</span>])&#123;</span><br><span class="line">                   num++;</span><br><span class="line">                   <span class="keyword">continue</span>;</span><br><span class="line">               &#125;<span class="keyword">else</span> <span class="keyword">if</span> (i==chars.length-<span class="number">1</span> &amp;&amp; chars[i] != chars[i-<span class="number">1</span>])&#123;</span><br><span class="line">                   temp = temp + num + chars[i-<span class="number">1</span>];</span><br><span class="line">                   num=<span class="number">1</span>;</span><br><span class="line">                   temp = temp + num + chars[i];</span><br><span class="line">               &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                   temp = temp + num + chars[i-<span class="number">1</span>];</span><br><span class="line">                   num=<span class="number">1</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           map.put(j,temp);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> map.get(n);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><hr><p>看完力扣原题题解后，发现使用<code>StringBuilder </code>代替<code>String</code>进行拼接时，效率可以提高很多，两者区别可以看这一篇<a href="https://daijing.online/2021/01/20/Java_1_String%E3%80%81StringBuffer%E5%92%8CStringBuilder/">String、StringBuffer和StringBuilder的区别 | 与或非’s Blog (daijing.online)</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">countAndSay</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">Map&lt;Integer, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">       map.put(<span class="number">0</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">       map.put(<span class="number">1</span>,<span class="string">&quot;11&quot;</span>);</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">2</span>; j &lt;= n; j++) &#123;</span><br><span class="line">           <span class="type">char</span>[] chars = map.get(j-<span class="number">1</span>).toCharArray();</span><br><span class="line">           <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">           <span class="type">StringBuilder</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">           <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">               <span class="keyword">if</span> (i==chars.length-<span class="number">1</span> &amp;&amp; chars[i] == chars[i-<span class="number">1</span>])&#123;</span><br><span class="line">                   num++;</span><br><span class="line">                   temp.append(num).append(chars[i-<span class="number">1</span>]);</span><br><span class="line">                  <span class="comment">// temp = temp + num + chars[i-1];</span></span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               &#125;<span class="keyword">else</span> <span class="keyword">if</span> (chars[i] == chars[i-<span class="number">1</span>])&#123;</span><br><span class="line">                   num++;</span><br><span class="line">                   <span class="keyword">continue</span>;</span><br><span class="line">               &#125;<span class="keyword">else</span> <span class="keyword">if</span> (i==chars.length-<span class="number">1</span> &amp;&amp; chars[i] != chars[i-<span class="number">1</span>])&#123;</span><br><span class="line">                   temp.append(num).append(chars[i-<span class="number">1</span>]);</span><br><span class="line">                   <span class="comment">//temp = temp + num + chars[i-1];</span></span><br><span class="line">                   num=<span class="number">1</span>;</span><br><span class="line">                   temp.append(num).append(chars[i]);</span><br><span class="line">                   <span class="comment">//temp = temp + num + chars[i];</span></span><br><span class="line">               &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                   temp.append(num).append(chars[i-<span class="number">1</span>]);</span><br><span class="line">                  <span class="comment">// temp = temp + num + chars[i-1];</span></span><br><span class="line">                   num=<span class="number">1</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           map.put(j,temp.toString());</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> map.get(n);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>另外还有偷懒解法，就是直接打表，执行效率最高</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Interview </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分支管理</title>
      <link href="/2021/06/22/git_2_%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/"/>
      <url>/2021/06/22/git_2_%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<ul><li>分支<ul><li><p>由每次提交的代码，串成的一条时间线</p></li><li><p>使用分支意味着你可以把你的工作从开发主线上分离开来，以免影响开发主线</p></li></ul></li></ul><span id="more"></span><ul><li><p>分支的使用场景</p><ol><li>周期较长的模块开发<br>假设你准备开发一个新功能，但是需要一个月才能完成<br>第一周写了20%的代码，突然发现原来已经写好的功能出现了一个严重的Bug<br>那现在就需要放下手中的新功能，去修复Bug<br>但这20%的代码不能舍弃，并且也担心丢失，这就需要开启一个新的版本控制。</li><li>尝试性的模块开发<br>业务人员给我们提出了一个需求，经过我们的思考和分析<br>该需求应该可以使用技术手段进行实现。<br>但是我们还不敢确定，我们就可以去创建一个分支基于分支进行尝试性开发。</li></ol></li><li><p>分支工作流程</p><ul><li><p>Master: 指向提交的代码版本</p></li><li><p>Header: 指向当前所使用的的分支</p><p><img src="https://gitee.com/andornot888/andornot_images/raw/master//imgs/git2_1.png" alt="image-20220222164700405"></p></li></ul></li><li><pre><code>+ 创建和切换  创建命令：git branch 分支名  切换命令：git checkout 分支名+ 新分支添加文件  查看文件命令：ls  总结：不同分支之间的关系是平行的关系，不会相互影响+ 合并分支  合并命令：git merge 分支名+ 删除分支  删除命令：git branch -d 分支名+ 查看分支列表  查看命令：git branch</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github的.gitignore忽略文件</title>
      <link href="/2021/06/21/git_1_gitignore/"/>
      <url>/2021/06/21/git_1_gitignore/</url>
      
        <content type="html"><![CDATA[<p>一定要养成在项目开始就创建.gitignore文件的习惯，否则一旦push，处理起来会非常麻烦。</p><p>当然如果已经push了怎么办 ？</p><p>当然也有解决方法，如下：</p><span id="more"></span><p>有时候在项目开发过程中，突然心血来潮想把某些目录或文件加入忽略规则，按照上述方法定义后发现并未生效，原因是.gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。那么解决方法就是先把本地缓存删除（改变成未track状态），然后再提交：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">rm</span> -r --cached .</span><br><span class="line"></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line">git commit -m <span class="string">&#x27;update .gitignore&#x27;</span></span><br></pre></td></tr></table></figure><hr><p><strong>推荐：</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">rm</span> --cached ignore_file //文件名</span><br><span class="line"></span><br><span class="line">git commit -m <span class="string">&#x27;update .gitignore&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL模糊查询like</title>
      <link href="/2021/06/11/MySQL_7_MySQL%E6%A8%A1%E7%B3%8A%E6%9F%A5%E8%AF%A2like/"/>
      <url>/2021/06/11/MySQL_7_MySQL%E6%A8%A1%E7%B3%8A%E6%9F%A5%E8%AF%A2like/</url>
      
        <content type="html"><![CDATA[<h3 id="："><a href="#：" class="headerlink" title="%："></a>%：</h3><p> % 表示任意0个或多个字符。</p><p>可匹配任意类型和长度的字符。比如:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> u_name <span class="keyword">LIKE</span> <span class="string">&#x27;%三%&#x27;</span></span><br></pre></td></tr></table></figure><p>将会把u_name为“张三”，“张猫三”、“三脚猫”，“唐三藏”等等有“三”的记录全找出来。</p><span id="more"></span><p>另外，如果需要找出u_name中既有“三”又有“猫”的记录，使用and条件:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> u_name <span class="keyword">LIKE</span> <span class="string">&#x27;%三%&#x27;</span> <span class="keyword">AND</span> u_name <span class="keyword">LIKE</span> <span class="string">&#x27;%猫%&#x27;</span></span><br></pre></td></tr></table></figure><p>若使用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> u_name <span class="keyword">LIKE</span> <span class="string">&#x27;%三%猫%&#x27;</span></span><br></pre></td></tr></table></figure><p>虽然能搜索出“三脚猫”，但不能搜索出符合条件的“张猫三”。</p><h3 id="：-1"><a href="#：-1" class="headerlink" title="_："></a>_：</h3><p>_ 表示任意单个字符。</p><p>匹配单个任意字符，它常用来限制表达式的字符长度语句：</p><p>比如 :</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> u_name <span class="keyword">LIKE</span> <span class="string">&#x27;_三_&#x27;</span></span><br></pre></td></tr></table></figure><p>只找出“唐三藏”这样u_name为三个字且中间一个字是“三”的；</p><p>再比如 :</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> u_name <span class="keyword">LIKE</span> <span class="string">&#x27;三__&#x27;</span>;</span><br></pre></td></tr></table></figure><p>只找出“三脚猫”这样name为三个字且第一个字是“三”的；</p><h3 id="：-2"><a href="#：-2" class="headerlink" title="[ ]："></a>[ ]：</h3><p>[] 表示括号内所列字符中的一个（类似正则表达式）。</p><p>指定一个字符、字符串或范围，要求所匹配对象为它们中的任一个。</p><p>比如:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> u_name <span class="keyword">LIKE</span> <span class="string">&#x27;[张李王]三&#x27;</span> </span><br></pre></td></tr></table></figure><p>将找出“张三”、“李三”、“王三”（而不是“张李王三”）；</p><p>如 [ ] 内有一系列字符（01234、abcde之类的）则可略写为“0-4”、“a-e”。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> u_name <span class="keyword">LIKE</span> <span class="string">&#x27;老[1-9]&#x27;</span> </span><br></pre></td></tr></table></figure><p>将找出“老1”、“老2”、……、“老9”。</p><h3 id="：-3"><a href="#：-3" class="headerlink" title="[^ ] ："></a>[^ ] ：</h3><p>表示不在括号所列之内的单个字符。其取值和 [] 相同，但它要求所匹配对象为指定字符以外的任一个字符。</p><p>比如 :</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> [<span class="keyword">user</span>] <span class="keyword">WHERE</span> u_name <span class="keyword">LIKE</span> <span class="string">&#x27;[^张李王]三&#x27;</span> </span><br></pre></td></tr></table></figure><p>将找出不姓“张”、“李”、“王”的“赵三”、“孙三”等；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> u_name <span class="keyword">LIKE</span> <span class="string">&#x27;老[^1-4]&#x27;</span></span><br></pre></td></tr></table></figure><p> 将排除“老1”到“老4”，寻找“老5”、“老6”、……。</p><h3 id="查询内容包含通配符时"><a href="#查询内容包含通配符时" class="headerlink" title="查询内容包含通配符时:"></a>查询内容包含通配符时:</h3><p>由于通配符的缘故，导致我们查询特殊字符“%”、“_”、“[”的语句无法正常实现，而把特殊字符用“[ ]”括起便可正常查询。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL锁</title>
      <link href="/2021/05/29/MySQL_6_MySQL%E9%94%81/"/>
      <url>/2021/05/29/MySQL_6_MySQL%E9%94%81/</url>
      
        <content type="html"><![CDATA[<h3 id="1-锁的概念"><a href="#1-锁的概念" class="headerlink" title="1.锁的概念"></a>1.锁的概念</h3><ul><li>多线程当中如果想保证数据的准确性是如何实现的呢？没错，通过同步实现。同步就相当于是加锁。加了锁以后有什么好处呢？当一个线程真正在操作数据的时候，其他线程只能等待。当一个线程执行完毕后，释放锁。其他线程才能进行操作！</li></ul><span id="more"></span><ul><li><p>那么MySQL数据库中的锁的功能也是类似的。在学习事务的时候，讲解过事务的隔离性，可能会出现脏读、不可重复读、幻读的问题，当时我们的解决方式是通过修改事务的隔离级别来控制，但是数据库的隔离级别呢我们并不推荐修改。所以，锁的作用也可以解决掉之前的问题！</p></li><li><p>锁机制 : 数据库为了保证数据的一致性，而使用各种共享的资源在被并发访问时变得有序所设计的一种规则。</p></li><li><p>举例，在电商网站购买商品时，商品表中只存有1个商品，而此时又有两个人同时购买，那么谁能买到就是一个关键的问题。</p><p>这里会用到事务进行一系列的操作：</p><ol><li>先从商品表中取出物品的数据</li><li>然后插入订单</li><li>付款后，再插入付款表信息</li><li>更新商品表中商品的数量</li></ol><p>以上过程中，使用锁可以对商品数量数据信息进行保护，实现隔离，即只允许第一位用户完成整套购买流程，而其他用户只能等待，这样就解决了并发中的矛盾问题。</p></li><li><p>在数据库中，数据是一种供许多用户共享访问的资源，如何保证数据并发访问的一致性、有效性，是所有数据库必须解决的一个问题，MySQL由于自身架构的特点，在不同的存储引擎中，都设计了面对特定场景的锁定机制，所以引擎的差别，导致锁机制也是有很大差别的。</p></li></ul><h3 id="2-锁的分类"><a href="#2-锁的分类" class="headerlink" title="2.锁的分类"></a>2.锁的分类</h3><ul><li>按操作分类：<ul><li>共享锁：也叫读锁。针对同一份数据，多个事务读取操作可以同时加锁而不互相影响 ，但是不能修改数据记录。</li><li>排他锁：也叫写锁。当前的操作没有完成前,会阻断其他操作的读取和写入</li></ul></li><li>按粒度分类：<ul><li>表级锁：操作时，会锁定整个表。开销小，加锁快；不会出现死锁；锁定力度大，发生锁冲突概率高，并发度最低。偏向于MyISAM存储引擎！</li><li>行级锁：操作时，会锁定当前操作行。开销大，加锁慢；会出现死锁；锁定粒度小，发生锁冲突的概率低，并发度高。偏向于InnoDB存储引擎！</li><li>页级锁：锁的粒度、发生冲突的概率和加锁的开销介于表锁和行锁之间，会出现死锁，并发性能一般。</li></ul></li><li>按使用方式分类：<ul><li>悲观锁：每次查询数据时都认为别人会修改，很悲观，所以查询时加锁。</li><li>乐观锁：每次查询数据时都认为别人不会修改，很乐观，但是更新时会判断一下在此期间别人有没有去更新这个数据</li></ul></li><li>不同存储引擎支持的锁</li></ul><table><thead><tr><th>存储引擎</th><th>表级锁</th><th>行级锁</th><th>页级锁</th></tr></thead><tbody><tr><td>MyISAM</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>InnoDB</td><td>支持</td><td>支持</td><td>不支持</td></tr><tr><td>MEMORY</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>BDB</td><td>支持</td><td>不支持</td><td>支持</td></tr></tbody></table><h3 id="3-演示InnoDB锁"><a href="#3-演示InnoDB锁" class="headerlink" title="3.演示InnoDB锁"></a>3.演示InnoDB锁</h3><ul><li>数据准备</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建db13数据库</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE db13;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用db13数据库</span></span><br><span class="line">USE db13;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建student表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student(</span><br><span class="line">id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">NAME <span class="type">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">age <span class="type">INT</span>,</span><br><span class="line">score <span class="type">INT</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 添加数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span> (<span class="keyword">NULL</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="number">23</span>,<span class="number">99</span>),(<span class="keyword">NULL</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="number">24</span>,<span class="number">95</span>),</span><br><span class="line">(<span class="keyword">NULL</span>,<span class="string">&#x27;王五&#x27;</span>,<span class="number">25</span>,<span class="number">98</span>),(<span class="keyword">NULL</span>,<span class="string">&#x27;赵六&#x27;</span>,<span class="number">26</span>,<span class="number">97</span>);</span><br></pre></td></tr></table></figure><ul><li>共享锁</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 标准语法</span></span><br><span class="line"><span class="keyword">SELECT</span>语句 LOCK <span class="keyword">IN</span> SHARE MODE;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 窗口1</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">共享锁：数据可以被多个事务查询，但是不能修改</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">-- 开启事务</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询id为1的数据记录。加入共享锁</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span> LOCK <span class="keyword">IN</span> SHARE MODE;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询分数为99分的数据记录。加入共享锁</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> score<span class="operator">=</span><span class="number">99</span> LOCK <span class="keyword">IN</span> SHARE MODE;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 提交事务</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 窗口2</span></span><br><span class="line"><span class="comment">-- 开启事务</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询id为1的数据记录(普通查询，可以查询)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询id为1的数据记录，并加入共享锁(可以查询。共享锁和共享锁兼容)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span> LOCK <span class="keyword">IN</span> SHARE MODE;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改id为1的姓名为张三三(不能修改，会出现锁的情况。只有窗口1提交事务后，才能修改成功)</span></span><br><span class="line"><span class="keyword">UPDATE</span> student <span class="keyword">SET</span> NAME<span class="operator">=</span><span class="string">&#x27;张三三&#x27;</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改id为2的姓名为李四四(修改成功，InnoDB引擎默认是行锁)</span></span><br><span class="line"><span class="keyword">UPDATE</span> student <span class="keyword">SET</span> NAME<span class="operator">=</span><span class="string">&#x27;李四四&#x27;</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改id为3的姓名为王五五(注意：InnoDB引擎如果不采用带索引的列。则会提升为表锁)</span></span><br><span class="line"><span class="keyword">UPDATE</span> student <span class="keyword">SET</span> NAME<span class="operator">=</span><span class="string">&#x27;王五五&#x27;</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 提交事务</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><ul><li>排他锁</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 标准语法</span></span><br><span class="line"><span class="keyword">SELECT</span>语句 <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 窗口1</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">排他锁：加锁的数据，不能被其他事务加锁查询或修改</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">-- 开启事务</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询id为1的数据记录，并加入排他锁</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 提交事务</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 窗口2</span></span><br><span class="line"><span class="comment">-- 开启事务</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询id为1的数据记录(普通查询没问题)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询id为1的数据记录，并加入共享锁(不能查询。因为排他锁不能和其他锁共存)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span> LOCK <span class="keyword">IN</span> SHARE MODE;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询id为1的数据记录，并加入排他锁(不能查询。因为排他锁不能和其他锁共存)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改id为1的姓名为张三(不能修改，会出现锁的情况。只有窗口1提交事务后，才能修改成功)</span></span><br><span class="line"><span class="keyword">UPDATE</span> student <span class="keyword">SET</span> NAME<span class="operator">=</span><span class="string">&#x27;张三&#x27;</span> <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 提交事务</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><ul><li>注意：锁的兼容性<ul><li>共享锁和共享锁     兼容</li><li>共享锁和排他锁     冲突</li><li>排他锁和排他锁     冲突</li><li>排他锁和共享锁     冲突</li></ul></li></ul><h3 id="4-演示MyISAM锁"><a href="#4-演示MyISAM锁" class="headerlink" title="4.演示MyISAM锁"></a>4.演示MyISAM锁</h3><ul><li>数据准备</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建product表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> product(</span><br><span class="line">id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">NAME <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">price <span class="type">INT</span></span><br><span class="line">)ENGINE <span class="operator">=</span> MYISAM;  <span class="comment">-- 指定存储引擎为MyISAM</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product <span class="keyword">VALUES</span> (<span class="keyword">NULL</span>,<span class="string">&#x27;华为手机&#x27;</span>,<span class="number">4999</span>),(<span class="keyword">NULL</span>,<span class="string">&#x27;小米手机&#x27;</span>,<span class="number">2999</span>),</span><br><span class="line">(<span class="keyword">NULL</span>,<span class="string">&#x27;苹果&#x27;</span>,<span class="number">8999</span>),(<span class="keyword">NULL</span>,<span class="string">&#x27;中兴&#x27;</span>,<span class="number">1999</span>);</span><br></pre></td></tr></table></figure><ul><li>读锁</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 标准语法</span></span><br><span class="line"><span class="comment">-- 加锁</span></span><br><span class="line">LOCK <span class="keyword">TABLE</span> 表名 READ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 解锁(将当前会话所有的表进行解锁)</span></span><br><span class="line">UNLOCK TABLES;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 窗口1</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">读锁：所有连接只能读取数据，不能修改</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">-- 为product表加入读锁</span></span><br><span class="line">LOCK <span class="keyword">TABLE</span> product READ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询product表(查询成功)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改华为手机的价格为5999(修改失败)</span></span><br><span class="line"><span class="keyword">UPDATE</span> product <span class="keyword">SET</span> price<span class="operator">=</span><span class="number">5999</span> <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 解锁</span></span><br><span class="line">UNLOCK TABLES;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 窗口2</span></span><br><span class="line"><span class="comment">-- 查询product表(查询成功)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改华为手机的价格为5999(不能修改，窗口1解锁后才能修改成功)</span></span><br><span class="line"><span class="keyword">UPDATE</span> product <span class="keyword">SET</span> price<span class="operator">=</span><span class="number">5999</span> <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure><ul><li>写锁</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 标准语法</span></span><br><span class="line"><span class="comment">-- 加锁</span></span><br><span class="line">LOCK <span class="keyword">TABLE</span> 表名 WRITE;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 解锁(将当前会话所有的表进行解锁)</span></span><br><span class="line">UNLOCK TABLES;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 窗口1</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">写锁：其他连接不能查询和修改数据</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">-- 为product表添加写锁</span></span><br><span class="line">LOCK <span class="keyword">TABLE</span> product WRITE;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询product表(查询成功)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改小米手机的金额为3999(修改成功)</span></span><br><span class="line"><span class="keyword">UPDATE</span> product <span class="keyword">SET</span> price<span class="operator">=</span><span class="number">3999</span> <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 解锁</span></span><br><span class="line">UNLOCK TABLES;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 窗口2</span></span><br><span class="line"><span class="comment">-- 查询product表(不能查询。只有窗口1解锁后才能查询成功)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改小米手机的金额为2999(不能修改。只有窗口1解锁后才能修改成功)</span></span><br><span class="line"><span class="keyword">UPDATE</span> product <span class="keyword">SET</span> price<span class="operator">=</span><span class="number">2999</span> <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">2</span>;</span><br></pre></td></tr></table></figure><h3 id="5-演示悲观锁和乐观锁"><a href="#5-演示悲观锁和乐观锁" class="headerlink" title="5.演示悲观锁和乐观锁"></a>5.演示悲观锁和乐观锁</h3><ul><li><p>悲观锁的概念</p><ul><li>就是很悲观，它对于数据被外界修改的操作持保守态度，认为数据随时会修改。</li><li>整个数据处理中需要将数据加锁。悲观锁一般都是依靠关系型数据库提供的锁机制。</li><li>我们之前所学的行锁，表锁不论是读写锁都是悲观锁。</li></ul></li><li><p>乐观锁的概念</p><ul><li>就是很乐观，每次自己操作数据的时候认为没有人会来修改它，所以不去加锁。</li><li>但是在更新的时候会去判断在此期间数据有没有被修改。</li><li>需要用户自己去实现，不会发生并发抢占资源，只有在提交操作的时候检查是否违反数据完整性。</li></ul></li><li><p>悲观锁和乐观锁使用前提</p><ul><li>对于读的操作远多于写的操作的时候，这时候一个更新操作加锁会阻塞所有的读取操作，降低了吞吐量。最后还要释放锁，锁是需要一些开销的，这时候可以选择乐观锁。</li><li>如果是读写比例差距不是非常大或者系统没有响应不及时，吞吐量瓶颈的问题，那就不要去使用乐观锁，它增加了复杂度，也带来了业务额外的风险。这时候可以选择悲观锁。</li></ul></li><li><p>乐观锁的实现方式</p><ul><li><p>版本号</p><ul><li>给数据表中添加一个version列，每次更新后都将这个列的值加1。</li><li>读取数据时，将版本号读取出来，在执行更新的时候，比较版本号。</li><li>如果相同则执行更新，如果不相同，说明此条数据已经发生了变化。</li><li>用户自行根据这个通知来决定怎么处理，比如重新开始一遍，或者放弃本次更新。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建city表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> city(</span><br><span class="line">id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,  <span class="comment">-- 城市id</span></span><br><span class="line">NAME <span class="type">VARCHAR</span>(<span class="number">20</span>),                   <span class="comment">-- 城市名称</span></span><br><span class="line">VERSION <span class="type">INT</span>                         <span class="comment">-- 版本号</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> city <span class="keyword">VALUES</span> (<span class="keyword">NULL</span>,<span class="string">&#x27;北京&#x27;</span>,<span class="number">1</span>),(<span class="keyword">NULL</span>,<span class="string">&#x27;上海&#x27;</span>,<span class="number">1</span>),(<span class="keyword">NULL</span>,<span class="string">&#x27;广州&#x27;</span>,<span class="number">1</span>),(<span class="keyword">NULL</span>,<span class="string">&#x27;深圳&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改北京为北京市</span></span><br><span class="line"><span class="comment">-- 1.查询北京的version</span></span><br><span class="line"><span class="keyword">SELECT</span> VERSION <span class="keyword">FROM</span> city <span class="keyword">WHERE</span> NAME<span class="operator">=</span><span class="string">&#x27;北京&#x27;</span>;</span><br><span class="line"><span class="comment">-- 2.修改北京为北京市，版本号+1。并对比版本号</span></span><br><span class="line"><span class="keyword">UPDATE</span> city <span class="keyword">SET</span> NAME<span class="operator">=</span><span class="string">&#x27;北京市&#x27;</span>,VERSION<span class="operator">=</span>VERSION<span class="operator">+</span><span class="number">1</span> <span class="keyword">WHERE</span> NAME<span class="operator">=</span><span class="string">&#x27;北京&#x27;</span> <span class="keyword">AND</span> VERSION<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure></li><li><p>时间戳</p><ul><li>和版本号方式基本一样，给数据表中添加一个列，名称无所谓，数据类型需要是timestamp</li><li>每次更新后都将最新时间插入到此列。</li><li>读取数据时，将时间读取出来，在执行更新的时候，比较时间。</li><li>如果相同则执行更新，如果不相同，说明此条数据已经发生了变化。</li></ul></li></ul></li></ul><h3 id="6-锁的总结"><a href="#6-锁的总结" class="headerlink" title="6.锁的总结"></a>6.锁的总结</h3><ul><li><p>表锁和行锁</p><ul><li>行锁：锁的粒度更细，加行锁的性能损耗较大。并发处理能力较高。InnoDB引擎默认支持！</li><li>表锁：锁的粒度较粗，加表锁的性能损耗较小。并发处理能力较低。InnoDB、MyISAM引擎支持！</li></ul></li><li><p>InnoDB锁优化建议</p><ul><li><p>尽量通过带索引的列来完成数据查询，从而避免InnoDB无法加行锁而升级为表锁。</p></li><li><p>合理设计索引，索引要尽可能准确，尽可能的缩小锁定范围，避免造成不必要的锁定。</p></li><li><p>尽可能减少基于范围的数据检索过滤条件。</p></li><li><p>尽量控制事务的大小，减少锁定的资源量和锁定时间长度。</p></li><li><p>在同一个事务中，尽可能做到一次锁定所需要的所有资源，减少死锁产生概率。</p></li><li><p>对于非常容易产生死锁的业务部分，可以尝试使用升级锁定颗粒度，通过表级锁定来减少死锁的产生。</p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL索引</title>
      <link href="/2021/05/26/MySQL_5_MySQL%E7%B4%A2%E5%BC%95/"/>
      <url>/2021/05/26/MySQL_5_MySQL%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<h3 id="1-索引的概念"><a href="#1-索引的概念" class="headerlink" title="1.索引的概念"></a>1.索引的概念</h3><ul><li><p>MySQL数据库中的索引：是帮助MySQL高效获取数据的一种数据结构！所以，索引的本质就是数据结构。</p></li><li><p>在表数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式指向数据， 这样就可以在这些数据结构上实现高级查找算法，这种数据结构就是索引。</p></li></ul><span id="more"></span><ul><li><p>一张数据表，用于保存数据。   一个索引配置文件，用于保存索引，每个索引都去指向了某一个数据(表格演示)</p></li><li><p>举例，无索引和有索引的查找原理</p></li></ul><p><img src="https://gitee.com/andornot888/andornot_images/raw/master//imgs/MySQL5_1.png" alt="04"></p><h3 id="2-索引的分类"><a href="#2-索引的分类" class="headerlink" title="2.索引的分类"></a>2.索引的分类</h3><ul><li>功能分类 <ul><li>普通索引： 最基本的索引，它没有任何限制。</li><li>唯一索引：索引列的值必须唯一，但允许有空值。如果是组合索引，则列值组合必须唯一。</li><li>主键索引：一种特殊的唯一索引，不允许有空值。一般在建表时同时创建主键索引。</li><li>组合索引：顾名思义，就是将单列索引进行组合。</li><li>外键索引：只有InnoDB引擎支持外键索引，用来保证数据的一致性、完整性和实现级联操作。</li><li>全文索引：快速匹配全部文档的方式。InnoDB引擎5.6版本后才支持全文索引。MEMORY引擎不支持。</li></ul></li><li>结构分类<ul><li>B+Tree索引 ：MySQL使用最频繁的一个索引数据结构，是InnoDB和MyISAM存储引擎默认的索引类型。</li><li>Hash索引 : MySQL中Memory存储引擎默认支持的索引类型。</li></ul></li></ul><h3 id="3-索引的操作"><a href="#3-索引的操作" class="headerlink" title="3.索引的操作"></a>3.索引的操作</h3><ul><li>数据准备</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建db12数据库</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE db12;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用db12数据库</span></span><br><span class="line">USE db12;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建student表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student(</span><br><span class="line">id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">NAME <span class="type">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">age <span class="type">INT</span>,</span><br><span class="line">score <span class="type">INT</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 添加数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span> (<span class="keyword">NULL</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="number">23</span>,<span class="number">98</span>),(<span class="keyword">NULL</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="number">24</span>,<span class="number">95</span>),</span><br><span class="line">(<span class="keyword">NULL</span>,<span class="string">&#x27;王五&#x27;</span>,<span class="number">25</span>,<span class="number">96</span>),(<span class="keyword">NULL</span>,<span class="string">&#x27;赵六&#x27;</span>,<span class="number">26</span>,<span class="number">94</span>),(<span class="keyword">NULL</span>,<span class="string">&#x27;周七&#x27;</span>,<span class="number">27</span>,<span class="number">99</span>);</span><br></pre></td></tr></table></figure><ul><li>创建索引<ul><li>注意：如果一个表中有一列是主键，那么就会默认为其创建主键索引！(主键列不需要单独创建索引)</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 标准语法</span></span><br><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">UNIQUE</span><span class="operator">|</span>FULLTEXT] INDEX 索引名称</span><br><span class="line">[<span class="keyword">USING</span> 索引类型]  <span class="comment">-- 默认是B+TREE</span></span><br><span class="line"><span class="keyword">ON</span> 表名(列名...);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 为student表中姓名列创建一个普通索引</span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX idx_name <span class="keyword">ON</span> student(NAME);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 为student表中年龄列创建一个唯一索引</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> INDEX idx_age <span class="keyword">ON</span> student(age);</span><br></pre></td></tr></table></figure><ul><li>查看索引</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 标准语法</span></span><br><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> 表名;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看student表中的索引</span></span><br><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> student;</span><br></pre></td></tr></table></figure><ul><li>alter语句添加索引</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 普通索引</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> INDEX 索引名称(列名);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 组合索引</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> INDEX 索引名称(列名<span class="number">1</span>,列名<span class="number">2</span>,...);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 主键索引</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">PRIMARY</span> KEY(主键列名); </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 外键索引(添加外键约束，就是外键索引)</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> 外键名 <span class="keyword">FOREIGN</span> KEY (本表外键列名) <span class="keyword">REFERENCES</span> 主表名(主键列名);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 唯一索引</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> 索引名称(列名);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 全文索引(mysql只支持文本类型)</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> FULLTEXT 索引名称(列名);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 为student表中name列添加全文索引</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student <span class="keyword">ADD</span> FULLTEXT idx_fulltext_name(name);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看student表中的索引</span></span><br><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> student;</span><br></pre></td></tr></table></figure><ul><li>删除索引</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 标准语法</span></span><br><span class="line"><span class="keyword">DROP</span> INDEX 索引名称 <span class="keyword">ON</span> 表名;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除student表中的idx_score索引</span></span><br><span class="line"><span class="keyword">DROP</span> INDEX idx_score <span class="keyword">ON</span> student;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看student表中的索引</span></span><br><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> student;</span><br></pre></td></tr></table></figure><h3 id="4-索引效率的测试"><a href="#4-索引效率的测试" class="headerlink" title="4.索引效率的测试"></a>4.索引效率的测试</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建product商品表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> product(</span><br><span class="line">id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,  <span class="comment">-- 商品id</span></span><br><span class="line">NAME <span class="type">VARCHAR</span>(<span class="number">10</span>),    <span class="comment">-- 商品名称</span></span><br><span class="line">price <span class="type">INT</span>                           <span class="comment">-- 商品价格</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 定义存储函数，生成长度为10的随机字符串并返回</span></span><br><span class="line">DELIMITER $</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> rand_string() </span><br><span class="line"><span class="keyword">RETURNS</span> <span class="type">VARCHAR</span>(<span class="number">255</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> big_str <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIGKLMNOPQRSTUVWXYZ&#x27;</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> small_str <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> i <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">WHILE i <span class="operator">&lt;=</span> <span class="number">10</span> DO</span><br><span class="line"><span class="keyword">SET</span> small_str <span class="operator">=</span>CONCAT(small_str,<span class="built_in">SUBSTRING</span>(big_str,<span class="built_in">FLOOR</span>(<span class="number">1</span><span class="operator">+</span>RAND()<span class="operator">*</span><span class="number">52</span>),<span class="number">1</span>));</span><br><span class="line"><span class="keyword">SET</span> i<span class="operator">=</span>i<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">END</span> WHILE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">RETURN</span> small_str;</span><br><span class="line"><span class="keyword">END</span>$</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 定义存储过程，添加100万条数据到product表中</span></span><br><span class="line">DELIMITER $</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> pro_test()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> num <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">WHILE num <span class="operator">&lt;=</span> <span class="number">1000000</span> DO</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product <span class="keyword">VALUES</span> (<span class="keyword">NULL</span>,rand_string(),num);</span><br><span class="line"><span class="keyword">SET</span> num <span class="operator">=</span> num <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">END</span> WHILE;</span><br><span class="line"><span class="keyword">END</span>$</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 调用存储过程</span></span><br><span class="line"><span class="keyword">CALL</span> pro_test();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询总记录条数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> product;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询product表的索引</span></span><br><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> product;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询name为OkIKDLVwtG的数据   (0.049)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> NAME<span class="operator">=</span><span class="string">&#x27;OkIKDLVwtG&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 通过id列查询OkIKDLVwtG的数据  (1毫秒)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">999998</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 为name列添加索引</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> product <span class="keyword">ADD</span> INDEX idx_name(NAME);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询name为OkIKDLVwtG的数据   (0.001)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> NAME<span class="operator">=</span><span class="string">&#x27;OkIKDLVwtG&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">范围查询</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">-- 查询价格为800~1000之间的所有数据 (0.052)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> price <span class="keyword">BETWEEN</span> <span class="number">800</span> <span class="keyword">AND</span> <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">排序查询</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">-- 查询价格为800~1000之间的所有数据,降序排列  (0.083)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> price <span class="keyword">BETWEEN</span> <span class="number">800</span> <span class="keyword">AND</span> <span class="number">1000</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> price <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 为price列添加索引</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> product <span class="keyword">ADD</span> INDEX idx_price(price);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询价格为800~1000之间的所有数据 (0.011)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> price <span class="keyword">BETWEEN</span> <span class="number">800</span> <span class="keyword">AND</span> <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询价格为800~1000之间的所有数据,降序排列  (0.001)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> price <span class="keyword">BETWEEN</span> <span class="number">800</span> <span class="keyword">AND</span> <span class="number">1000</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> price <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><h3 id="5-索引的实现原则"><a href="#5-索引的实现原则" class="headerlink" title="5.索引的实现原则"></a>5.索引的实现原则</h3><ul><li>索引是在MySQL的存储引擎中实现的，所以每种存储引擎的索引不一定完全相同，也不是所有的引擎支持所有的索引类型。这里我们主要介绍InnoDB引擎的实现的<strong>B+Tree索引</strong>。</li><li>B+Tree是一种树型数据结构，是B-Tree的变种。通常使用在数据库和操作系统中的文件系统，特点是能够保持数据稳定有序。我们逐步的来了解一下。</li></ul><h4 id="5-1磁盘存储"><a href="#5-1磁盘存储" class="headerlink" title="5.1磁盘存储"></a>5.1磁盘存储</h4><ul><li>系统从磁盘读取数据到内存时是以磁盘块（block）为基本单位的</li><li>位于同一个磁盘块中的数据会被一次性读取出来，而不是需要什么取什么。</li><li>InnoDB存储引擎中有页（Page）的概念，页是其磁盘管理的最小单位。InnoDB存储引擎中默认每个页的大小为16KB。</li><li>InnoDB引擎将若干个地址连接磁盘块，以此来达到页的大小16KB，在查询数据时如果一个页中的每条数据都能有助于定位数据记录的位置，这将会减少磁盘I&#x2F;O次数，提高查询效率。</li></ul><h4 id="5-2BTree"><a href="#5-2BTree" class="headerlink" title="5.2BTree"></a>5.2BTree</h4><ul><li><p>BTree结构的数据可以让系统高效的找到数据所在的磁盘块。为了描述BTree，首先定义一条记录为一个二元组[key, data] ，key为记录的键值，对应表中的主键值，data为一行记录中除主键外的数据。对于不同的记录，key值互不相同。BTree中的每个节点根据实际情况可以包含大量的关键字信息和分支，如下图所示为一个3阶的BTree： </p><p><img src="https://gitee.com/andornot888/andornot_images/raw/master//imgs/MySQL5_2.png" alt="05"></p></li><li><p>根据图中结构显示，每个节点占用一个盘块的磁盘空间，一个节点上有两个升序排序的关键字和三个指向子树根节点的指针，指针存储的是子节点所在磁盘块的地址。两个关键词划分成的三个范围域对应三个指针指向的子树的数据的范围域。以根节点为例，关键字为17和35，P1指针指向的子树的数据范围为小于17，P2指针指向的子树的数据范围为17~35，P3指针指向的子树的数据范围为大于35。</p></li></ul><p>查找顺序：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">模拟查找<span class="number">15</span>的过程 : </span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>根节点找到磁盘块<span class="number">1</span>，读入内存。【磁盘I<span class="operator">/</span>O操作第<span class="number">1</span>次】</span><br><span class="line">比较关键字<span class="number">15</span>在区间（<span class="operator">&lt;</span><span class="number">17</span>），找到磁盘块<span class="number">1</span>的指针P1。</span><br><span class="line"><span class="number">2.</span>P1指针找到磁盘块<span class="number">2</span>，读入内存。【磁盘I<span class="operator">/</span>O操作第<span class="number">2</span>次】</span><br><span class="line">比较关键字<span class="number">15</span>在区间（<span class="operator">&gt;</span><span class="number">12</span>），找到磁盘块<span class="number">2</span>的指针P3。</span><br><span class="line"><span class="number">3.</span>P3指针找到磁盘块<span class="number">7</span>，读入内存。【磁盘I<span class="operator">/</span>O操作第<span class="number">3</span>次】</span><br><span class="line">在磁盘块<span class="number">7</span>中找到关键字<span class="number">15</span>。</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 分析上面过程，发现需要3次磁盘I/O操作，和3次内存查找操作。</span></span><br><span class="line"><span class="comment">-- 由于内存中的关键字是一个有序表结构，可以利用二分法查找提高效率。而3次磁盘I/O操作是影响整个BTree查找效率的决定因素。BTree使用较少的节点个数，使每次磁盘I/O取到内存的数据都发挥了作用，从而提高了查询效率。</span></span><br></pre></td></tr></table></figure><h4 id="5-3B-Tree"><a href="#5-3B-Tree" class="headerlink" title="5.3B+Tree"></a>5.3B+Tree</h4><ul><li>B+Tree是在BTree基础上的一种优化，使其更适合实现外存储索引结构，InnoDB存储引擎就是用B+Tree实现其索引结构。</li><li>从上一节中的BTree结构图中可以看到每个节点中不仅包含数据的key值，还有data值。而每一个页的存储空间是有限的，如果data数据较大时将会导致每个节点              （即一个页）能存储的key的数量很小，当存储的数据量很大时同样会导致B-Tree的深度较大，增大查询时的磁盘I&#x2F;O次数，进而影响查询效率。在B+Tree中，所有数据记录节点都是按照键值大小顺序存放在同一层的叶子节点上，而非叶子节点上只存储key值信息，这样可以大大加大每个节点存储的key值数量，降低B+Tree的高度。</li><li>B+Tree相对于BTree区别：<ul><li>非叶子节点只存储键值信息。</li><li>所有叶子节点之间都有一个连接指针。</li><li>数据记录都存放在叶子节点中。</li></ul></li><li>将上一节中的BTree优化，由于B+Tree的非叶子节点只存储键值信息，假设每个磁盘块能存储4个键值及指针信息，则变成B+Tree后其结构如下图所示：</li></ul><p><img src="https://gitee.com/andornot888/andornot_images/raw/master//imgs/MySQL5_3.png" alt="06"></p><p>通常在B+Tree上有两个头指针，一个指向根节点，另一个指向关键字最小的叶子节点，而且所有叶子节点（即数据节点）之间是一种链式环结构。因此可以对B+Tree进行两种查找运算：</p><ul><li>【有范围】对于主键的范围查找和分页查找</li><li>【有顺序】从根节点开始，进行随机查找</li></ul><p>实际情况中每个节点可能不能填充满，因此在数据库中，B+Tree的高度一般都在2~4层。MySQL的InnoDB存储引擎在设计时是将根节点常驻内存的，也就是说查找某一键值的行记录时最多只需要1~3次磁盘I&#x2F;O操作。</p><h3 id="6-总结：索引的设计原则"><a href="#6-总结：索引的设计原则" class="headerlink" title="6.总结：索引的设计原则"></a>6.总结：索引的设计原则</h3><p>索引的设计可以遵循一些已有的原则，创建索引的时候请尽量考虑符合这些原则，便于提升索引的使用效率，更高效的使用索引。</p><ul><li>创建索引时的原则<ul><li>对查询频次较高，且数据量比较大的表建立索引。</li><li>使用唯一索引，区分度越高，使用索引的效率越高。</li><li>索引字段的选择，最佳候选列应当从where子句的条件中提取，如果where子句中的组合比较多，那么应当挑选最常用、过滤效果最好的列的组合。</li><li>使用短索引，索引创建之后也是使用硬盘来存储的，因此提升索引访问的I&#x2F;O效率，也可以提升总体的访问效率。假如构成索引的字段总长度比较短，那么在给定大小的存储块内可以存储更多的索引值，相应的可以有效的提升MySQL访问索引的I&#x2F;O效率。</li><li>索引可以有效的提升查询数据的效率，但索引数量不是多多益善，索引越多，维护索引的代价自然也就水涨船高。对于插入、更新、删除等DML操作比较频繁的表来说，索引过多，会引入相当高的维护代价，降低DML操作的效率，增加相应操作的时间消耗。另外索引过多的话，MySQL也会犯选择困难病，虽然最终仍然会找到一个可用的索引，但无疑提高了选择的代价。</li></ul></li><li>联合索引的特点</li></ul><p>在mysql建立联合索引时会遵循最左前缀匹配的原则，即最左优先，在检索数据时从联合索引的最左边开始匹配，<br>对列name列、address和列phone列建一个联合索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> <span class="keyword">ADD</span> INDEX index_three(name,address,phone);</span><br></pre></td></tr></table></figure><p>联合索引index_three实际建立了(name)、(name,address)、(name,address,phone)三个索引。所以下面的三个SQL语句都可以命中索引。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> address <span class="operator">=</span> <span class="string">&#x27;北京&#x27;</span> <span class="keyword">AND</span> phone <span class="operator">=</span> <span class="string">&#x27;12345&#x27;</span> <span class="keyword">AND</span> name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span> <span class="keyword">AND</span> address <span class="operator">=</span> <span class="string">&#x27;北京&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>;</span><br></pre></td></tr></table></figure><p>上面三个查询语句执行时会依照最左前缀匹配原则，检索时分别会使用索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(name,address,phone)</span><br><span class="line">(name,address)</span><br><span class="line">(name)</span><br></pre></td></tr></table></figure><p>进行数据匹配。</p><p>索引的字段可以是任意顺序的，如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 优化器会帮助我们调整顺序，下面的SQL语句都可以命中索引</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> address <span class="operator">=</span> <span class="string">&#x27;北京&#x27;</span> <span class="keyword">AND</span> phone <span class="operator">=</span> <span class="string">&#x27;12345&#x27;</span> <span class="keyword">AND</span> name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>;</span><br></pre></td></tr></table></figure><p>Mysql的优化器会帮助我们调整where条件中的顺序，以匹配我们建立的索引。</p><p>联合索引中最左边的列不包含在条件查询中，所以根据上面的原则，下面的SQL语句就不会命中索引。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 联合索引中最左边的列不包含在条件查询中，下面的SQL语句就不会命中索引</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> address <span class="operator">=</span> <span class="string">&#x27;北京&#x27;</span> <span class="keyword">AND</span> phone <span class="operator">=</span> <span class="string">&#x27;12345&#x27;</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL存储引擎</title>
      <link href="/2021/05/25/MySQL_4_MySQL%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/"/>
      <url>/2021/05/25/MySQL_4_MySQL%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</url>
      
        <content type="html"><![CDATA[<h3 id="1-MySQL体系结构"><a href="#1-MySQL体系结构" class="headerlink" title="1.MySQL体系结构"></a>1.MySQL体系结构</h3><ul><li>MySQL的体系结构</li></ul><p><img src="https://gitee.com/andornot888/andornot_images/raw/master//imgs/MySQL4_1.png" alt="02"></p><span id="more"></span><ul><li>体系结构详解<ul><li>客户端连接<ul><li>支持接口：支持的客户端连接，例如C、Java、PHP等语言来连接MySQL数据库</li></ul></li><li>第一层：网络连接层<ul><li>连接池：管理、缓冲用户的连接，线程处理等需要缓存的需求。</li><li>例如：当客户端发送一个请求连接，会从连接池中获取一个连接进行使用。</li></ul></li><li>第二层：核心服务层<ul><li>管理服务和工具：系统的管理和控制工具，例如备份恢复、复制、集群等。 </li><li>SQL接口：接受SQL命令，并且返回查询结果。</li><li>查询解析器：验证和解析SQL命令，例如过滤条件、语法结构等。 </li><li>查询优化器：在执行查询之前，使用默认的一套优化机制进行优化sql语句</li><li>缓存：如果缓存当中有想查询的数据，则直接将缓存中的数据返回。没有的话再重新查询！</li></ul></li><li>第三层：存储引擎层<ul><li>插件式存储引擎：管理和操作数据的一种机制，包括(存储数据、如何更新、查询数据等)</li></ul></li><li>第四层：系统文件层<ul><li>文件系统：配置文件、数据文件、日志文件、错误文件、二进制文件等等的保存</li></ul></li></ul></li></ul><h3 id="2-MySQL存储引擎"><a href="#2-MySQL存储引擎" class="headerlink" title="2.MySQL存储引擎"></a>2.MySQL存储引擎</h3><ul><li><p>引擎的概念</p><ul><li>生活中，引擎就是整个机器运行的核心，不同的引擎具备不同的功能。</li></ul></li><li><p>MySQL存储引擎的概念</p><ul><li>MySQL数据库使用不同的机制存取表文件 , 机制的差别在于不同的存储方式、索引技巧、锁定水平以及广泛的不同的功能和能力，在MySQL中 , 将这些不同的技术及配套的功能称为<strong>存储引擎</strong></li><li>在关系型数据库中数据的存储是以表的形式存进行储的，所以存储引擎也可以称为<strong>表类型</strong>（即存储和操作此表的类型）。</li><li>Oracle , SqlServer等数据库只有一种存储引擎 , 而MySQL针对不同的需求, 配置MySQL的不同的存储引擎 , 就会让数据库采取了不同的处理数据的方式和扩展功能。</li><li>通过选择不同的引擎 ,能够获取最佳的方案 ,  也能够获得额外的速度或者功能，提高程序的整体效果。所以了解引擎的特性 , 才能贴合我们的需求 , 更好的发挥数据库的性能。</li></ul></li><li><p>MySQL支持的存储引擎</p><ul><li>MySQL5.7支持的引擎包括：InnoDB、MyISAM、MEMORY、Archive、Federate、CSV、BLACKHOLE等</li><li>其中较为常用的有三种：InnoDB、MyISAM、MEMORY</li></ul></li></ul><h3 id="3-常用引擎的特性对比"><a href="#3-常用引擎的特性对比" class="headerlink" title="3.常用引擎的特性对比"></a>3.常用引擎的特性对比</h3><ul><li>常用的存储引擎<ul><li>MyISAM存储引擎<ul><li>访问快,不支持事务和外键。表结构保存在.frm文件中，表数据保存在.MYD文件中，索引保存在.MYI文件中。</li></ul></li><li>InnoDB存储引擎(MySQL5.5版本后默认的存储引擎)<ul><li>支持事务 ,占用磁盘空间大 ,支持并发控制。表结构保存在.frm文件中，如果是共享表空间，数据和索引保存在 innodb_data_home_dir 和 innodb_data_file_path定义的表空间中，可以是多个文件。如果是多表空间存储，每个表的数据和索引单独保存在 .ibd 中。</li></ul></li><li>MEMORY存储引擎<ul><li>内存存储 , 速度快 ,不安全 ,适合小量快速访问的数据。表结构保存在.frm中。</li></ul></li></ul></li><li>特性对比</li></ul><table><thead><tr><th>特性</th><th>MyISAM</th><th>InnoDB</th><th>MEMORY</th></tr></thead><tbody><tr><td>存储限制</td><td>有(平台对文件系统大小的限制)</td><td>64TB</td><td>有(平台的内存限制)</td></tr><tr><td><strong>事务安全</strong></td><td><strong>不支持</strong></td><td><strong>支持</strong></td><td><strong>不支持</strong></td></tr><tr><td><strong>锁机制</strong></td><td><strong>表锁</strong></td><td><strong>表锁&#x2F;行锁</strong></td><td><strong>表锁</strong></td></tr><tr><td>B+Tree索引</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>哈希索引</td><td>不支持</td><td>不支持</td><td>支持</td></tr><tr><td>全文索引</td><td>支持</td><td>支持</td><td>不支持</td></tr><tr><td><strong>集群索引</strong></td><td><strong>不支持</strong></td><td><strong>支持</strong></td><td><strong>不支持</strong></td></tr><tr><td>数据索引</td><td>不支持</td><td>支持</td><td>支持</td></tr><tr><td>数据缓存</td><td>不支持</td><td>支持</td><td>N&#x2F;A</td></tr><tr><td>索引缓存</td><td>支持</td><td>支持</td><td>N&#x2F;A</td></tr><tr><td>数据可压缩</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>空间使用</td><td>低</td><td>高</td><td>N&#x2F;A</td></tr><tr><td>内存使用</td><td>低</td><td>高</td><td>中等</td></tr><tr><td>批量插入速度</td><td>高</td><td>低</td><td>高</td></tr><tr><td><strong>外键</strong></td><td><strong>不支持</strong></td><td><strong>支持</strong></td><td><strong>不支持</strong></td></tr></tbody></table><h3 id="4-引擎的操作"><a href="#4-引擎的操作" class="headerlink" title="4.引擎的操作"></a>4.引擎的操作</h3><ul><li>查询数据库支持的引擎</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 标准语法</span></span><br><span class="line"><span class="keyword">SHOW</span> ENGINES;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询数据库支持的存储引擎</span></span><br><span class="line"><span class="keyword">SHOW</span> ENGINES;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 表含义:</span></span><br><span class="line">  <span class="operator">-</span> support : 指服务器是否支持该存储引擎</span><br><span class="line">  <span class="operator">-</span> transactions : 指存储引擎是否支持事务</span><br><span class="line">  <span class="operator">-</span> XA : 指存储引擎是否支持分布式事务处理</span><br><span class="line">  <span class="operator">-</span> Savepoints : 指存储引擎是否支持保存点</span><br></pre></td></tr></table></figure><ul><li>查询某个数据库中所有数据表的引擎</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 标准语法</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">TABLE</span> STATUS <span class="keyword">FROM</span> 数据库名称;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看db9数据库所有表的存储引擎</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">TABLE</span> STATUS <span class="keyword">FROM</span> db9;</span><br></pre></td></tr></table></figure><ul><li>查询某个数据库中某个数据表的引擎</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 标准语法</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">TABLE</span> STATUS <span class="keyword">FROM</span> 数据库名称 <span class="keyword">WHERE</span> NAME <span class="operator">=</span> <span class="string">&#x27;数据表名称&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看db9数据库中stu_score表的存储引擎</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">TABLE</span> STATUS <span class="keyword">FROM</span> db9 <span class="keyword">WHERE</span> NAME <span class="operator">=</span> <span class="string">&#x27;stu_score&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>创建数据表，指定存储引擎</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 标准语法</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">列名,数据类型,</span><br><span class="line">    ...</span><br><span class="line">)ENGINE <span class="operator">=</span> 引擎名称;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建db11数据库</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE db11;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用db11数据库</span></span><br><span class="line">USE db11;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建engine_test表，指定存储引擎为MyISAM</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> engine_test(</span><br><span class="line">id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">NAME <span class="type">VARCHAR</span>(<span class="number">10</span>)</span><br><span class="line">)ENGINE <span class="operator">=</span> MYISAM;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询engine_test表的引擎</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">TABLE</span> STATUS <span class="keyword">FROM</span> db11 <span class="keyword">WHERE</span> NAME <span class="operator">=</span> <span class="string">&#x27;engine_test&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>修改表的存储引擎</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 标准语法</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 ENGINE <span class="operator">=</span> 引擎名称;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改engine_test表的引擎为InnoDB</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> engine_test ENGINE <span class="operator">=</span> INNODB;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询engine_test表的引擎</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">TABLE</span> STATUS <span class="keyword">FROM</span> db11 <span class="keyword">WHERE</span> NAME <span class="operator">=</span> <span class="string">&#x27;engine_test&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="5-总结：引擎的选择"><a href="#5-总结：引擎的选择" class="headerlink" title="5.总结：引擎的选择"></a>5.总结：引擎的选择</h3><ul><li>MyISAM ：由于MyISAM不支持事务、不支持外键、支持全文检索和表级锁定，读写相互阻塞，读取速度快，节约资源，所以如果应用是以<strong>查询操作</strong>和<strong>插入操作</strong>为主，只有很少的<strong>更新和删除</strong>操作，并且对事务的完整性、并发性要求不是很高，那么选择这个存储引擎是非常合适的。</li><li>InnoDB : 是MySQL的默认存储引擎， 由于InnoDB支持事务、支持外键、行级锁定 ，支持所有辅助索引(5.5.5后不支持全文检索)，高缓存，所以用于对事务的完整性有比较高的要求，在并发条件下要求数据的一致性，读写频繁的操作，那么InnoDB存储引擎是比较合适的选择，比如BBS、计费系统、充值转账等</li><li>MEMORY：将所有数据保存在RAM中，在需要快速定位记录和其他类似数据环境下，可以提供更快的访问。MEMORY的缺陷就是对表的大小有限制，太大的表无法缓存在内存中，其次是要确保表的数据可以恢复，数据库异常终止后表中的数据是可以恢复的。MEMORY表通常用于更新不太频繁的小表，用以快速得到访问结果。</li><li>总结：针对不同的需求场景，来选择最适合的存储引擎即可！如果不确定、则使用数据库默认的存储引擎！</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL事务</title>
      <link href="/2021/05/24/MySQL_3_MySQL%E4%BA%8B%E5%8A%A1/"/>
      <url>/2021/05/24/MySQL_3_MySQL%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h3 id="1-事务的概念"><a href="#1-事务的概念" class="headerlink" title="1.事务的概念"></a>1.事务的概念</h3><p> 一条或多条 SQL 语句组成一个执行单元，其特点是这个单元要么同时成功要么同时失败，单元中的每条 SQL 语句都相互依赖，形成一个整体，如果某条 SQL 语句执行失败或者出现错误，那么整个单元就会回滚，撤回到事务最初的状态，如果单元中所有的 SQL 语句都执行成功，则事务就顺利执行。</p><span id="more"></span><h3 id="2-事务的数据准备"><a href="#2-事务的数据准备" class="headerlink" title="2.事务的数据准备"></a>2.事务的数据准备</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建db10数据库</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE db10;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用db10数据库</span></span><br><span class="line">USE db10;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建账户表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> account(</span><br><span class="line">id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,<span class="comment">-- 账户id</span></span><br><span class="line">NAME <span class="type">VARCHAR</span>(<span class="number">20</span>),<span class="comment">-- 账户名称</span></span><br><span class="line">money <span class="keyword">DOUBLE</span><span class="comment">-- 账户余额</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 添加数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> account <span class="keyword">VALUES</span> (<span class="keyword">NULL</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="number">1000</span>),(<span class="keyword">NULL</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h3 id="3-未管理事务演示"><a href="#3-未管理事务演示" class="headerlink" title="3.未管理事务演示"></a>3.未管理事务演示</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 张三给李四转账500元</span></span><br><span class="line"><span class="comment">-- 1.张三账户-500</span></span><br><span class="line"><span class="keyword">UPDATE</span> account <span class="keyword">SET</span> money<span class="operator">=</span>money<span class="number">-500</span> <span class="keyword">WHERE</span> NAME<span class="operator">=</span><span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"><span class="comment">-- 2.李四账户+500</span></span><br><span class="line">出错了...</span><br><span class="line"><span class="keyword">UPDATE</span> account <span class="keyword">SET</span> money<span class="operator">=</span>money<span class="operator">+</span><span class="number">500</span> <span class="keyword">WHERE</span> NAME<span class="operator">=</span><span class="string">&#x27;李四&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 该场景下，这两条sql语句要么同时成功，要么同时失败。就需要被事务所管理！</span></span><br></pre></td></tr></table></figure><h3 id="4-管理事务演示"><a href="#4-管理事务演示" class="headerlink" title="4.管理事务演示"></a>4.管理事务演示</h3><ul><li>操作事务的三个步骤<ol><li>开启事务：记录回滚点，并通知服务器，将要执行一组操作，要么同时成功、要么同时失败</li><li>执行sql语句：执行具体的一条或多条sql语句</li><li>结束事务(提交|回滚)<ul><li>提交：没出现问题，数据进行更新</li><li>回滚：出现问题，数据恢复到开启事务时的状态</li></ul></li></ol></li><li>开启事务</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 标准语法</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br></pre></td></tr></table></figure><ul><li>回滚事务</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 标准语法</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br></pre></td></tr></table></figure><ul><li>提交事务</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 标准语法</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><ul><li>管理事务演示</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 开启事务</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 张三给李四转账500元</span></span><br><span class="line"><span class="comment">-- 1.张三账户-500</span></span><br><span class="line"><span class="keyword">UPDATE</span> account <span class="keyword">SET</span> money<span class="operator">=</span>money<span class="number">-500</span> <span class="keyword">WHERE</span> NAME<span class="operator">=</span><span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"><span class="comment">-- 2.李四账户+500</span></span><br><span class="line"><span class="comment">-- 出错了...</span></span><br><span class="line"><span class="keyword">UPDATE</span> account <span class="keyword">SET</span> money<span class="operator">=</span>money<span class="operator">+</span><span class="number">500</span> <span class="keyword">WHERE</span> NAME<span class="operator">=</span><span class="string">&#x27;李四&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 回滚事务(出现问题)</span></span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 提交事务(没出现问题)</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><h3 id="5-事务的提交方式"><a href="#5-事务的提交方式" class="headerlink" title="5.事务的提交方式"></a>5.事务的提交方式</h3><ul><li><p>提交方式</p><ul><li>自动提交(MySQL默认为自动提交)</li><li>手动提交</li></ul></li><li><p>修改提交方式</p><ul><li>查看提交方式</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 标准语法</span></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@AUTOCOMMIT</span>;  <span class="comment">-- 1代表自动提交    0代表手动提交</span></span><br></pre></td></tr></table></figure><ul><li>修改提交方式</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 标准语法</span></span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@AUTOCOMMIT</span><span class="operator">=</span>数字;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改为手动提交</span></span><br><span class="line"><span class="keyword">SET</span> @<span class="variable">@AUTOCOMMIT</span><span class="operator">=</span><span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看提交方式</span></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@AUTOCOMMIT</span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="6-事务的四大特征-ACID"><a href="#6-事务的四大特征-ACID" class="headerlink" title="6.事务的四大特征(ACID)"></a>6.事务的四大特征(ACID)</h3><ul><li>原子性(atomicity)<ul><li>原子性是指事务包含的所有操作要么全部成功，要么全部失败回滚，因此事务的操作如果成功就必须要完全应用到数据库，如果操作失败则不能对数据库有任何影响</li></ul></li><li>一致性(consistency)<ul><li>一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态</li><li>拿转账来说，假设张三和李四两者的钱加起来一共是2000，那么不管A和B之间如何转账，转几次账，事务结束后两个用户的钱相加起来应该还得是2000，这就是事务的一致性</li></ul></li><li>隔离性(isolcation)<ul><li>隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离</li></ul></li><li>持久性(durability)<ul><li>持久性是指一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作</li></ul></li></ul><h3 id="7-事务的隔离级别"><a href="#7-事务的隔离级别" class="headerlink" title="7.事务的隔离级别"></a>7.事务的隔离级别</h3><ul><li>隔离级别的概念<ul><li>多个客户端操作时 ,各个客户端的事务之间应该是隔离的，相互独立的 , 不受影响的。</li><li>而如果多个事务操作同一批数据时，则需要设置不同的隔离级别 , 否则就会产生问题 。</li><li>我们先来了解一下四种隔离级别的名称 , 再来看看可能出现的问题</li></ul></li><li>四种隔离级别</li></ul><table><thead><tr><th>1</th><th>读未提交</th><th>read uncommitted</th></tr></thead><tbody><tr><td><strong>2</strong></td><td><strong>读已提交</strong></td><td><strong>read committed</strong></td></tr><tr><td><strong>3</strong></td><td><strong>可重复读</strong></td><td><strong>repeatable read</strong></td></tr><tr><td><strong>4</strong></td><td><strong>串行化</strong></td><td><strong>serializable</strong></td></tr></tbody></table><ul><li>可能引发的问题</li></ul><table><thead><tr><th>问题</th><th>现象</th></tr></thead><tbody><tr><td><strong>脏读</strong></td><td><strong>是指在一个事务处理过程中读取了另一个未提交的事务中的数据 , 导致两次查询结果不一致</strong></td></tr><tr><td><strong>不可重复读</strong></td><td><strong>是指在一个事务处理过程中读取了另一个事务中修改并已提交的数据, 导致两次查询结果不一致</strong></td></tr><tr><td><strong>幻读</strong></td><td><strong>select 某记录是否存在，不存在，准备插入此记录，但执行 insert 时发现此记录已存在，无法插入。或不存在执行delete删除，却发现删除成功</strong></td></tr></tbody></table><ul><li>查询数据库隔离级别</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 标准语法</span></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@TX</span>_ISOLATION;</span><br></pre></td></tr></table></figure><ul><li>修改数据库隔离级别</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 标准语法</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> TRANSACTION ISOLATION LEVEL 级别字符串;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改数据库隔离级别为read uncommitted</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> TRANSACTION ISOLATION LEVEL read uncommitted;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看隔离级别</span></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@TX</span>_ISOLATION;   <span class="comment">-- 修改后需要断开连接重新开</span></span><br></pre></td></tr></table></figure><h3 id="8-事务隔离级别演示"><a href="#8-事务隔离级别演示" class="headerlink" title="8.事务隔离级别演示"></a>8.事务隔离级别演示</h3><ul><li><p>脏读的问题</p><ul><li>窗口1</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询账户表</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 设置隔离级别为read uncommitted</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> transaction isolation level read uncommitted;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 开启事务</span></span><br><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 转账</span></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">-</span> <span class="number">500</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">+</span> <span class="number">500</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 窗口2查询转账结果 ,出现脏读(查询到其他事务未提交的数据)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 窗口2查看转账结果后，执行回滚</span></span><br><span class="line"><span class="keyword">rollback</span>;</span><br></pre></td></tr></table></figure><ul><li>窗口2</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询隔离级别</span></span><br><span class="line"><span class="keyword">select</span> @<span class="variable">@tx</span>_isolation;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 开启事务</span></span><br><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询账户表</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account;</span><br></pre></td></tr></table></figure></li><li><p>解决脏读的问题和演示不可重复读的问题</p><ul><li>窗口1</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 设置隔离级别为read committed</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> transaction isolation level read committed;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 开启事务</span></span><br><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 转账</span></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">-</span> <span class="number">500</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">+</span> <span class="number">500</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 窗口2查看转账结果，并没有发生变化(脏读问题被解决了)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 执行提交事务。</span></span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 窗口2查看转账结果，数据发生了变化(出现了不可重复读的问题，读取到其他事务已提交的数据)</span></span><br></pre></td></tr></table></figure><ul><li>窗口2</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询隔离级别</span></span><br><span class="line"><span class="keyword">select</span> @<span class="variable">@tx</span>_isolation;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 开启事务</span></span><br><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询账户表</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account;</span><br></pre></td></tr></table></figure></li><li><p>解决不可重复读的问题</p><ul><li>窗口1</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 设置隔离级别为repeatable read</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> transaction isolation level repeatable read;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 开启事务</span></span><br><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 转账</span></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">-</span> <span class="number">500</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">+</span> <span class="number">500</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 窗口2查看转账结果，并没有发生变化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 执行提交事务</span></span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 这个时候窗口2只要还在上次事务中，看到的结果都是相同的。只有窗口2结束事务，才能看到变化(不可重复读的问题被解决)</span></span><br></pre></td></tr></table></figure><ul><li>窗口2</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询隔离级别</span></span><br><span class="line"><span class="keyword">select</span> @<span class="variable">@tx</span>_isolation;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 开启事务</span></span><br><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询账户表</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 提交事务</span></span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询账户表</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account;</span><br></pre></td></tr></table></figure></li><li><p>幻读的问题和解决</p><ul><li>窗口1</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 设置隔离级别为repeatable read</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> transaction isolation level repeatable read;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 开启事务</span></span><br><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加一条记录</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> account <span class="keyword">VALUES</span> (<span class="number">3</span>,<span class="string">&#x27;王五&#x27;</span>,<span class="number">1500</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询账户表，本窗口可以查看到id为3的结果</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> account;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 提交事务</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><ul><li>窗口2</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询隔离级别</span></span><br><span class="line"><span class="keyword">select</span> @<span class="variable">@tx</span>_isolation;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 开启事务</span></span><br><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询账户表，查询不到新添加的id为3的记录</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加id为3的一条数据，发现添加失败。出现了幻读</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> account <span class="keyword">VALUES</span> (<span class="number">3</span>,<span class="string">&#x27;测试&#x27;</span>,<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 提交事务</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询账户表，查询到了新添加的id为3的记录</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account;</span><br></pre></td></tr></table></figure><ul><li>解决幻读的问题</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">窗口1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">-- 设置隔离级别为serializable</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> transaction isolation level serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 开启事务</span></span><br><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加一条记录</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> account <span class="keyword">VALUES</span> (<span class="number">4</span>,<span class="string">&#x27;赵六&#x27;</span>,<span class="number">1600</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询账户表，本窗口可以查看到id为4的结果</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> account;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 提交事务</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">窗口2</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">-- 查询隔离级别</span></span><br><span class="line"><span class="keyword">select</span> @<span class="variable">@tx</span>_isolation;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 开启事务</span></span><br><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询账户表，发现查询语句无法执行，数据表被锁住！只有窗口1提交事务后，才可以继续操作</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加id为4的一条数据，发现已经存在了，就不会再添加了！幻读的问题被解决</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> account <span class="keyword">VALUES</span> (<span class="number">4</span>,<span class="string">&#x27;测试&#x27;</span>,<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 提交事务</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="9-隔离级别总结"><a href="#9-隔离级别总结" class="headerlink" title="9.隔离级别总结"></a>9.隔离级别总结</h3><table><thead><tr><th></th><th>隔离级别</th><th>名称</th><th>出现脏读</th><th>出现不可重复读</th><th>出现幻读</th><th>数据库默认隔离级别</th></tr></thead><tbody><tr><td>1</td><td><strong>read uncommitted</strong></td><td>读未提交</td><td>是</td><td>是</td><td>是</td><td></td></tr><tr><td>2</td><td><strong>read committed</strong></td><td>读已提交</td><td>否</td><td>是</td><td>是</td><td>Oracle &#x2F; SQL Server</td></tr><tr><td>3</td><td><strong>repeatable read</strong></td><td>可重复读</td><td>否</td><td>否</td><td>是</td><td>MySQL</td></tr><tr><td>4</td><td>**serializable **</td><td>串行化</td><td>否</td><td>否</td><td>否</td><td></td></tr></tbody></table><blockquote><p>注意：隔离级别从小到大安全性越来越高，但是效率越来越低 , 所以不建议使用READ UNCOMMITTED 和 SERIALIZABLE 隔离级别.</p></blockquote><h3 id="10-事务的总结"><a href="#10-事务的总结" class="headerlink" title="10.事务的总结"></a>10.事务的总结</h3><ul><li>一条或多条 SQL 语句组成一个执行单元，其特点是这个单元要么同时成功要么同时失败。例如转账操作</li><li>开启事务：start transaction;</li><li>回滚事务：rollback;</li><li>提交事务：commit;</li><li>事务四大特征<ul><li>原子性</li><li>持久性</li><li>隔离性</li><li>一致性</li></ul></li><li>事务的隔离级别<ul><li>read uncommitted(读未提交)</li><li>read committed (读已提交)</li><li>repeatable read (可重复读)</li><li>serializable (串行化)</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>update联合更新</title>
      <link href="/2021/05/18/MySQL_2_update%E8%81%94%E5%90%88%E6%9B%B4%E6%96%B0/"/>
      <url>/2021/05/18/MySQL_2_update%E8%81%94%E5%90%88%E6%9B%B4%E6%96%B0/</url>
      
        <content type="html"><![CDATA[<p>  更新处理数据时，单表联合更新出现错误：</p><blockquote><p>1093 - You can’t specify target table ‘a’ for update in FROM clause</p></blockquote><span id="more"></span><p>多表联合更新正常</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> mz_xzjg </span><br><span class="line"><span class="keyword">SET</span> DEFSTR11 <span class="operator">=</span> ( <span class="keyword">SELECT</span> 区划编码 <span class="keyword">FROM</span> `sheet1` <span class="keyword">WHERE</span> sheet1.`区划名称` <span class="operator">=</span> mz_xzjg.DEFSTR13 ) </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">NODE_LEVEL <span class="operator">&lt;</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><p>当单表联合时报错误提示，不能在FROM子句中指定更新的目标表’a’  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 错误用法</span></span><br><span class="line"><span class="keyword">UPDATE</span> mz_xzjg a </span><br><span class="line"><span class="keyword">SET</span> a.DEFSTR11 <span class="operator">=</span> ( <span class="keyword">SELECT</span> b.DEFSTR11 <span class="keyword">FROM</span> `mz_xzjg` b <span class="keyword">WHERE</span> b.XZQH_ID <span class="operator">=</span> a.node_pid ) </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">NODE_LEVEL <span class="operator">=</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><p>复制了一张<code>mz_xzjg</code>表<code>mz_xzjg_copy1</code>,没有报错</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> mz_xzjg a </span><br><span class="line"><span class="keyword">SET</span> a.DEFSTR11 <span class="operator">=</span> ( <span class="keyword">SELECT</span> b.DEFSTR11 <span class="keyword">FROM</span> `mz_xzjg_copy1` b <span class="keyword">WHERE</span> b.XZQH_ID <span class="operator">=</span> a.node_pid ) </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">NODE_LEVEL <span class="operator">=</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><p><code>mz_xzjg_copy1</code>相当于一张临时表，直接SELECT</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> mz_xzjg a </span><br><span class="line"><span class="keyword">SET</span> a.DEFSTR11 <span class="operator">=</span> ( <span class="keyword">SELECT</span> b.DEFSTR11 <span class="keyword">FROM</span> ( <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `mz_xzjg` ) b <span class="keyword">WHERE</span> b.XZQH_ID <span class="operator">=</span> a.node_pid ) </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">NODE_LEVEL <span class="operator">=</span> <span class="number">4</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>exists和in的区别</title>
      <link href="/2021/05/17/MySQL_1_ExistsAndIn/"/>
      <url>/2021/05/17/MySQL_1_ExistsAndIn/</url>
      
        <content type="html"><![CDATA[<p>in是把外表和内表作hash连接，而exists是对外表作loop循环，每次loop循环再对内表进行查询，一直以来认为exists比in效率高的说法是不准确的。</p><span id="more"></span><h2 id="1、in和exists"><a href="#1、in和exists" class="headerlink" title="1、in和exists"></a>1、in和exists</h2><p>　外表大，用IN；内表大，用EXISTS；</p><p>　　原理：</p><p>　　用in：外表使用了索引，直接作hash连接；</p><p>　　用exists：内表使用了索引，外表作loop循环再进行匹配；</p><p>例如：表A(小表)，表B(大表)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> A <span class="keyword">where</span> cc <span class="keyword">in</span>(<span class="keyword">select</span> cc <span class="keyword">from</span> B)　　<span class="comment">--&gt;效率低，用到了A表上cc列的索引；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> A <span class="keyword">where</span> <span class="keyword">exists</span>(<span class="keyword">select</span> cc <span class="keyword">from</span> B <span class="keyword">where</span> cc<span class="operator">=</span>A.cc)　　<span class="comment">--&gt;效率高，用到了B表上cc列的索引。</span></span><br></pre></td></tr></table></figure><p>相反的：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> B <span class="keyword">where</span> cc <span class="keyword">in</span>(<span class="keyword">select</span> cc <span class="keyword">from</span> A)　　<span class="comment">--&gt;效率高，用到了B表上cc列的索引</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> B <span class="keyword">where</span> <span class="keyword">exists</span>(<span class="keyword">select</span> cc <span class="keyword">from</span> A <span class="keyword">where</span> cc<span class="operator">=</span>B.cc)　　<span class="comment">--&gt;效率低，用到了A表上cc列的索引。</span></span><br></pre></td></tr></table></figure><h2 id="2、not-in-和not-exists"><a href="#2、not-in-和not-exists" class="headerlink" title="2、not in 和not exists"></a>2、not in 和not exists</h2><p>　性能：not in不走索引，所以一般都用not exists；</p><p>​    区别：还有一点区别就是，not in字段为null的不进行筛选出来；而使用not exists即可；</p><p>　这也就是说有时定义字段，用not null比较好了，这样也能避免not in查询出错。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> #t1(c1 <span class="type">int</span>,c2 <span class="type">int</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> #t2(c1 <span class="type">int</span>,c2 <span class="type">int</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> #t1 <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> #t1 <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> #t2 <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> #t2 <span class="keyword">values</span>(<span class="number">1</span>,<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> #t1 <span class="keyword">where</span> c2 <span class="keyword">not</span> <span class="keyword">in</span>(<span class="keyword">select</span> c2 <span class="keyword">from</span> #t2);　　<span class="comment">--&gt;执行结果：无</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> #t1 <span class="keyword">where</span> <span class="keyword">not</span> <span class="keyword">exists</span>(<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> #t2 <span class="keyword">where</span> #t2.c2<span class="operator">=</span>#t1.c2)　　<span class="comment">--&gt;执行结果：1　　3</span></span><br></pre></td></tr></table></figure><p>如果查询语句使用了not in，那么对内外表都进行全表扫描，没有用到索引；而not exists的子查询依然能用到表上的索引。所以无论哪个表大，用not exists都比not in 要快。</p><h2 id="3、in-与-x3D-的区别"><a href="#3、in-与-x3D-的区别" class="headerlink" title="3、in 与 &#x3D; 的区别"></a>3、in 与 &#x3D; 的区别</h2><p><code>select name from student where name in(&#39;zhang&#39;,&#39;wang&#39;,&#39;zhao&#39;);</code><br>与</p><p><code>select name from student where name=&#39;zhang&#39; or name=&#39;wang&#39; or name=&#39;zhao&#39;</code><br>的结果是相同的。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件、资源、IO 流工具类</title>
      <link href="/2021/03/19/Spring_%E6%96%87%E4%BB%B6%E3%80%81%E8%B5%84%E6%BA%90%E3%80%81IO%20%E6%B5%81%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
      <url>/2021/03/19/Spring_%E6%96%87%E4%BB%B6%E3%80%81%E8%B5%84%E6%BA%90%E3%80%81IO%20%E6%B5%81%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h3 id="FileCopyUtils"><a href="#FileCopyUtils" class="headerlink" title="FileCopyUtils"></a>FileCopyUtils</h3><h4 id="1-输入"><a href="#1-输入" class="headerlink" title="1.输入"></a>1.输入</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从文件中读入到字节数组中</span></span><br><span class="line"><span class="type">byte</span>[] copyToByteArray(File in)</span><br><span class="line"><span class="comment">// 从输入流中读入到字节数组中</span></span><br><span class="line"><span class="type">byte</span>[] copyToByteArray(InputStream in)</span><br><span class="line"><span class="comment">// 从输入流中读入到字符串中</span></span><br><span class="line">String <span class="title function_">copyToString</span><span class="params">(Reader in)</span></span><br></pre></td></tr></table></figure><span id="more"></span><h4 id="2-输出"><a href="#2-输出" class="headerlink" title="2.输出"></a>2.输出</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从字节数组到文件</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">copy</span><span class="params">(<span class="type">byte</span>[] in, File out)</span></span><br><span class="line"><span class="comment">// 从文件到文件</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">copy</span><span class="params">(File in, File out)</span></span><br><span class="line"><span class="comment">// 从字节数组到输出流</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">copy</span><span class="params">(<span class="type">byte</span>[] in, OutputStream out)</span> </span><br><span class="line"><span class="comment">// 从输入流到输出流</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">copy</span><span class="params">(InputStream in, OutputStream out)</span> </span><br><span class="line"><span class="comment">// 从输入流到输出流</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">copy</span><span class="params">(Reader in, Writer out)</span></span><br><span class="line"><span class="comment">// 从字符串到输出流</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">copy</span><span class="params">(String in, Writer out)</span></span><br></pre></td></tr></table></figure><h3 id="ResourceUtils"><a href="#ResourceUtils" class="headerlink" title="ResourceUtils"></a>ResourceUtils</h3><h4 id="1-从资源路径获取文件"><a href="#1-从资源路径获取文件" class="headerlink" title="1.从资源路径获取文件"></a>1.从资源路径获取文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断字符串是否是一个合法的 URL 字符串。</span></span><br><span class="line"><span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isUrl</span><span class="params">(String resourceLocation)</span></span><br><span class="line"><span class="comment">// 获取 URL</span></span><br><span class="line"><span class="keyword">static</span> URL <span class="title function_">getURL</span><span class="params">(String resourceLocation)</span> </span><br><span class="line"><span class="comment">// 获取文件（在 JAR 包内无法正常使用，需要是一个独立的文件）</span></span><br><span class="line"><span class="keyword">static</span> File <span class="title function_">getFile</span><span class="params">(String resourceLocation)</span></span><br></pre></td></tr></table></figure><h4 id="2-Resource"><a href="#2-Resource" class="headerlink" title="2.Resource"></a>2.Resource</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件系统资源 D:\...</span></span><br><span class="line">FileSystemResource</span><br><span class="line"><span class="comment">// URL 资源，如 file://... http://...</span></span><br><span class="line">UrlResource</span><br><span class="line"><span class="comment">// 类路径下的资源，classpth:...</span></span><br><span class="line">ClassPathResource</span><br><span class="line"><span class="comment">// Web 容器上下文中的资源（jar 包、war 包）</span></span><br><span class="line">ServletContextResource</span><br><span class="line"><span class="comment">// 判断资源是否存在</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">exists</span><span class="params">()</span></span><br><span class="line"><span class="comment">// 从资源中获得 File 对象</span></span><br><span class="line">File <span class="title function_">getFile</span><span class="params">()</span></span><br><span class="line"><span class="comment">// 从资源中获得 URI 对象</span></span><br><span class="line">URI <span class="title function_">getURI</span><span class="params">()</span></span><br><span class="line"><span class="comment">// 从资源中获得 URI 对象</span></span><br><span class="line">URL <span class="title function_">getURL</span><span class="params">()</span></span><br><span class="line"><span class="comment">// 获得资源的 InputStream</span></span><br><span class="line">InputStream <span class="title function_">getInputStream</span><span class="params">()</span></span><br><span class="line"><span class="comment">// 获得资源的描述信息</span></span><br><span class="line">String <span class="title function_">getDescription</span><span class="params">()</span></span><br></pre></td></tr></table></figure><h3 id="StreamUtils"><a href="#StreamUtils" class="headerlink" title="StreamUtils"></a>StreamUtils</h3><h4 id="1-输入-1"><a href="#1-输入-1" class="headerlink" title="1.输入"></a>1.输入</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">copy</span><span class="params">(<span class="type">byte</span>[] in, OutputStream out)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">copy</span><span class="params">(InputStream in, OutputStream out)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">copy</span><span class="params">(String in, Charset charset, OutputStream out)</span></span><br><span class="line"><span class="type">long</span> <span class="title function_">copyRange</span><span class="params">(InputStream in, OutputStream out, <span class="type">long</span> start, <span class="type">long</span> end)</span></span><br></pre></td></tr></table></figure><h4 id="2-输出-1"><a href="#2-输出-1" class="headerlink" title="2.输出"></a>2.输出</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span>[] copyToByteArray(InputStream in)</span><br><span class="line">String <span class="title function_">copyToString</span><span class="params">(InputStream in, Charset charset)</span></span><br><span class="line"><span class="comment">// 舍弃输入流中的内容</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">drain</span><span class="params">(InputStream in)</span> </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> API </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对象、数组、集合工具类</title>
      <link href="/2021/03/19/Spring_%E5%AF%B9%E8%B1%A1%E3%80%81%E6%95%B0%E7%BB%84%E3%80%81%E9%9B%86%E5%90%88%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
      <url>/2021/03/19/Spring_%E5%AF%B9%E8%B1%A1%E3%80%81%E6%95%B0%E7%BB%84%E3%80%81%E9%9B%86%E5%90%88%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h3 id="ObjectUtils"><a href="#ObjectUtils" class="headerlink" title="ObjectUtils"></a>ObjectUtils</h3><h4 id="1-获取对象的基本信息"><a href="#1-获取对象的基本信息" class="headerlink" title="1.获取对象的基本信息"></a>1.获取对象的基本信息</h4><span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取对象的类名。参数为 null 时，返回字符串：&quot;null&quot; </span></span><br><span class="line">String <span class="title function_">nullSafeClassName</span><span class="params">(Object obj)</span></span><br><span class="line"><span class="comment">// 参数为 null 时，返回 0</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">nullSafeHashCode</span><span class="params">(Object object)</span></span><br><span class="line"><span class="comment">// 参数为 null 时，返回字符串：&quot;null&quot;</span></span><br><span class="line">String <span class="title function_">nullSafeToString</span><span class="params">(<span class="type">boolean</span>[] array)</span></span><br><span class="line"><span class="comment">// 获取对象 HashCode（十六进制形式字符串）。参数为 null 时，返回 0 </span></span><br><span class="line">String <span class="title function_">getIdentityHexString</span><span class="params">(Object obj)</span></span><br><span class="line"><span class="comment">// 获取对象的类名和 HashCode。 参数为 null 时，返回字符串：&quot;&quot; </span></span><br><span class="line">String <span class="title function_">identityToString</span><span class="params">(Object obj)</span></span><br><span class="line"><span class="comment">// 相当于 toString()方法，但参数为 null 时，返回字符串：&quot;&quot;</span></span><br><span class="line">String <span class="title function_">getDisplayString</span><span class="params">(Object obj)</span></span><br></pre></td></tr></table></figure><h4 id="2-判断工具"><a href="#2-判断工具" class="headerlink" title="2.判断工具"></a>2.判断工具</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断数组是否为空</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">(Object[] array)</span></span><br><span class="line"><span class="comment">// 判断参数对象是否是数组</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isArray</span><span class="params">(Object obj)</span></span><br><span class="line"><span class="comment">// 判断数组中是否包含指定元素</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">containsElement</span><span class="params">(Object[] array, Object element)</span></span><br><span class="line"><span class="comment">// 相等，或同为 null时，返回 true</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">nullSafeEquals</span><span class="params">(Object o1, Object o2)</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">判断参数对象是否为空，判断标准为：</span></span><br><span class="line"><span class="comment">    Optional: Optional.empty()</span></span><br><span class="line"><span class="comment">       Array: length == 0</span></span><br><span class="line"><span class="comment">CharSequence: length == 0</span></span><br><span class="line"><span class="comment">  Collection: Collection.isEmpty()</span></span><br><span class="line"><span class="comment">         Map: Map.isEmpty()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">(Object obj)</span></span><br></pre></td></tr></table></figure><h4 id="3-其他工具方法"><a href="#3-其他工具方法" class="headerlink" title="3.其他工具方法"></a>3.其他工具方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 向参数数组的末尾追加新元素，并返回一个新数组</span></span><br><span class="line">&lt;A, O <span class="keyword">extends</span> <span class="title class_">A</span>&gt; A[] addObjectToArray(A[] array, O obj)</span><br><span class="line"><span class="comment">// 原生基础类型数组 --&gt; 包装类数组</span></span><br><span class="line">Object[] toObjectArray(Object source)</span><br></pre></td></tr></table></figure><h3 id="StringUtils"><a href="#StringUtils" class="headerlink" title="StringUtils"></a>StringUtils</h3><h4 id="1-字符串判断工具"><a href="#1-字符串判断工具" class="headerlink" title="1.字符串判断工具"></a>1.字符串判断工具</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断字符串是否为 null，或 &quot;&quot;。注意，包含空白符的字符串为非空</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">(Object str)</span></span><br><span class="line"><span class="comment">// 判断字符串是否是以指定内容结束。忽略大小写</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">endsWithIgnoreCase</span><span class="params">(String str, String suffix)</span></span><br><span class="line"><span class="comment">// 判断字符串是否已指定内容开头。忽略大小写</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">startsWithIgnoreCase</span><span class="params">(String str, String prefix)</span> </span><br><span class="line"><span class="comment">// 是否包含空白符</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">containsWhitespace</span><span class="params">(String str)</span></span><br><span class="line"><span class="comment">// 判断字符串非空且长度不为 0，即，Not Empty</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">hasLength</span><span class="params">(CharSequence str)</span></span><br><span class="line"><span class="comment">// 判断字符串是否包含实际内容，即非仅包含空白符，也就是 Not Blank</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">hasText</span><span class="params">(CharSequence str)</span></span><br><span class="line"><span class="comment">// 判断字符串指定索引处是否包含一个子串。</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">substringMatch</span><span class="params">(CharSequence str, <span class="type">int</span> index, CharSequence substring)</span></span><br><span class="line"><span class="comment">// 计算一个字符串中指定子串的出现次数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">countOccurrencesOf</span><span class="params">(String str, String sub)</span></span><br></pre></td></tr></table></figure><h4 id="2-字符串操作工具"><a href="#2-字符串操作工具" class="headerlink" title="2.字符串操作工具"></a>2.字符串操作工具</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查找并替换指定子串</span></span><br><span class="line">String <span class="title function_">replace</span><span class="params">(String inString, String oldPattern, String newPattern)</span></span><br><span class="line"><span class="comment">// 去除尾部的特定字符</span></span><br><span class="line">String <span class="title function_">trimTrailingCharacter</span><span class="params">(String str, <span class="type">char</span> trailingCharacter)</span> </span><br><span class="line"><span class="comment">// 去除头部的特定字符</span></span><br><span class="line">String <span class="title function_">trimLeadingCharacter</span><span class="params">(String str, <span class="type">char</span> leadingCharacter)</span></span><br><span class="line"><span class="comment">// 去除头部的空白符</span></span><br><span class="line">String <span class="title function_">trimLeadingWhitespace</span><span class="params">(String str)</span></span><br><span class="line"><span class="comment">// 去除头部的空白符</span></span><br><span class="line">String <span class="title function_">trimTrailingWhitespace</span><span class="params">(String str)</span></span><br><span class="line"><span class="comment">// 去除头部和尾部的空白符</span></span><br><span class="line">String <span class="title function_">trimWhitespace</span><span class="params">(String str)</span></span><br><span class="line"><span class="comment">// 删除开头、结尾和中间的空白符</span></span><br><span class="line">String <span class="title function_">trimAllWhitespace</span><span class="params">(String str)</span></span><br><span class="line"><span class="comment">// 删除指定子串</span></span><br><span class="line">String <span class="title function_">delete</span><span class="params">(String inString, String pattern)</span></span><br><span class="line"><span class="comment">// 删除指定字符（可以是多个）</span></span><br><span class="line">String <span class="title function_">deleteAny</span><span class="params">(String inString, String charsToDelete)</span></span><br><span class="line"><span class="comment">// 对数组的每一项执行 trim() 方法</span></span><br><span class="line">String[] trimArrayElements(String[] array)</span><br><span class="line"><span class="comment">// 将 URL 字符串进行解码</span></span><br><span class="line">String <span class="title function_">uriDecode</span><span class="params">(String source, Charset charset)</span></span><br></pre></td></tr></table></figure><h4 id="3-路径相关工具方法"><a href="#3-路径相关工具方法" class="headerlink" title="3.路径相关工具方法"></a>3.路径相关工具方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解析路径字符串，优化其中的 “..” </span></span><br><span class="line">String <span class="title function_">cleanPath</span><span class="params">(String path)</span></span><br><span class="line"><span class="comment">// 解析路径字符串，解析出文件名部分</span></span><br><span class="line">String <span class="title function_">getFilename</span><span class="params">(String path)</span></span><br><span class="line"><span class="comment">// 解析路径字符串，解析出文件后缀名</span></span><br><span class="line">String <span class="title function_">getFilenameExtension</span><span class="params">(String path)</span></span><br><span class="line"><span class="comment">// 比较两个两个字符串，判断是否是同一个路径。会自动处理路径中的 “..” </span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">pathEquals</span><span class="params">(String path1, String path2)</span></span><br><span class="line"><span class="comment">// 删除文件路径名中的后缀部分</span></span><br><span class="line">String <span class="title function_">stripFilenameExtension</span><span class="params">(String path)</span> </span><br><span class="line"><span class="comment">// 以 “. 作为分隔符，获取其最后一部分</span></span><br><span class="line">String <span class="title function_">unqualify</span><span class="params">(String qualifiedName)</span></span><br><span class="line"><span class="comment">// 以指定字符作为分隔符，获取其最后一部分</span></span><br><span class="line">String <span class="title function_">unqualify</span><span class="params">(String qualifiedName, <span class="type">char</span> separator)</span></span><br></pre></td></tr></table></figure><h3 id="CollectionUtils"><a href="#CollectionUtils" class="headerlink" title="CollectionUtils"></a>CollectionUtils</h3><h4 id="1-集合判断工具"><a href="#1-集合判断工具" class="headerlink" title="1.集合判断工具"></a>1.集合判断工具</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断 List/Set 是否为空</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">(Collection&lt;?&gt; collection)</span></span><br><span class="line"><span class="comment">// 判断 Map 是否为空</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">(Map&lt;?,?&gt; map)</span></span><br><span class="line"><span class="comment">// 判断 List/Set 中是否包含某个对象</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">containsInstance</span><span class="params">(Collection&lt;?&gt; collection, Object element)</span></span><br><span class="line"><span class="comment">// 以迭代器的方式，判断 List/Set 中是否包含某个对象</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Iterator&lt;?&gt; iterator, Object element)</span></span><br><span class="line"><span class="comment">// 判断 List/Set 是否包含某些对象中的任意一个</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">containsAny</span><span class="params">(Collection&lt;?&gt; source, Collection&lt;?&gt; candidates)</span></span><br><span class="line"><span class="comment">// 判断 List/Set 中的每个元素是否唯一。即 List/Set 中不存在重复元素</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">hasUniqueObject</span><span class="params">(Collection&lt;?&gt; collection)</span></span><br></pre></td></tr></table></figure><h4 id="2-集合操作工具"><a href="#2-集合操作工具" class="headerlink" title="2.集合操作工具"></a>2.集合操作工具</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将 Array 中的元素都添加到 List/Set 中</span></span><br><span class="line">&lt;E&gt; <span class="keyword">void</span> <span class="title function_">mergeArrayIntoCollection</span><span class="params">(Object array, Collection&lt;E&gt; collection)</span>  </span><br><span class="line"><span class="comment">// 将 Properties 中的键值对都添加到 Map 中</span></span><br><span class="line">&lt;K,V&gt; <span class="keyword">void</span> <span class="title function_">mergePropertiesIntoMap</span><span class="params">(Properties props, Map&lt;K,V&gt; map)</span></span><br><span class="line"><span class="comment">// 返回 List 中最后一个元素</span></span><br><span class="line">&lt;T&gt; T <span class="title function_">lastElement</span><span class="params">(List&lt;T&gt; list)</span>  </span><br><span class="line"><span class="comment">// 返回 Set 中最后一个元素</span></span><br><span class="line">&lt;T&gt; T <span class="title function_">lastElement</span><span class="params">(Set&lt;T&gt; set)</span> </span><br><span class="line"><span class="comment">// 返回参数 candidates 中第一个存在于参数 source 中的元素</span></span><br><span class="line">&lt;E&gt; E <span class="title function_">findFirstMatch</span><span class="params">(Collection&lt;?&gt; source, Collection&lt;E&gt; candidates)</span></span><br><span class="line"><span class="comment">// 返回 List/Set 中指定类型的元素。</span></span><br><span class="line">&lt;T&gt; T <span class="title function_">findValueOfType</span><span class="params">(Collection&lt;?&gt; collection, Class&lt;T&gt; type)</span></span><br><span class="line"><span class="comment">// 返回 List/Set 中指定类型的元素。如果第一种类型未找到，则查找第二种类型，以此类推</span></span><br><span class="line">Object <span class="title function_">findValueOfType</span><span class="params">(Collection&lt;?&gt; collection, Class&lt;?&gt;[] types)</span></span><br><span class="line"><span class="comment">// 返回 List/Set 中元素的类型</span></span><br><span class="line">Class&lt;?&gt; findCommonElementType(Collection&lt;?&gt; collection)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> API </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反射、AOP工具类</title>
      <link href="/2021/03/11/Spring_%E5%8F%8D%E5%B0%84%E3%80%81AOP%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
      <url>/2021/03/11/Spring_%E5%8F%8D%E5%B0%84%E3%80%81AOP%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h3 id="ReflectionUtils"><a href="#ReflectionUtils" class="headerlink" title="ReflectionUtils"></a>ReflectionUtils</h3><h4 id="1-获取方法"><a href="#1-获取方法" class="headerlink" title="1.获取方法"></a>1.获取方法</h4><span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在类中查找指定方法</span></span><br><span class="line">Method <span class="title function_">findMethod</span><span class="params">(Class&lt;?&gt; clazz, String name)</span> </span><br><span class="line"><span class="comment">// 同上，额外提供方法参数类型作查找条件</span></span><br><span class="line">Method <span class="title function_">findMethod</span><span class="params">(Class&lt;?&gt; clazz, String name, Class&lt;?&gt;... paramTypes)</span> </span><br><span class="line"><span class="comment">// 获得类中所有方法，包括继承而来的</span></span><br><span class="line">Method[] getAllDeclaredMethods(Class&lt;?&gt; leafClass) </span><br><span class="line"><span class="comment">// 在类中查找指定构造方法</span></span><br><span class="line">Constructor&lt;T&gt; <span class="title function_">accessibleConstructor</span><span class="params">(Class&lt;T&gt; clazz, Class&lt;?&gt;... parameterTypes)</span> </span><br><span class="line"><span class="comment">// 是否是 equals() 方法</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isEqualsMethod</span><span class="params">(Method method)</span> </span><br><span class="line"><span class="comment">// 是否是 hashCode() 方法 </span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isHashCodeMethod</span><span class="params">(Method method)</span> </span><br><span class="line"><span class="comment">// 是否是 toString() 方法</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isToStringMethod</span><span class="params">(Method method)</span> </span><br><span class="line"><span class="comment">// 是否是从 Object 类继承而来的方法</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isObjectMethod</span><span class="params">(Method method)</span> </span><br><span class="line"><span class="comment">// 检查一个方法是否声明抛出指定异常</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">declaresException</span><span class="params">(Method method, Class&lt;?&gt; exceptionType)</span> </span><br></pre></td></tr></table></figure><h4 id="2-执行方法"><a href="#2-执行方法" class="headerlink" title="2.执行方法"></a>2.执行方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 执行方法</span></span><br><span class="line">Object <span class="title function_">invokeMethod</span><span class="params">(Method method, Object target)</span>  </span><br><span class="line"><span class="comment">// 同上，提供方法参数</span></span><br><span class="line">Object <span class="title function_">invokeMethod</span><span class="params">(Method method, Object target, Object... args)</span> </span><br><span class="line"><span class="comment">// 取消 Java 权限检查。以便后续执行该私有方法</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">makeAccessible</span><span class="params">(Method method)</span> </span><br><span class="line"><span class="comment">// 取消 Java 权限检查。以便后续执行私有构造方法</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">makeAccessible</span><span class="params">(Constructor&lt;?&gt; ctor)</span> </span><br></pre></td></tr></table></figure><h4 id="3-获取字段"><a href="#3-获取字段" class="headerlink" title="3.获取字段"></a>3.获取字段</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在类中查找指定属性</span></span><br><span class="line">Field <span class="title function_">findField</span><span class="params">(Class&lt;?&gt; clazz, String name)</span> </span><br><span class="line"><span class="comment">// 同上，多提供了属性的类型</span></span><br><span class="line">Field <span class="title function_">findField</span><span class="params">(Class&lt;?&gt; clazz, String name, Class&lt;?&gt; type)</span> </span><br><span class="line"><span class="comment">// 是否为一个 &quot;public static final&quot; 属性</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isPublicStaticFinal</span><span class="params">(Field field)</span> </span><br></pre></td></tr></table></figure><h4 id="4-设置字段"><a href="#4-设置字段" class="headerlink" title="4.设置字段"></a>4.设置字段</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取 target 对象的 field 属性值</span></span><br><span class="line">Object <span class="title function_">getField</span><span class="params">(Field field, Object target)</span> </span><br><span class="line"><span class="comment">// 设置 target 对象的 field 属性值，值为 value</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setField</span><span class="params">(Field field, Object target, Object value)</span> </span><br><span class="line"><span class="comment">// 同类对象属性对等赋值</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">shallowCopyFieldState</span><span class="params">(Object src, Object dest)</span></span><br><span class="line"><span class="comment">// 取消 Java 的权限控制检查。以便后续读写该私有属性</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">makeAccessible</span><span class="params">(Field field)</span> </span><br><span class="line"><span class="comment">// 对类的每个属性执行 callback</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">doWithFields</span><span class="params">(Class&lt;?&gt; clazz, ReflectionUtils.FieldCallback fc)</span> </span><br><span class="line"><span class="comment">// 同上，多了个属性过滤功能。</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">doWithFields</span><span class="params">(Class&lt;?&gt; clazz, ReflectionUtils.FieldCallback fc, </span></span><br><span class="line"><span class="params">                  ReflectionUtils.FieldFilter ff)</span> </span><br><span class="line"><span class="comment">// 同上，但不包括继承而来的属性</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">doWithLocalFields</span><span class="params">(Class&lt;?&gt; clazz, ReflectionUtils.FieldCallback fc)</span> </span><br></pre></td></tr></table></figure><h3 id="AopUtils"><a href="#AopUtils" class="headerlink" title="AopUtils"></a>AopUtils</h3><h4 id="1-判断代理类型"><a href="#1-判断代理类型" class="headerlink" title="1.判断代理类型"></a>1.判断代理类型</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断是不是 Spring 代理对象</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isAopProxy</span><span class="params">()</span></span><br><span class="line"><span class="comment">// 判断是不是 jdk 动态代理对象</span></span><br><span class="line">isJdkDynamicProxy()</span><br><span class="line"><span class="comment">// 判断是不是 CGLIB 代理对象</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isCglibProxy</span><span class="params">()</span></span><br></pre></td></tr></table></figure><h4 id="2-获取被代理对象的-class"><a href="#2-获取被代理对象的-class" class="headerlink" title="2.获取被代理对象的 class"></a>2.获取被代理对象的 class</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取被代理的目标 class</span></span><br><span class="line">Class&lt;?&gt; getTargetClass()</span><br></pre></td></tr></table></figure><h3 id="AopContext"><a href="#AopContext" class="headerlink" title="AopContext"></a>AopContext</h3><h4 id="1-获取当前对象的代理对象"><a href="#1-获取当前对象的代理对象" class="headerlink" title="1.获取当前对象的代理对象"></a>1.获取当前对象的代理对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object <span class="title function_">currentProxy</span><span class="params">()</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> API </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>断言工具类</title>
      <link href="/2021/03/06/Spring_%E6%96%AD%E8%A8%80%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
      <url>/2021/03/06/Spring_%E6%96%AD%E8%A8%80%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<ol><li><p>断言是一个逻辑判断，用于检查不应该发生的情况</p></li><li><p>Assert 关键字在 JDK1.4 中引入，可通过 JVM 参数<code>-enableassertions</code>开启</p></li><li><p>SpringBoot 中提供了 Assert 断言工具类，通常用于数据合法性检查</p></li></ol><span id="more"></span>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 要求参数 object 必须为非空（Not Null），否则抛出异常，不予放行</span></span><br><span class="line"><span class="comment">// 参数 message 参数用于定制异常信息。</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">notNull</span><span class="params">(Object object, String message)</span></span><br><span class="line"><span class="comment">// 要求参数必须空（Null），否则抛出异常，不予『放行』。</span></span><br><span class="line"><span class="comment">// 和 notNull() 方法断言规则相反</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">isNull</span><span class="params">(Object object, String message)</span></span><br><span class="line"><span class="comment">// 要求参数必须为真（True），否则抛出异常，不予『放行』。</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">isTrue</span><span class="params">(<span class="type">boolean</span> expression, String message)</span></span><br><span class="line"><span class="comment">// 要求参数（List/Set）必须非空（Not Empty），否则抛出异常，不予放行</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">notEmpty</span><span class="params">(Collection collection, String message)</span></span><br><span class="line"><span class="comment">// 要求参数（String）必须有长度（即，Not Empty），否则抛出异常，不予放行</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">hasLength</span><span class="params">(String text, String message)</span></span><br><span class="line"><span class="comment">// 要求参数（String）必须有内容（即，Not Blank），否则抛出异常，不予放行</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">hasText</span><span class="params">(String text, String message)</span></span><br><span class="line"><span class="comment">// 要求参数是指定类型的实例，否则抛出异常，不予放行</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">isInstanceOf</span><span class="params">(Class type, Object obj, String message)</span></span><br><span class="line"><span class="comment">// 要求参数 `subType` 必须是参数 superType 的子类或实现类，否则抛出异常，不予放行</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">isAssignable</span><span class="params">(Class superType, Class subType, String message)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> API </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三次握手与四次挥手</title>
      <link href="/2021/02/18/TCP_1_%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E4%B8%8E%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/"/>
      <url>/2021/02/18/TCP_1_%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E4%B8%8E%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/</url>
      
        <content type="html"><![CDATA[<ul><li><strong>三次握手</strong></li></ul><img src="https://gitee.com/andornot888/andornot_images/raw/master//imgs/TCP1_1.png"/><span id="more"></span><ul><li><strong>四次挥手</strong></li></ul><img src="https://gitee.com/andornot888/andornot_images/raw/master//imgs/TCP1_2.png"/>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>绝对路径与相对路径的区别</title>
      <link href="/2021/01/21/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86_%E7%BB%9D%E5%AF%B9%E8%B7%AF%E5%BE%84%E4%B8%8E%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2021/01/21/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86_%E7%BB%9D%E5%AF%B9%E8%B7%AF%E5%BE%84%E4%B8%8E%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h3 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h3><p>是从盘符开始的路径，形如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\windows\system32\cmd.exe</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h3><p>是从当前路径开始的路径，假如当前路径为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\windows</span><br></pre></td></tr></table></figure><p>要描述上述路径，只需输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">system32\cmd.exe</span><br></pre></td></tr></table></figure><p>实际上，严格的相对路径写法应为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\system32\cmd.exe</span><br></pre></td></tr></table></figure><p>其中，.表示当前路径，在通道情况下可以省略，只有在特殊的情况下不能省略。</p><p>假如当前路径为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\program files</span><br></pre></td></tr></table></figure><p>要调用上述命令，则需要输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">..\windows\system32\cmd.exe</span><br></pre></td></tr></table></figure><p>其中，..为父目录。</p><p>当前路径如果为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c:\program files\common files</span><br></pre></td></tr></table></figure><p>则需要输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">..\..\windows\system32\cmd.exe</span><br></pre></td></tr></table></figure><p>另外，还有一种不包含盘符的特殊绝对路径，形如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\windows\system32\cmd.exe</span><br></pre></td></tr></table></figure><p>无论当前路径是什么，会自动地从当前盘的根目录开始查找指定的程序。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XML与HTML的主要区别</title>
      <link href="/2021/01/12/XML_1_XML%E4%B8%8EHTML%E7%9A%84%E4%B8%BB%E8%A6%81%E5%8C%BA%E5%88%AB/"/>
      <url>/2021/01/12/XML_1_XML%E4%B8%8EHTML%E7%9A%84%E4%B8%BB%E8%A6%81%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>  XML 指可扩展标记语言（e<strong>X</strong>tensible <strong>M</strong>arkup <strong>L</strong>anguage）。</p><p>XML 被设计用来传输和存储数据。</p><span id="more"></span><p><strong>XML与HTML的主要区别：</strong></p><ul><li>与HTML不同， XML是大小写敏感的。例如，<code>&lt;H1&gt;</code>和<code>&lt;h1&gt;</code>是不同的XML标签。</li><li>在HTML中，如果从上下文可以分清哪里是段落或列表项的结尾，那么结束标签(如<code>&lt;/p&gt;</code>或<code>&lt;/li&gt;</code>)就可以省略，而在XML中结束标签绝对不能省略。</li><li>在XML中，只有单个标签而没有相对应的结束标签的元素必须以<code>/</code>结尾，比如<code>&lt;img src=&quot;coffeecup.png&quot;/&gt;</code>。这样，解析器就知道不需要查找<code>&lt;/img&gt;</code>标签了。</li><li>在XML中,属性值必须用引号括起来。在HTML中，引号是可有可无的。例如，<code>&lt;applet code=&quot;MyApplet.class&quot; width=300 height=300&gt;</code>对HTML来说是合法的，但是对XML来说则是不合法的。在XML中,必须使用引号，比如， <code>width=&quot;300&quot;</code>。</li><li>在 HTML 中，属性名可以没有值。例如 <code>&lt;input type=&quot;radio&quot; name=&quot;language&quot; value=&quot;Java&quot; checked&gt;</code>。在XML中，所有属性必须都有属性值，比如，<code>checked=&quot;true&quot;</code>或<code>checked=&quot;checked&quot;</code>。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> XML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发工具类</title>
      <link href="/2021/01/09/Java_25_%E5%B9%B6%E5%8F%91%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
      <url>/2021/01/09/Java_25_%E5%B9%B6%E5%8F%91%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p> 并发工具类：</p><ul><li>Hashtable：线程安全，但是比HashMap效率低；</li><li>ConcurrentHashMap：线程安全，效率较高（在JDK7和JDK8中，底层原理不一样）；</li><li>CountDownLatch：让某一条线程等待其他线程执行完毕之后再执行；</li><li>Semaphore：可以控制访问特定资源的线程数量。</li></ul><span id="more"></span><h3 id="1-Hashtable"><a href="#1-Hashtable" class="headerlink" title="1 Hashtable"></a>1 Hashtable</h3><p>​    <strong>Hashtable出现的原因 :</strong> 在集合类中HashMap是比较常用的集合对象，但是HashMap是线程不安全的(多线程环境下可能会存在问题)。为了保证数据的安全性我们可以使用Hashtable，但是Hashtable的效率低下。</p><p><strong>代码实现 :</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jia.mymap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyHashtableDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        Hashtable&lt;String, String&gt; hm = <span class="keyword">new</span> <span class="title class_">Hashtable</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">25</span>; i++) &#123;</span><br><span class="line">                hm.put(i + <span class="string">&quot;&quot;</span>, i + <span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">25</span>; i &lt; <span class="number">51</span>; i++) &#123;</span><br><span class="line">                hm.put(i + <span class="string">&quot;&quot;</span>, i + <span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------&quot;</span>);</span><br><span class="line">        <span class="comment">//为了t1和t2能把数据全部添加完毕</span></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//0-0 1-1 ..... 50- 50</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">51</span>; i++) &#123;</span><br><span class="line">            System.out.println(hm.get(i + <span class="string">&quot;&quot;</span>));</span><br><span class="line">        &#125;<span class="comment">//0 1 2 3 .... 50</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-ConcurrentHashMap"><a href="#2-ConcurrentHashMap" class="headerlink" title="2 ConcurrentHashMap"></a>2 ConcurrentHashMap</h3><p>​    <strong>ConcurrentHashMap出现的原因 :</strong> 在集合类中HashMap是比较常用的集合对象，但是HashMap是线程不安全的(多线程环境下可能会存在问题)。为了保证数据的安全性我们可以使用Hashtable，但是Hashtable的效率低下。</p><p>基于以上两个原因我们可以使用JDK1.5以后所提供的ConcurrentHashMap。</p><p><strong>体系结构 :</strong> </p><p><img src="https://gitee.com/andornot888/andornot_images/raw/master//imgs/java25_1.png" alt="1591168965857"></p><p><strong>总结 :</strong> </p><p>​    1 ，HashMap是线程不安全的。多线程环境下会有数据安全问题</p><p>​    2 ，Hashtable是线程安全的，但是会将整张表锁起来，效率低下</p><p>​    3，ConcurrentHashMap也是线程安全的，效率较高。     在JDK7和JDK8中，底层原理不一样。</p><p><strong>代码实现 :</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jia.mymap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConcurrentHashMapDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        ConcurrentHashMap&lt;String, String&gt; hm = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">25</span>; i++) &#123;</span><br><span class="line">                hm.put(i + <span class="string">&quot;&quot;</span>, i + <span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">25</span>; i &lt; <span class="number">51</span>; i++) &#123;</span><br><span class="line">                hm.put(i + <span class="string">&quot;&quot;</span>, i + <span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------&quot;</span>);</span><br><span class="line">        <span class="comment">//为了t1和t2能把数据全部添加完毕</span></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//0-0 1-1 ..... 50- 50</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">51</span>; i++) &#123;</span><br><span class="line">            System.out.println(hm.get(i + <span class="string">&quot;&quot;</span>));</span><br><span class="line">        &#125;<span class="comment">//0 1 2 3 .... 50</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-ConcurrentHashMap1-7原理"><a href="#3-ConcurrentHashMap1-7原理" class="headerlink" title="3 ConcurrentHashMap1.7原理"></a>3 ConcurrentHashMap1.7原理</h3><p><img src="https://gitee.com/andornot888/andornot_images/raw/master//imgs/java25_2.png" alt="1591169254280"></p><h3 id="4-ConcurrentHashMap1-8原理"><a href="#4-ConcurrentHashMap1-8原理" class="headerlink" title="4 ConcurrentHashMap1.8原理"></a>4 ConcurrentHashMap1.8原理</h3><p><img src="https://gitee.com/andornot888/andornot_images/raw/master//imgs/java25_3.png" alt="1591169338256"></p><p><strong>总结 :</strong> </p><p>​    1，如果使用空参构造创建ConcurrentHashMap对象，则什么事情都不做。     在第一次添加元素的时候创建哈希表</p><p>​    2，计算当前元素应存入的索引。</p><p>​    3，如果该索引位置为null，则利用cas算法，将本结点添加到数组中。</p><p>​    4，如果该索引位置不为null，则利用volatile关键字获得当前位置最新的结点地址，挂在他下面，变成链表。        </p><p>​    5，当链表的长度大于等于8时，自动转换成红黑树6，以链表或者红黑树头结点为锁对象，配合悲观锁保证多线程操作集合时数据的安全性</p><h3 id="5-CountDownLatch"><a href="#5-CountDownLatch" class="headerlink" title="5 CountDownLatch"></a>5 CountDownLatch</h3><p><strong>CountDownLatch类 :</strong>         </p><table><thead><tr><th>方法</th><th>解释</th></tr></thead><tbody><tr><td>public CountDownLatch(int count)</td><td>参数传递线程数，表示等待线程数量</td></tr><tr><td>public void await()</td><td>让线程等待</td></tr><tr><td>public void countDown()</td><td>当前线程执行完毕</td></tr></tbody></table><p><strong>使用场景：</strong> 让某一条线程等待其他线程执行完毕之后再执行</p><p><strong>代码实现 :</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jia.mycountdownlatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChileThread1</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CountDownLatch countDownLatch;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ChileThread1</span><span class="params">(CountDownLatch countDownLatch)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.countDownLatch = countDownLatch;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1.吃饺子</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.println(getName() + <span class="string">&quot;在吃第&quot;</span> + i + <span class="string">&quot;个饺子&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2.吃完说一声</span></span><br><span class="line">        <span class="comment">//每一次countDown方法的时候，就让计数器-1</span></span><br><span class="line">        countDownLatch.countDown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jia.mycountdownlatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChileThread2</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CountDownLatch countDownLatch;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ChileThread2</span><span class="params">(CountDownLatch countDownLatch)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.countDownLatch = countDownLatch;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1.吃饺子</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">15</span>; i++) &#123;</span><br><span class="line">            System.out.println(getName() + <span class="string">&quot;在吃第&quot;</span> + i + <span class="string">&quot;个饺子&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2.吃完说一声</span></span><br><span class="line">        <span class="comment">//每一次countDown方法的时候，就让计数器-1</span></span><br><span class="line">        countDownLatch.countDown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jia.mycountdownlatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChileThread3</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CountDownLatch countDownLatch;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ChileThread3</span><span class="params">(CountDownLatch countDownLatch)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.countDownLatch = countDownLatch;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1.吃饺子</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(getName() + <span class="string">&quot;在吃第&quot;</span> + i + <span class="string">&quot;个饺子&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2.吃完说一声</span></span><br><span class="line">        <span class="comment">//每一次countDown方法的时候，就让计数器-1</span></span><br><span class="line">        countDownLatch.countDown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jia.mycountdownlatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MotherThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> CountDownLatch countDownLatch;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MotherThread</span><span class="params">(CountDownLatch countDownLatch)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.countDownLatch = countDownLatch;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1.等待</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//当计数器变成0的时候，会自动唤醒这里等待的线程。</span></span><br><span class="line">            countDownLatch.await();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2.收拾碗筷</span></span><br><span class="line">        System.out.println(<span class="string">&quot;妈妈在收拾碗筷&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jia.mycountdownlatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCountDownLatchDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.创建CountDownLatch的对象，需要传递给四个线程。</span></span><br><span class="line">        <span class="comment">//在底层就定义了一个计数器，此时计数器的值就是3</span></span><br><span class="line">        <span class="type">CountDownLatch</span> <span class="variable">countDownLatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//2.创建四个线程对象并开启他们。</span></span><br><span class="line">        <span class="type">MotherThread</span> <span class="variable">motherThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MotherThread</span>(countDownLatch);</span><br><span class="line">        motherThread.start();</span><br><span class="line"></span><br><span class="line">        <span class="type">ChileThread1</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChileThread1</span>(countDownLatch);</span><br><span class="line">        t1.setName(<span class="string">&quot;小明&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ChileThread2</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChileThread2</span>(countDownLatch);</span><br><span class="line">        t2.setName(<span class="string">&quot;小红&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ChileThread3</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChileThread3</span>(countDownLatch);</span><br><span class="line">        t3.setName(<span class="string">&quot;小刚&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结 :</strong> </p><p>​    1. CountDownLatch(int count)：参数写等待线程的数量。并定义了一个计数器。</p><p>​    2. await()：让线程等待，当计数器为0时，会唤醒等待的线程</p><p>​    3. countDown()： 线程执行完毕时调用，会将计数器-1。</p><h3 id="6-Semaphore"><a href="#6-Semaphore" class="headerlink" title="6 Semaphore"></a>6 Semaphore</h3><p><strong>使用场景 :</strong> </p><p>​    可以控制访问特定资源的线程数量。</p><p><strong>实现步骤 :</strong> </p><p>​    1，需要有人管理这个通道</p><p>​    2，当有车进来了，发通行许可证</p><p>​    3，当车出去了，收回通行许可证</p><p>​    4，如果通行许可证发完了，那么其他车辆只能等着</p><p><strong>代码实现 :</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jia.mysemaphore;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Semaphore;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="comment">//1.获得管理员对象，</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Semaphore</span> <span class="variable">semaphore</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//2.获得通行证</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            semaphore.acquire();</span><br><span class="line">            <span class="comment">//3.开始行驶</span></span><br><span class="line">            System.out.println(<span class="string">&quot;获得了通行证开始行驶&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;归还通行证&quot;</span>);</span><br><span class="line">            <span class="comment">//4.归还通行证</span></span><br><span class="line">            semaphore.release();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jia.mysemaphore;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySemaphoreDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyRunnable</span> <span class="variable">mr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRunnable</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(mr).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原子性与Atomic包</title>
      <link href="/2021/01/08/Java_24_%E5%8E%9F%E5%AD%90%E6%80%A7%E4%B8%8EAtomic%E5%8C%85/"/>
      <url>/2021/01/08/Java_24_%E5%8E%9F%E5%AD%90%E6%80%A7%E4%B8%8EAtomic%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h3 id="1-问题"><a href="#1-问题" class="headerlink" title="1 问题"></a>1 问题</h3><p>小路同学虽然知道结婚基金是十万，但是当基金的余额发生变化的时候，小路同学无法知道最新的余额。</p><span id="more"></span><p><strong>代码分析 :</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jia.myvolatile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyThread1</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread1</span>();</span><br><span class="line">        t1.setName(<span class="string">&quot;小路同学&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="type">MyThread2</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread2</span>();</span><br><span class="line">        t2.setName(<span class="string">&quot;小皮同学&quot;</span>);</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jia.myvolatile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Money</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">money</span> <span class="operator">=</span> <span class="number">100000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jia.myvolatile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread1</span> <span class="keyword">extends</span>  <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(Money.money == <span class="number">100000</span>)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;结婚基金已经不是十万了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jia.myvolatile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread2</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">10</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Money.money = <span class="number">90000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-volatile解决"><a href="#2-volatile解决" class="headerlink" title="2 volatile解决"></a>2 volatile解决</h3><p><strong>以上案例出现的问题 :</strong></p><p>​    当A线程修改了共享数据时，B线程没有及时获取到最新的值，如果还在使用原先的值，就会出现问题 </p><p>​    1，堆内存是唯一的，每一个线程都有自己的线程栈。</p><p>​    2 ，每一个线程在使用堆里面变量的时候，都会先拷贝一份到变量的副本中。</p><p>​    3 ，在线程中，每一次使用是从变量的副本中获取的。</p><p><strong>Volatile关键字 :</strong> 强制线程每次在使用的时候，都会看一下共享区域最新的值</p><p><strong>代码实现 :</strong> <strong>使用volatile关键字解决</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jia.myvolatile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyThread1</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread1</span>();</span><br><span class="line">        t1.setName(<span class="string">&quot;小路同学&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="type">MyThread2</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread2</span>();</span><br><span class="line">        t2.setName(<span class="string">&quot;小皮同学&quot;</span>);</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jia.myvolatile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Money</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">int</span> <span class="variable">money</span> <span class="operator">=</span> <span class="number">100000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jia.myvolatile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread1</span> <span class="keyword">extends</span>  <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(Money.money == <span class="number">100000</span>)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;结婚基金已经不是十万了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jia.myvolatile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread2</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">10</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Money.money = <span class="number">90000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-synchronized解决"><a href="#3-synchronized解决" class="headerlink" title="3 synchronized解决"></a>3 synchronized解决</h3><p><strong>synchronized解决 :</strong> </p><p>​    1 ，线程获得锁</p><p>​    2 ，清空变量副本</p><p>​    3 ，拷贝共享变量最新的值到变量副本中</p><p>​    4 ，执行代码</p><p>​    5 ，将修改后变量副本中的值赋值给共享数据</p><p>​    6 ，释放锁</p><p><strong>代码实现 :</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jia.myvolatile2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyThread1</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread1</span>();</span><br><span class="line">        t1.setName(<span class="string">&quot;小路同学&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="type">MyThread2</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread2</span>();</span><br><span class="line">        t2.setName(<span class="string">&quot;小皮同学&quot;</span>);</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jia.myvolatile2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Money</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">int</span> <span class="variable">money</span> <span class="operator">=</span> <span class="number">100000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jia.myvolatile2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread1</span> <span class="keyword">extends</span>  <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Money.lock)&#123;</span><br><span class="line">                <span class="keyword">if</span>(Money.money != <span class="number">100000</span>)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;结婚基金已经不是十万了&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jia.myvolatile2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread2</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (Money.lock) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">10</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Money.money = <span class="number">90000</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-原子性"><a href="#4-原子性" class="headerlink" title="4 原子性"></a>4 原子性</h3><p><strong>概述 :</strong> 所谓的原子性是指在一次操作或者多次操作中，要么所有的操作全部都得到了执行并且不会受到任何因素的干扰而中断，要么所有的操作都不执行，多个操作是一个不可以分割的整体。</p><p><strong>代码实现 :</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jia.threadatom;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AtomDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyAtomThread</span> <span class="variable">atom</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyAtomThread</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(atom).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyAtomThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//送冰淇淋的数量</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//1,从共享数据中读取数据到本线程栈中.</span></span><br><span class="line">            <span class="comment">//2,修改本线程栈中变量副本的值</span></span><br><span class="line">            <span class="comment">//3,会把本线程栈中变量副本的值赋值给共享数据.</span></span><br><span class="line">            count++;</span><br><span class="line">            System.out.println(<span class="string">&quot;已经送了&quot;</span> + count + <span class="string">&quot;个冰淇淋&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>执行结果：</strong></p><blockquote><p>已经送了1个冰淇淋<br>已经送了5个冰淇淋<br>已经送了7个冰淇淋<br>已经送了8个冰淇淋</p><p>…</p><p>已经送了9997个冰淇淋<br>已经送了9998个冰淇淋<br>已经送了9999个冰淇淋</p></blockquote><p><strong>代码总结 :</strong> count++ 不是一个原子性操作, 他在执行的过程中,有可能被其他线程打断</p><h3 id="5-volatile关键字不能保证原子性"><a href="#5-volatile关键字不能保证原子性" class="headerlink" title="5 volatile关键字不能保证原子性"></a>5 volatile关键字不能保证原子性</h3><p>解决方案 : 我们可以给count++操作添加锁，那么count++操作就是临界区中的代码，临界区中的代码一次只能被一个线程去执行，所以count++就变成了原子操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jia.threadatom2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AtomDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyAtomThread</span> <span class="variable">atom</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyAtomThread</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(atom).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyAtomThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//送冰淇淋的数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Object</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//1,从共享数据中读取数据到本线程栈中.</span></span><br><span class="line">            <span class="comment">//2,修改本线程栈中变量副本的值</span></span><br><span class="line">            <span class="comment">//3,会把本线程栈中变量副本的值赋值给共享数据.</span></span><br><span class="line">            <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                count++;</span><br><span class="line">                System.out.println(<span class="string">&quot;已经送了&quot;</span> + count + <span class="string">&quot;个冰淇淋&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>执行结果：</strong></p><blockquote><p>已经送了1个冰淇淋<br>已经送了2个冰淇淋<br>已经送了3个冰淇淋</p><p>…</p><p>已经送了9997个冰淇淋<br>已经送了9998个冰淇淋<br>已经送了9999个冰淇淋<br>已经送了10000个冰淇淋</p></blockquote><h3 id="6-原子性-Atomic包"><a href="#6-原子性-Atomic包" class="headerlink" title="6 原子性_Atomic包"></a>6 原子性_Atomic包</h3><p>概述：java从JDK1.5开始提供了java.util.concurrent.atomic包(简称Atomic包)，这个包中的原子操作类提供了一种用法简单，性能高效，线程安全地更新一个变量的方式。因为变</p><p>量的类型有很多种，所以在Atomic包里一共提供了13个类，属于4种类型的原子更新方式，分别是原子更新基本类型、原子更新数组、原子更新引用和原子更新属性(字段)。本次我们只讲解</p><p>使用原子的方式更新基本类型，使用原子的方式更新基本类型Atomic包提供了以下3个类：</p><p>AtomicBoolean： 原子更新布尔类型</p><p>AtomicInteger：   原子更新整型</p><p>AtomicLong：    原子更新长整型</p><p>以上3个类提供的方法几乎一模一样，所以本节仅以AtomicInteger为例进行讲解，AtomicInteger的常用方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">AtomicInteger</span><span class="params">()</span>：       初始化一个默认值为<span class="number">0</span>的原子型Integer</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">AtomicInteger</span><span class="params">(<span class="type">int</span> initialValue)</span>：  初始化一个指定值的原子型Integer</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">get</span><span class="params">()</span>:    获取值</span><br><span class="line"><span class="type">int</span> <span class="title function_">getAndIncrement</span><span class="params">()</span>:       以原子方式将当前值加<span class="number">1</span>，注意，这里返回的是自增前的值。</span><br><span class="line"><span class="type">int</span> <span class="title function_">incrementAndGet</span><span class="params">()</span>:      以原子方式将当前值加<span class="number">1</span>，注意，这里返回的是自增后的值。</span><br><span class="line"><span class="type">int</span> <span class="title function_">addAndGet</span><span class="params">(<span class="type">int</span> data)</span>: 以原子方式将输入的数值与实例中的值（AtomicInteger里的value）相加，并返回结果。</span><br><span class="line"><span class="type">int</span> <span class="title function_">getAndSet</span><span class="params">(<span class="type">int</span> value)</span>:    以原子方式设置为newValue的值，并返回旧值。</span><br></pre></td></tr></table></figure><p><strong>代码实现 :</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jia.threadatom3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAtomIntergerDemo1</span> &#123;</span><br><span class="line"><span class="comment">//    public AtomicInteger()：               初始化一个默认值为0的原子型Integer</span></span><br><span class="line"><span class="comment">//    public AtomicInteger(int initialValue)： 初始化一个指定值的原子型Integer</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AtomicInteger</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>();</span><br><span class="line">        System.out.println(ac);</span><br><span class="line"></span><br><span class="line">        <span class="type">AtomicInteger</span> <span class="variable">ac2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">10</span>);</span><br><span class="line">        System.out.println(ac2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jia.threadatom3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAtomIntergerDemo2</span> &#123;</span><br><span class="line"><span class="comment">//    int get():    获取值</span></span><br><span class="line"><span class="comment">//    int getAndIncrement():     以原子方式将当前值加1，注意，这里返回的是自增前的值。</span></span><br><span class="line"><span class="comment">//    int incrementAndGet():     以原子方式将当前值加1，注意，这里返回的是自增后的值。</span></span><br><span class="line"><span class="comment">//    int addAndGet(int data): 以原子方式将参数与对象中的值相加，并返回结果。</span></span><br><span class="line"><span class="comment">//    int getAndSet(int value):  以原子方式设置为newValue的值，并返回旧值。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        AtomicInteger ac1 = new AtomicInteger(10);</span></span><br><span class="line"><span class="comment">//        System.out.println(ac1.get());</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        AtomicInteger ac2 = new AtomicInteger(10);</span></span><br><span class="line"><span class="comment">//        int andIncrement = ac2.getAndIncrement();</span></span><br><span class="line"><span class="comment">//        System.out.println(andIncrement);</span></span><br><span class="line"><span class="comment">//        System.out.println(ac2.get());</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        AtomicInteger ac3 = new AtomicInteger(10);</span></span><br><span class="line"><span class="comment">//        int i = ac3.incrementAndGet();</span></span><br><span class="line"><span class="comment">//        System.out.println(i);//自增后的值</span></span><br><span class="line"><span class="comment">//        System.out.println(ac3.get());</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        AtomicInteger ac4 = new AtomicInteger(10);</span></span><br><span class="line"><span class="comment">//        int i = ac4.addAndGet(20);</span></span><br><span class="line"><span class="comment">//        System.out.println(i);</span></span><br><span class="line"><span class="comment">//        System.out.println(ac4.get());</span></span><br><span class="line"></span><br><span class="line">        <span class="type">AtomicInteger</span> <span class="variable">ac5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">100</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">andSet</span> <span class="operator">=</span> ac5.getAndSet(<span class="number">20</span>);</span><br><span class="line">        System.out.println(andSet);</span><br><span class="line">        System.out.println(ac5.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-AtomicInteger-内存解析"><a href="#7-AtomicInteger-内存解析" class="headerlink" title="7 AtomicInteger-内存解析"></a>7 AtomicInteger-内存解析</h3><p><strong>AtomicInteger原理 :</strong> 自旋锁  + CAS 算法</p><p><strong>CAS算法：</strong></p><p>​    有3个操作数（内存值V， 旧的预期值A，要修改的值B）</p><p>​    当旧的预期值A &#x3D;&#x3D; 内存值   此时修改成功，将V改为B                 </p><p>​    当旧的预期值A！&#x3D;内存值   此时修改失败，不做任何操作                 </p><p>​    并重新获取现在的最新值（这个重新获取的动作就是自旋）</p><h3 id="8-AtomicInteger-源码解析"><a href="#8-AtomicInteger-源码解析" class="headerlink" title="8 AtomicInteger-源码解析"></a>8 AtomicInteger-源码解析</h3><p><strong>代码实现 :</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jia.threadatom4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AtomDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyAtomThread</span> <span class="variable">atom</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyAtomThread</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(atom).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jia.threadatom4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAtomThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="comment">//private volatile int count = 0; //送冰淇淋的数量</span></span><br><span class="line">    <span class="comment">//private Object lock = new Object();</span></span><br><span class="line">    <span class="type">AtomicInteger</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//1,从共享数据中读取数据到本线程栈中.</span></span><br><span class="line">            <span class="comment">//2,修改本线程栈中变量副本的值</span></span><br><span class="line">            <span class="comment">//3,会把本线程栈中变量副本的值赋值给共享数据.</span></span><br><span class="line">            <span class="comment">//synchronized (lock) &#123;</span></span><br><span class="line"><span class="comment">//                count++;</span></span><br><span class="line"><span class="comment">//                ac++;</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> ac.incrementAndGet();</span><br><span class="line">            System.out.println(<span class="string">&quot;已经送了&quot;</span> + count + <span class="string">&quot;个冰淇淋&quot;</span>);</span><br><span class="line">           <span class="comment">// &#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>源码解析 :</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先自增，然后获取自增后的结果</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">incrementAndGet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//+ 1 自增后的结果</span></span><br><span class="line">        <span class="comment">//this 就表示当前的atomicInteger（值）</span></span><br><span class="line">        <span class="comment">//1    自增一次</span></span><br><span class="line">        <span class="keyword">return</span> U.getAndAddInt(<span class="built_in">this</span>, VALUE, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getAndAddInt</span><span class="params">(Object o, <span class="type">long</span> offset, <span class="type">int</span> delta)</span> &#123;</span><br><span class="line">        <span class="comment">//v 旧值</span></span><br><span class="line">        <span class="type">int</span> v;</span><br><span class="line">        <span class="comment">//自旋的过程</span></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="comment">//不断的获取旧值</span></span><br><span class="line">            v = getIntVolatile(o, offset);</span><br><span class="line">            <span class="comment">//如果这个方法的返回值为false，那么继续自旋</span></span><br><span class="line">            <span class="comment">//如果这个方法的返回值为true，那么自旋结束</span></span><br><span class="line">            <span class="comment">//o 表示的就是内存值</span></span><br><span class="line">            <span class="comment">//v 旧值</span></span><br><span class="line">            <span class="comment">//v + delta 修改后的值</span></span><br><span class="line">        &#125; <span class="keyword">while</span> (!weakCompareAndSetInt(o, offset, v, v + delta));</span><br><span class="line">            <span class="comment">//作用：比较内存中的值，旧值是否相等，如果相等就把修改后的值写到内存中，返回true。表示修改成功。</span></span><br><span class="line">            <span class="comment">//                                 如果不相等，无法把修改后的值写到内存中，返回false。表示修改失败。</span></span><br><span class="line">            <span class="comment">//如果修改失败，那么继续自旋。</span></span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-悲观锁和乐观锁"><a href="#9-悲观锁和乐观锁" class="headerlink" title="9 悲观锁和乐观锁"></a>9 悲观锁和乐观锁</h3><p><strong>synchronized和CAS的区别 :</strong> </p><p><strong>相同点：</strong>在多线程情况下，都可以保证共享数据的安全性。</p><p><strong>不同点：</strong>synchronized总是从最坏的角度出发，认为每次获取数据的时候，别人都有可能修改。所以在每                       次操作共享数据之前，都会上锁。（悲观锁）</p><p>​    cas是从乐观的角度出发，假设每次获取数据别人都不会修改，所以不会上锁。只不过在修改共享数据的时候，会检查一下，别人有没有修改过这个数据。</p><p>​    如果别人修改过，那么我再次获取现在最新的值。            </p><p>​     如果别人没有修改过，那么我现在直接修改共享数据的值.(乐观锁）</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程池</title>
      <link href="/2021/01/05/Java_23_%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
      <url>/2021/01/05/Java_23_%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<p>线程池存在的意义：</p><p>​        系统创建一个线程的成本是比较高的，因为它涉及到与操作系统交互，当程序中需要创建大量生存期很短暂的线程时，频繁的创建和销毁线程对系统的资源消耗有可能大于业务处理是对系统资源的消耗，这样就有点”舍本逐末”了。针对这一种情况，为了提高性能，我们就可以采用线程池。线程池在启动的时，会创建大量空闲线程，当我们向线程池提交任务的时，线程池就会启动一个线程来执行该任务。等待任务执行完毕以后，线程并不会死亡，而是再次返回到线程池中称为空闲状态。等待下一次任务的执行。</p><span id="more"></span><p><strong>线程池的设计思路 :</strong></p><ol><li>准备一个任务容器</li><li>一次性启动多个(2个)消费者线程</li><li>刚开始任务容器是空的，所以线程都在wait</li><li>直到一个外部线程向这个任务容器中扔了一个”任务”，就会有一个消费者线程被唤醒</li><li>这个消费者线程取出”任务”，并且执行这个任务，执行完毕后，继续等待下一次任务的到来</li></ol><h3 id="线程池Executors默认线程池"><a href="#线程池Executors默认线程池" class="headerlink" title="线程池Executors默认线程池"></a>线程池Executors默认线程池</h3><p>概述 : JDK对线程池也进行了相关的实现，在真实企业开发中我们也很少去自定义线程池，而是使用JDK中自带的线程池。</p><p>我们可以使用Executors中所提供的<strong>静态</strong>方法来创建线程池</p><p>​    static ExecutorService newCachedThreadPool()   创建一个默认的线程池<br>​    static newFixedThreadPool(int nThreads)        创建一个指定最多线程数量的线程池</p><p><strong>代码实现 :</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.mythreadpool;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//static ExecutorService newCachedThreadPool()   创建一个默认的线程池</span></span><br><span class="line"><span class="comment">//static newFixedThreadPool(int nThreads)    创建一个指定最多线程数量的线程池</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThreadPoolDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1,创建一个默认的线程池对象.池子中默认是空的.默认最多可以容纳int类型的最大值.</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newCachedThreadPool();</span><br><span class="line">        <span class="comment">//Executors --- 可以帮助我们创建线程池对象</span></span><br><span class="line">        <span class="comment">//ExecutorService --- 可以帮助我们控制线程池</span></span><br><span class="line"></span><br><span class="line">        executorService.submit(()-&gt;&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;在执行了&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Thread.sleep(2000);</span></span><br><span class="line"></span><br><span class="line">        executorService.submit(()-&gt;&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;在执行了&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        executorService.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="线程池Executors创建指定上限的线程池"><a href="#线程池Executors创建指定上限的线程池" class="headerlink" title="线程池Executors创建指定上限的线程池"></a>线程池Executors创建指定上限的线程池</h3><p><strong>使用Executors中所提供的静态方法来创建线程池</strong></p><p>​    static ExecutorService newFixedThreadPool(int nThreads) : 创建一个指定最多线程数量的线程池</p><p><strong>代码实现 :</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.mythreadpool;</span><br><span class="line"></span><br><span class="line"><span class="comment">//static ExecutorService newFixedThreadPool(int nThreads)</span></span><br><span class="line"><span class="comment">//创建一个指定最多线程数量的线程池</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThreadPoolDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//参数不是初始值而是最大值</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ThreadPoolExecutor</span> <span class="variable">pool</span> <span class="operator">=</span> (ThreadPoolExecutor) executorService;</span><br><span class="line">        System.out.println(pool.getPoolSize());<span class="comment">//0</span></span><br><span class="line"></span><br><span class="line">        executorService.submit(()-&gt;&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;在执行了&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        executorService.submit(()-&gt;&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;在执行了&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        System.out.println(pool.getPoolSize());<span class="comment">//2</span></span><br><span class="line"><span class="comment">//        executorService.shutdown();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="线程池ThreadPoolExecutor"><a href="#线程池ThreadPoolExecutor" class="headerlink" title="线程池ThreadPoolExecutor"></a>线程池ThreadPoolExecutor</h3><p><strong>创建线程池对象 :</strong> </p><p>ThreadPoolExecutor threadPoolExecutor &#x3D; new ThreadPoolExecutor(核心线程数量,最大线程数量,空闲线程最大存活时间,任务队列,创建线程工厂,任务的拒绝策略);</p><p><strong>代码实现 :</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.mythreadpool;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ArrayBlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThreadPoolDemo3</span> &#123;</span><br><span class="line"><span class="comment">//    参数一：核心线程数量</span></span><br><span class="line"><span class="comment">//    参数二：最大线程数</span></span><br><span class="line"><span class="comment">//    参数三：空闲线程最大存活时间</span></span><br><span class="line"><span class="comment">//    参数四：时间单位</span></span><br><span class="line"><span class="comment">//    参数五：任务队列</span></span><br><span class="line"><span class="comment">//    参数六：创建线程工厂</span></span><br><span class="line"><span class="comment">//    参数七：任务的拒绝策略</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ThreadPoolExecutor</span> <span class="variable">pool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">2</span>,<span class="number">5</span>,<span class="number">2</span>,TimeUnit.SECONDS,<span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">10</span>), Executors.defaultThreadFactory(),<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.AbortPolicy());</span><br><span class="line">        pool.submit(<span class="keyword">new</span> <span class="title class_">MyRunnable</span>());</span><br><span class="line">        pool.submit(<span class="keyword">new</span> <span class="title class_">MyRunnable</span>());</span><br><span class="line"></span><br><span class="line">        pool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程池参数详解"><a href="#线程池参数详解" class="headerlink" title="线程池参数详解"></a>线程池参数详解</h3><p><img src="https://gitee.com/andornot888/andornot_images/raw/master//imgs/java23_1.png" alt="1591165506516"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadPoolExecutor</span><span class="params">(<span class="type">int</span> corePoolSize,</span></span><br><span class="line"><span class="params">                              <span class="type">int</span> maximumPoolSize,</span></span><br><span class="line"><span class="params">                              <span class="type">long</span> keepAliveTime,</span></span><br><span class="line"><span class="params">                              TimeUnit unit,</span></span><br><span class="line"><span class="params">                              BlockingQueue&lt;Runnable&gt; workQueue,</span></span><br><span class="line"><span class="params">                              ThreadFactory threadFactory,</span></span><br><span class="line"><span class="params">                              RejectedExecutionHandler handler)</span></span><br><span class="line">    </span><br><span class="line">corePoolSize：   核心线程的最大值，不能小于<span class="number">0</span></span><br><span class="line">maximumPoolSize：最大线程数，不能小于等于<span class="number">0</span>，maximumPoolSize &gt;= corePoolSize</span><br><span class="line">keepAliveTime：  空闲线程最大存活时间,不能小于<span class="number">0</span></span><br><span class="line">unit：           时间单位</span><br><span class="line">workQueue：      任务队列，不能为<span class="literal">null</span></span><br><span class="line">threadFactory：  创建线程工厂,不能为<span class="literal">null</span>      </span><br><span class="line">handler：        任务的拒绝策略,不能为<span class="literal">null</span>  </span><br></pre></td></tr></table></figure><ul><li><strong>corePoolSize：</strong> 线程池的核心线程数，说白了就是，即便是线程池里没有任何任务，也会有corePoolSize个线程在候着等任务。</li><li><strong>maximumPoolSize：</strong> 最大线程数，不管你提交多少任务，线程池里最多工作线程数就是maximumPoolSize。</li><li><strong>keepAliveTime：</strong> 线程的存活时间。当线程池里的线程数大于corePoolSize时，如果等了keepAliveTime时长还没有任务可执行，则线程退出。</li><li><strong>unit：</strong> 这个用来指定keepAliveTime的单位，比如秒:TimeUnit.SECONDS。</li><li><strong>workQueue：</strong> 一个阻塞队列，提交的任务将会被放到这个队列里。</li><li><strong>threadFactory：</strong> 线程工厂，用来创建线程，主要是为了给线程起名字，默认工厂的线程名字：pool-1-thread-3。</li><li><strong>handler：</strong> 拒绝策略，当线程池里线程被耗尽，且队列也满了的时候会调用。</li></ul><h3 id="线程池执行流程"><a href="#线程池执行流程" class="headerlink" title="线程池执行流程"></a>线程池执行流程</h3><p><img src="https://gitee.com/andornot888/andornot_images/raw/master//imgs/java23_2.png"></p><p>任务被提交到线程池，会先判断当前线程数量是否小于corePoolSize，如果小于则创建线程来执行提交的任务，否则将任务放入workQueue队列，如果workQueue满了，则判断当前线程数量是否小于maximumPoolSize,如果小于则创建线程执行任务，否则就会调用handler，以表示线程池拒绝接收任务。</p><p>这里以jdk1.8.0_111的源代码为例，看一下具体实现。</p><h4 id="1、先看一下线程池的executor方法"><a href="#1、先看一下线程池的executor方法" class="headerlink" title="1、先看一下线程池的executor方法"></a>1、先看一下线程池的executor方法</h4><p><img src="https://gitee.com/andornot888/andornot_images/raw/master//imgs/java23_3.jpeg" alt="图片"></p><ul><li>判断当前活跃线程数是否小于corePoolSize,如果小于，则调用addWorker创建线程执行任务</li><li>如果不小于corePoolSize，则将任务添加到workQueue队列。</li><li>如果放入workQueue失败，则创建线程执行任务，如果这时创建线程失败(当前线程数不小于maximumPoolSize时)，就会调用reject(内部调用handler)拒绝接受任务。</li></ul><h4 id="2、再看下addWorker的方法实现"><a href="#2、再看下addWorker的方法实现" class="headerlink" title="2、再看下addWorker的方法实现"></a>2、再看下addWorker的方法实现</h4><p>这块代码是在创建非核心线程时，即core等于false。判断当前线程数是否大于等于maximumPoolSize，如果大于等于则返回false，即上边说到的③中创建线程失败的情况。</p><p>addWorker方法的下半部分：</p><p><img src="https://gitee.com/andornot888/andornot_images/raw/master//imgs/java23_4.jpeg" alt="图片"></p><ul><li>创建Worker对象，同时也会实例化一个Thread对象。</li><li>启动启动这个线程</li></ul><h4 id="3、再到Worker里看看其实现"><a href="#3、再到Worker里看看其实现" class="headerlink" title="3、再到Worker里看看其实现"></a>3、再到Worker里看看其实现</h4><p><img src="https://gitee.com/andornot888/andornot_images/raw/master//imgs/java23_5.png" alt="图片"></p><p>可以看到在创建Worker时会调用threadFactory来创建一个线程。上边的②中启动一个线程就会触发Worker的run方法被线程调用。</p><h4 id="4、接下来咱们看看runWorker方法的逻辑"><a href="#4、接下来咱们看看runWorker方法的逻辑" class="headerlink" title="4、接下来咱们看看runWorker方法的逻辑"></a>4、接下来咱们看看runWorker方法的逻辑</h4><p><img src="https://gitee.com/andornot888/andornot_images/raw/master//imgs/java23_6.jpg" alt="图片"></p><p>线程调用runWoker，会while循环调用getTask方法从workerQueue里读取任务，然后执行任务。只要getTask方法不返回null,此线程就不会退出。</p><h4 id="5、最后在看看getTask方法实现"><a href="#5、最后在看看getTask方法实现" class="headerlink" title="5、最后在看看getTask方法实现"></a>5、最后在看看getTask方法实现</h4><p><img src="https://gitee.com/andornot888/andornot_images/raw/master//imgs/java23_7.jpg" alt="图片"></p><ul><li>咱们先不管allowCoreThreadTimeOut，这个变量默认值是false。wc&gt;corePoolSize则是判断当前线程数是否大于corePoolSize。</li><li>如果当前线程数大于corePoolSize，则会调用workQueue的poll方法获取任务，超时时间是keepAliveTime。如果超过keepAliveTime时长，poll返回了null，上边提到的while循序就会退出，线程也就执行完了。</li></ul><p>如果当前线程数小于corePoolSize，则会调用workQueue的take方法阻塞在当前</p><h3 id="非默认任务拒绝策略"><a href="#非默认任务拒绝策略" class="headerlink" title="非默认任务拒绝策略"></a>非默认任务拒绝策略</h3><p>RejectedExecutionHandler是jdk提供的一个任务拒绝策略接口，它下面存在4个子类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ThreadPoolExecutor.AbortPolicy:     丢弃任务并抛出RejectedExecutionException异常。是默认的策略。</span><br><span class="line">ThreadPoolExecutor.DiscardPolicy：    丢弃任务，但是不抛出异常 这是不推荐的做法。</span><br><span class="line">ThreadPoolExecutor.DiscardOldestPolicy：    抛弃队列中等待最久的任务 然后把当前任务加入队列中。</span><br><span class="line">ThreadPoolExecutor.CallerRunsPolicy:        调用任务的run()方法绕过线程池直接执行。</span><br></pre></td></tr></table></figure><p>注：明确线程池对多可执行的任务数 &#x3D; 队列容量 + 最大线程数</p><p><strong>案例演示1</strong>：演示ThreadPoolExecutor.AbortPolicy任务处理策略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPoolExecutorDemo01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 核心线程数量为1 ， 最大线程池数量为3, 任务容器的容量为1 ,空闲线程的最大存在时间为20s</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">ThreadPoolExecutor</span> <span class="variable">threadPoolExecutor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">1</span> , <span class="number">3</span> , <span class="number">20</span> , TimeUnit.SECONDS ,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">1</span>) , Executors.defaultThreadFactory() , <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.AbortPolicy()) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提交5个任务，而该线程池最多可以处理4个任务，当我们使用AbortPolicy这个任务处理策略的时候，就会抛出异常</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span> ; x &lt; <span class="number">5</span> ; x++) &#123;</span><br><span class="line">            threadPoolExecutor.submit(() -&gt; &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;----&gt;&gt; 执行了任务&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>控制台输出结果</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>----&gt;&gt; 执行了任务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">3</span>----&gt;&gt; 执行了任务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span>----&gt;&gt; 执行了任务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">3</span>----&gt;&gt; 执行了任务</span><br></pre></td></tr></table></figure><p>控制台报错，仅仅执行了4个任务，有一个任务被丢弃了</p><p><strong>案例演示2</strong>：演示ThreadPoolExecutor.DiscardPolicy任务处理策略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPoolExecutorDemo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 核心线程数量为1 ， 最大线程池数量为3, 任务容器的容量为1 ,空闲线程的最大存在时间为20s</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">ThreadPoolExecutor</span> <span class="variable">threadPoolExecutor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">1</span> , <span class="number">3</span> , <span class="number">20</span> , TimeUnit.SECONDS ,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">1</span>) , Executors.defaultThreadFactory() , <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.DiscardPolicy()) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提交5个任务，而该线程池最多可以处理4个任务，当我们使用DiscardPolicy这个任务处理策略的时候，控制台不会报错</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span> ; x &lt; <span class="number">5</span> ; x++) &#123;</span><br><span class="line">            threadPoolExecutor.submit(() -&gt; &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;----&gt;&gt; 执行了任务&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>控制台输出结果</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>----&gt;&gt; 执行了任务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>----&gt;&gt; 执行了任务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">3</span>----&gt;&gt; 执行了任务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span>----&gt;&gt; 执行了任务</span><br></pre></td></tr></table></figure><p>控制台没有报错，仅仅执行了4个任务，有一个任务被丢弃了</p><p><strong>案例演示3</strong>：演示ThreadPoolExecutor.DiscardOldestPolicy任务处理策略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPoolExecutorDemo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 核心线程数量为1 ， 最大线程池数量为3, 任务容器的容量为1 ,空闲线程的最大存在时间为20s</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        ThreadPoolExecutor threadPoolExecutor;</span><br><span class="line">        threadPoolExecutor = <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">1</span> , <span class="number">3</span> , <span class="number">20</span> , TimeUnit.SECONDS ,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">1</span>) , Executors.defaultThreadFactory() , <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.DiscardOldestPolicy());</span><br><span class="line">        <span class="comment">// 提交5个任务</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span> ; x &lt; <span class="number">5</span> ; x++) &#123;</span><br><span class="line">            <span class="comment">// 定义一个变量，来指定指定当前执行的任务;这个变量需要被final修饰</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> x ;</span><br><span class="line">            threadPoolExecutor.submit(() -&gt; &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;----&gt;&gt; 执行了任务&quot;</span> + y);</span><br><span class="line">            &#125;);     </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>控制台输出结果</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span>----&gt;&gt; 执行了任务<span class="number">2</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>----&gt;&gt; 执行了任务<span class="number">0</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">3</span>----&gt;&gt; 执行了任务<span class="number">3</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>----&gt;&gt; 执行了任务<span class="number">4</span></span><br></pre></td></tr></table></figure><p>由于任务1在线程池中等待时间最长，因此任务1被丢弃。</p><p><strong>案例演示4</strong>：演示ThreadPoolExecutor.CallerRunsPolicy任务处理策略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPoolExecutorDemo04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 核心线程数量为1 ， 最大线程池数量为3, 任务容器的容量为1 ,空闲线程的最大存在时间为20s</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        ThreadPoolExecutor threadPoolExecutor;</span><br><span class="line">        threadPoolExecutor = <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">1</span> , <span class="number">3</span> , <span class="number">20</span> , TimeUnit.SECONDS ,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">1</span>) , Executors.defaultThreadFactory() , <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.CallerRunsPolicy());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提交5个任务</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span> ; x &lt; <span class="number">5</span> ; x++) &#123;</span><br><span class="line">            threadPoolExecutor.submit(() -&gt; &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;----&gt;&gt; 执行了任务&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>控制台输出结果</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>----&gt;&gt; 执行了任务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">3</span>----&gt;&gt; 执行了任务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span>----&gt;&gt; 执行了任务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>----&gt;&gt; 执行了任务</span><br><span class="line">main----&gt;&gt; 执行了任务</span><br></pre></td></tr></table></figure><p>通过控制台的输出，我们可以看到次策略没有通过线程池中的线程执行任务，而是直接调用任务的run()方法绕过线程池直接执行。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程状态</title>
      <link href="/2021/01/02/Java_22_%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81/"/>
      <url>/2021/01/02/Java_22_%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81/</url>
      
        <content type="html"><![CDATA[<p>当线程被创建并启动以后，它既不是一启动就进入了执行状态，也不是一直处于执行状态。线程对象在不同的时期有不同的状态。那么Java中的线程存在哪几种状态呢？</p><span id="more"></span><p>Java中的线程状态被定义在了java.lang.Thread.State枚举类中，State枚举类的源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">State</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">/* 新建 */</span></span><br><span class="line">        NEW , </span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 可运行状态 */</span></span><br><span class="line">        RUNNABLE , </span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 阻塞状态 */</span></span><br><span class="line">        BLOCKED , </span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 无限等待状态 */</span></span><br><span class="line">        WAITING , </span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 计时等待 */</span></span><br><span class="line">        TIMED_WAITING , </span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 终止 */</span></span><br><span class="line">        TERMINATED;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取当前线程的状态</span></span><br><span class="line">    <span class="keyword">public</span> State <span class="title function_">getState</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> jdk.internal.misc.VM.toThreadState(threadStatus);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过源码我们可以看到Java中的线程存在6种状态，每种线程状态的含义如下</p><table><thead><tr><th>线程状态</th><th>具体含义</th></tr></thead><tbody><tr><td>NEW</td><td>一个尚未启动的线程的状态。也称之为初始状态、开始状态。线程刚被创建，但是并未启动。还没调用start方法。MyThread t &#x3D; new MyThread()只有线程对象，没有线程特征。</td></tr><tr><td>RUNNABLE</td><td>当我们调用线程对象的start方法，那么此时线程对象进入了RUNNABLE状态。那么此时才是真正的在JVM进程中创建了一个线程，<strong>线程一经启动并不是立即得到执行，线程的运行与否要听令与CPU的调度</strong>，那么我们把这个<strong>中间状态</strong>称之为可执行状态(RUNNABLE)也就是说<strong>它具备执行的资格，但是并没有真正的执行起来而是在等待CPU调度</strong>。</td></tr><tr><td>BLOCKED</td><td>当一个线程试图获取一个对象锁，而该对象锁被其他的线程持有，则该线程进入Blocked状态；当该线程持有锁时，该线程将变成Runnable状态。</td></tr><tr><td>WAITING</td><td>一个正在等待的线程的状态。也称之为等待状态。造成线程等待的原因有两种，分别是调用Object.wait()、join()方法。处于等待状态的线程，正在等待其他线程去执行一个特定的操作。例如：因为wait()而等待的线程正在等待另一个线程去调用notify()或notifyAll()；一个因为join()而等待的线程正在等待另一个线程结束。</td></tr><tr><td>TIMED_WAITING</td><td>一个在限定时间内等待的线程的状态。也称之为限时等待状态。造成线程限时等待状态的原因有三种，分别是：Thread.sleep(long)，Object.wait(long)、join(long)。</td></tr><tr><td>TERMINATED</td><td>一个完全运行完成的线程的状态。也称之为终止状态、结束状态</td></tr></tbody></table><p>各个状态的转换，如下图所示：</p><p><img src="https://gitee.com/andornot888/andornot_images/raw/master//imgs/java22_1.png" alt="1591163781941"></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阻塞队列</title>
      <link href="/2020/12/29/Java_21_%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97%20-%20%E5%89%AF%E6%9C%AC%20(3)/"/>
      <url>/2020/12/29/Java_21_%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97%20-%20%E5%89%AF%E6%9C%AC%20(3)/</url>
      
        <content type="html"><![CDATA[<h3 id="阻塞队列基本使用"><a href="#阻塞队列基本使用" class="headerlink" title="阻塞队列基本使用"></a>阻塞队列基本使用</h3><ul><li><p>阻塞队列继承结构</p><p><img src="https://gitee.com/andornot888/andornot_images/raw/master//imgs/java21_1.png" alt="06_阻塞队列继承结构"></p></li></ul><span id="more"></span><ul><li><p>常见BlockingQueue:</p><p>ArrayBlockingQueue: 底层是数组,有界</p><p>LinkedBlockingQueue: 底层是链表,无界.但不是真正的无界,最大为int的最大值</p></li><li><p>BlockingQueue的核心方法:</p><p>put(anObject): 将参数放入队列,如果放不进去会阻塞</p><p>take(): 取出第一个数据,取不到会阻塞</p></li><li><p>代码示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 创建阻塞队列的对象,容量为 1</span></span><br><span class="line">        ArrayBlockingQueue&lt;String&gt; arrayBlockingQueue = <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 存储元素</span></span><br><span class="line">        arrayBlockingQueue.put(<span class="string">&quot;汉堡包&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 取元素</span></span><br><span class="line">        System.out.println(arrayBlockingQueue.take());</span><br><span class="line">        System.out.println(arrayBlockingQueue.take()); <span class="comment">// 取不到会阻塞</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;程序结束了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="阻塞队列实现等待唤醒机制"><a href="#阻塞队列实现等待唤醒机制" class="headerlink" title="阻塞队列实现等待唤醒机制"></a>阻塞队列实现等待唤醒机制</h3><ul><li><p>案例需求</p><ul><li><p>生产者类(Cooker)：实现Runnable接口，重写run()方法，设置线程任务</p><p>1.构造方法中接收一个阻塞队列对象</p><p>2.在run方法中循环向阻塞队列中添加包子</p><p>3.打印添加结果</p></li><li><p>消费者类(Foodie)：实现Runnable接口，重写run()方法，设置线程任务</p><p>1.构造方法中接收一个阻塞队列对象</p><p>2.在run方法中循环获取阻塞队列中的包子</p><p>3.打印获取结果</p></li><li><p>测试类(Demo)：里面有main方法，main方法中的代码步骤如下</p><p>创建阻塞队列对象</p><p>创建生产者线程和消费者线程对象,构造方法中传入阻塞队列对象</p><p>分别开启两个线程</p></li></ul></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cooker</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ArrayBlockingQueue&lt;String&gt; bd;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cooker</span><span class="params">(ArrayBlockingQueue&lt;String&gt; bd)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bd = bd;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    生产者步骤：</span></span><br><span class="line"><span class="comment">//            1，判断桌子上是否有汉堡包</span></span><br><span class="line"><span class="comment">//    如果有就等待，如果没有才生产。</span></span><br><span class="line"><span class="comment">//            2，把汉堡包放在桌子上。</span></span><br><span class="line"><span class="comment">//            3，叫醒等待的消费者开吃。</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                bd.put(<span class="string">&quot;汉堡包&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;厨师放入一个汉堡包&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Foodie</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> ArrayBlockingQueue&lt;String&gt; bd;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Foodie</span><span class="params">(ArrayBlockingQueue&lt;String&gt; bd)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bd = bd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//        1，判断桌子上是否有汉堡包。</span></span><br><span class="line"><span class="comment">//        2，如果没有就等待。</span></span><br><span class="line"><span class="comment">//        3，如果有就开吃</span></span><br><span class="line"><span class="comment">//        4，吃完之后，桌子上的汉堡包就没有了</span></span><br><span class="line"><span class="comment">//                叫醒等待的生产者继续生产</span></span><br><span class="line"><span class="comment">//        汉堡包的总数量减一</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//套路:</span></span><br><span class="line">        <span class="comment">//1. while(true)死循环</span></span><br><span class="line">        <span class="comment">//2. synchronized 锁,锁对象要唯一</span></span><br><span class="line">        <span class="comment">//3. 判断,共享数据是否结束. 结束</span></span><br><span class="line">        <span class="comment">//4. 判断,共享数据是否结束. 没有结束</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">take</span> <span class="operator">=</span> bd.take();</span><br><span class="line">                System.out.println(<span class="string">&quot;吃货将&quot;</span> + take + <span class="string">&quot;拿出来吃了&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayBlockingQueue&lt;String&gt; bd = <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Foodie</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Foodie</span>(bd);</span><br><span class="line">        <span class="type">Cooker</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cooker</span>(bd);</span><br><span class="line"></span><br><span class="line">        f.start();</span><br><span class="line">        c.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阻塞队列</title>
      <link href="/2020/12/29/Java_21_%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97/"/>
      <url>/2020/12/29/Java_21_%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h3 id="阻塞队列基本使用"><a href="#阻塞队列基本使用" class="headerlink" title="阻塞队列基本使用"></a>阻塞队列基本使用</h3><ul><li><p>阻塞队列继承结构</p><p><img src="https://gitee.com/andornot888/andornot_images/raw/master//imgs/java21_1.png" alt="06_阻塞队列继承结构"></p></li></ul><span id="more"></span><ul><li><p>常见BlockingQueue:</p><p>ArrayBlockingQueue: 底层是数组,有界</p><p>LinkedBlockingQueue: 底层是链表,无界.但不是真正的无界,最大为int的最大值</p></li><li><p>BlockingQueue的核心方法:</p><p>put(anObject): 将参数放入队列,如果放不进去会阻塞</p><p>take(): 取出第一个数据,取不到会阻塞</p></li><li><p>代码示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 创建阻塞队列的对象,容量为 1</span></span><br><span class="line">        ArrayBlockingQueue&lt;String&gt; arrayBlockingQueue = <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 存储元素</span></span><br><span class="line">        arrayBlockingQueue.put(<span class="string">&quot;汉堡包&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 取元素</span></span><br><span class="line">        System.out.println(arrayBlockingQueue.take());</span><br><span class="line">        System.out.println(arrayBlockingQueue.take()); <span class="comment">// 取不到会阻塞</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;程序结束了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="阻塞队列实现等待唤醒机制"><a href="#阻塞队列实现等待唤醒机制" class="headerlink" title="阻塞队列实现等待唤醒机制"></a>阻塞队列实现等待唤醒机制</h3><ul><li><p>案例需求</p><ul><li><p>生产者类(Cooker)：实现Runnable接口，重写run()方法，设置线程任务</p><p>1.构造方法中接收一个阻塞队列对象</p><p>2.在run方法中循环向阻塞队列中添加包子</p><p>3.打印添加结果</p></li><li><p>消费者类(Foodie)：实现Runnable接口，重写run()方法，设置线程任务</p><p>1.构造方法中接收一个阻塞队列对象</p><p>2.在run方法中循环获取阻塞队列中的包子</p><p>3.打印获取结果</p></li><li><p>测试类(Demo)：里面有main方法，main方法中的代码步骤如下</p><p>创建阻塞队列对象</p><p>创建生产者线程和消费者线程对象,构造方法中传入阻塞队列对象</p><p>分别开启两个线程</p></li></ul></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cooker</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ArrayBlockingQueue&lt;String&gt; bd;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cooker</span><span class="params">(ArrayBlockingQueue&lt;String&gt; bd)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bd = bd;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    生产者步骤：</span></span><br><span class="line"><span class="comment">//            1，判断桌子上是否有汉堡包</span></span><br><span class="line"><span class="comment">//    如果有就等待，如果没有才生产。</span></span><br><span class="line"><span class="comment">//            2，把汉堡包放在桌子上。</span></span><br><span class="line"><span class="comment">//            3，叫醒等待的消费者开吃。</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                bd.put(<span class="string">&quot;汉堡包&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;厨师放入一个汉堡包&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Foodie</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> ArrayBlockingQueue&lt;String&gt; bd;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Foodie</span><span class="params">(ArrayBlockingQueue&lt;String&gt; bd)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bd = bd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//        1，判断桌子上是否有汉堡包。</span></span><br><span class="line"><span class="comment">//        2，如果没有就等待。</span></span><br><span class="line"><span class="comment">//        3，如果有就开吃</span></span><br><span class="line"><span class="comment">//        4，吃完之后，桌子上的汉堡包就没有了</span></span><br><span class="line"><span class="comment">//                叫醒等待的生产者继续生产</span></span><br><span class="line"><span class="comment">//        汉堡包的总数量减一</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//套路:</span></span><br><span class="line">        <span class="comment">//1. while(true)死循环</span></span><br><span class="line">        <span class="comment">//2. synchronized 锁,锁对象要唯一</span></span><br><span class="line">        <span class="comment">//3. 判断,共享数据是否结束. 结束</span></span><br><span class="line">        <span class="comment">//4. 判断,共享数据是否结束. 没有结束</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">take</span> <span class="operator">=</span> bd.take();</span><br><span class="line">                System.out.println(<span class="string">&quot;吃货将&quot;</span> + take + <span class="string">&quot;拿出来吃了&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayBlockingQueue&lt;String&gt; bd = <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Foodie</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Foodie</span>(bd);</span><br><span class="line">        <span class="type">Cooker</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cooker</span>(bd);</span><br><span class="line"></span><br><span class="line">        f.start();</span><br><span class="line">        c.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生产者消费者案例</title>
      <link href="/2020/12/28/Java_20_%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A1%88%E4%BE%8B/"/>
      <url>/2020/12/28/Java_20_%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="生产者和消费者模式概述"><a href="#生产者和消费者模式概述" class="headerlink" title="生产者和消费者模式概述"></a>生产者和消费者模式概述</h3><ul><li><p>概述</p><p>生产者消费者模式是一个十分经典的多线程协作的模式，弄懂生产者消费者问题能够让我们对多线程编程的理解更加深刻。</p><p>所谓生产者消费者问题，实际上主要是包含了两类线程：</p><p>​    一类是生产者线程用于生产数据</p><p>​    一类是消费者线程用于消费数据</p><p>为了解耦生产者和消费者的关系，通常会采用共享的数据区域，就像是一个仓库</p><p>生产者生产数据之后直接放置在共享数据区中，并不需要关心消费者的行为</p><p>消费者只需要从共享数据区中去获取数据，并不需要关心生产者的行为</p></li></ul><span id="more"></span><ul><li><p>Object类的等待和唤醒方法</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>void wait()</td><td>导致当前线程等待，直到另一个线程调用该对象的 notify()方法或 notifyAll()方法</td></tr><tr><td>void notify()</td><td>唤醒正在等待对象监视器的单个线程</td></tr><tr><td>void notifyAll()</td><td>唤醒正在等待对象监视器的所有线程</td></tr></tbody></table></li></ul><h3 id="生产者和消费者案例"><a href="#生产者和消费者案例" class="headerlink" title="生产者和消费者案例"></a>生产者和消费者案例</h3><ul><li><p>案例需求</p><ul><li><p>桌子类(Desk)：定义表示包子数量的变量,定义锁对象变量,定义标记桌子上有无包子的变量</p></li><li><p>生产者类(Cooker)：实现Runnable接口，重写run()方法，设置线程任务</p><p>1.判断是否有包子,决定当前线程是否执行</p><p>2.如果有包子,就进入等待状态,如果没有包子,继续执行,生产包子</p><p>3.生产包子之后,更新桌子上包子状态,唤醒消费者消费包子</p></li><li><p>消费者类(Foodie)：实现Runnable接口，重写run()方法，设置线程任务</p><p>1.判断是否有包子,决定当前线程是否执行</p><p>2.如果没有包子,就进入等待状态,如果有包子,就消费包子</p><p>3.消费包子后,更新桌子上包子状态,唤醒生产者生产包子</p></li><li><p>测试类(Demo)：里面有main方法，main方法中的代码步骤如下</p><p>创建生产者线程和消费者线程对象</p><p>分别开启两个线程</p></li></ul></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Desk</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个标记</span></span><br><span class="line">    <span class="comment">//true 就表示桌子上有汉堡包的,此时允许吃货执行</span></span><br><span class="line">    <span class="comment">//false 就表示桌子上没有汉堡包的,此时允许厨师执行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//汉堡包的总数量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//锁对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cooker</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"><span class="comment">//    生产者步骤：</span></span><br><span class="line"><span class="comment">//            1，判断桌子上是否有汉堡包</span></span><br><span class="line"><span class="comment">//    如果有就等待，如果没有才生产。</span></span><br><span class="line"><span class="comment">//            2，把汉堡包放在桌子上。</span></span><br><span class="line"><span class="comment">//            3，叫醒等待的消费者开吃。</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Desk.lock)&#123;</span><br><span class="line">                <span class="keyword">if</span>(Desk.count == <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(!Desk.flag)&#123;</span><br><span class="line">                        <span class="comment">//生产</span></span><br><span class="line">                        System.out.println(<span class="string">&quot;厨师正在生产汉堡包&quot;</span>);</span><br><span class="line">                        Desk.flag = <span class="literal">true</span>;</span><br><span class="line">                        Desk.lock.notifyAll();</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            Desk.lock.wait();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Foodie</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//        1，判断桌子上是否有汉堡包。</span></span><br><span class="line"><span class="comment">//        2，如果没有就等待。</span></span><br><span class="line"><span class="comment">//        3，如果有就开吃</span></span><br><span class="line"><span class="comment">//        4，吃完之后，桌子上的汉堡包就没有了</span></span><br><span class="line"><span class="comment">//                叫醒等待的生产者继续生产</span></span><br><span class="line"><span class="comment">//        汉堡包的总数量减一</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//套路:</span></span><br><span class="line">            <span class="comment">//1. while(true)死循环</span></span><br><span class="line">            <span class="comment">//2. synchronized 锁,锁对象要唯一</span></span><br><span class="line">            <span class="comment">//3. 判断,共享数据是否结束. 结束</span></span><br><span class="line">            <span class="comment">//4. 判断,共享数据是否结束. 没有结束</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Desk.lock)&#123;</span><br><span class="line">                <span class="keyword">if</span>(Desk.count == <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(Desk.flag)&#123;</span><br><span class="line">                        <span class="comment">//有</span></span><br><span class="line">                        System.out.println(<span class="string">&quot;吃货在吃汉堡包&quot;</span>);</span><br><span class="line">                        Desk.flag = <span class="literal">false</span>;</span><br><span class="line">                        Desk.lock.notifyAll();</span><br><span class="line">                        Desk.count--;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="comment">//没有就等待</span></span><br><span class="line">                        <span class="comment">//使用什么对象当做锁,那么就必须用这个对象去调用等待和唤醒的方法.</span></span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            Desk.lock.wait();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*消费者步骤：</span></span><br><span class="line"><span class="comment">        1，判断桌子上是否有汉堡包。</span></span><br><span class="line"><span class="comment">        2，如果没有就等待。</span></span><br><span class="line"><span class="comment">        3，如果有就开吃</span></span><br><span class="line"><span class="comment">        4，吃完之后，桌子上的汉堡包就没有了</span></span><br><span class="line"><span class="comment">                叫醒等待的生产者继续生产</span></span><br><span class="line"><span class="comment">        汉堡包的总数量减一*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*生产者步骤：</span></span><br><span class="line"><span class="comment">        1，判断桌子上是否有汉堡包</span></span><br><span class="line"><span class="comment">        如果有就等待，如果没有才生产。</span></span><br><span class="line"><span class="comment">        2，把汉堡包放在桌子上。</span></span><br><span class="line"><span class="comment">        3，叫醒等待的消费者开吃。*/</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Foodie</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Foodie</span>();</span><br><span class="line">        <span class="type">Cooker</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cooker</span>();</span><br><span class="line"></span><br><span class="line">        f.start();</span><br><span class="line">        c.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="生产者和消费者案例优化"><a href="#生产者和消费者案例优化" class="headerlink" title="生产者和消费者案例优化"></a>生产者和消费者案例优化</h3><ul><li><p>需求</p><ul><li>将Desk类中的变量,采用面向对象的方式封装起来</li><li>生产者和消费者类中构造方法接收Desk类对象,之后在run方法中进行使用</li><li>创建生产者和消费者线程对象,构造方法中传入Desk类对象</li><li>开启两个线程</li></ul></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Desk</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个标记</span></span><br><span class="line">    <span class="comment">//true 就表示桌子上有汉堡包的,此时允许吃货执行</span></span><br><span class="line">    <span class="comment">//false 就表示桌子上没有汉堡包的,此时允许厨师执行</span></span><br><span class="line">    <span class="comment">//public static boolean flag = false;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> flag;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//汉堡包的总数量</span></span><br><span class="line">    <span class="comment">//public static int count = 10;</span></span><br><span class="line">    <span class="comment">//以后我们在使用这种必须有默认值的变量</span></span><br><span class="line">   <span class="comment">// private int count = 10;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//锁对象</span></span><br><span class="line">    <span class="comment">//public static final Object lock = new Object();</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Desk</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="literal">false</span>,<span class="number">10</span>); <span class="comment">// 在空参内部调用带参,对成员变量进行赋值,之后就可以直接使用成员变量了</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Desk</span><span class="params">(<span class="type">boolean</span> flag, <span class="type">int</span> count)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">        <span class="built_in">this</span>.count = count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFlag</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFlag</span><span class="params">(<span class="type">boolean</span> flag)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCount</span><span class="params">(<span class="type">int</span> count)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.count = count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getLock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> lock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Desk&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;flag=&quot;</span> + flag +</span><br><span class="line">                <span class="string">&quot;, count=&quot;</span> + count +</span><br><span class="line">                <span class="string">&quot;, lock=&quot;</span> + lock +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cooker</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Desk desk;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cooker</span><span class="params">(Desk desk)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.desk = desk;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    生产者步骤：</span></span><br><span class="line"><span class="comment">//            1，判断桌子上是否有汉堡包</span></span><br><span class="line"><span class="comment">//    如果有就等待，如果没有才生产。</span></span><br><span class="line"><span class="comment">//            2，把汉堡包放在桌子上。</span></span><br><span class="line"><span class="comment">//            3，叫醒等待的消费者开吃。</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (desk.getLock())&#123;</span><br><span class="line">                <span class="keyword">if</span>(desk.getCount() == <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//System.out.println(&quot;验证一下是否执行了&quot;);</span></span><br><span class="line">                    <span class="keyword">if</span>(!desk.isFlag())&#123;</span><br><span class="line">                        <span class="comment">//生产</span></span><br><span class="line">                        System.out.println(<span class="string">&quot;厨师正在生产汉堡包&quot;</span>);</span><br><span class="line">                        desk.setFlag(<span class="literal">true</span>);</span><br><span class="line">                        desk.getLock().notifyAll();</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            desk.getLock().wait();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Foodie</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Desk desk;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Foodie</span><span class="params">(Desk desk)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.desk = desk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//        1，判断桌子上是否有汉堡包。</span></span><br><span class="line"><span class="comment">//        2，如果没有就等待。</span></span><br><span class="line"><span class="comment">//        3，如果有就开吃</span></span><br><span class="line"><span class="comment">//        4，吃完之后，桌子上的汉堡包就没有了</span></span><br><span class="line"><span class="comment">//                叫醒等待的生产者继续生产</span></span><br><span class="line"><span class="comment">//        汉堡包的总数量减一</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//套路:</span></span><br><span class="line">            <span class="comment">//1. while(true)死循环</span></span><br><span class="line">            <span class="comment">//2. synchronized 锁,锁对象要唯一</span></span><br><span class="line">            <span class="comment">//3. 判断,共享数据是否结束. 结束</span></span><br><span class="line">            <span class="comment">//4. 判断,共享数据是否结束. 没有结束</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (desk.getLock())&#123;</span><br><span class="line">                <span class="keyword">if</span>(desk.getCount() == <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//System.out.println(&quot;验证一下是否执行了&quot;);</span></span><br><span class="line">                    <span class="keyword">if</span>(desk.isFlag())&#123;</span><br><span class="line">                        <span class="comment">//有</span></span><br><span class="line">                        System.out.println(<span class="string">&quot;吃货在吃汉堡包&quot;</span>);</span><br><span class="line">                        desk.setFlag(<span class="literal">false</span>);</span><br><span class="line">                        desk.getLock().notifyAll();</span><br><span class="line">                        desk.setCount(desk.getCount() - <span class="number">1</span>);</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="comment">//没有就等待</span></span><br><span class="line">                        <span class="comment">//使用什么对象当做锁,那么就必须用这个对象去调用等待和唤醒的方法.</span></span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            desk.getLock().wait();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*消费者步骤：</span></span><br><span class="line"><span class="comment">        1，判断桌子上是否有汉堡包。</span></span><br><span class="line"><span class="comment">        2，如果没有就等待。</span></span><br><span class="line"><span class="comment">        3，如果有就开吃</span></span><br><span class="line"><span class="comment">        4，吃完之后，桌子上的汉堡包就没有了</span></span><br><span class="line"><span class="comment">                叫醒等待的生产者继续生产</span></span><br><span class="line"><span class="comment">        汉堡包的总数量减一*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*生产者步骤：</span></span><br><span class="line"><span class="comment">        1，判断桌子上是否有汉堡包</span></span><br><span class="line"><span class="comment">        如果有就等待，如果没有才生产。</span></span><br><span class="line"><span class="comment">        2，把汉堡包放在桌子上。</span></span><br><span class="line"><span class="comment">        3，叫醒等待的消费者开吃。*/</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Desk</span> <span class="variable">desk</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Desk</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Foodie</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Foodie</span>(desk);</span><br><span class="line">        <span class="type">Cooker</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cooker</span>(desk);</span><br><span class="line"></span><br><span class="line">        f.start();</span><br><span class="line">        c.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>死锁</title>
      <link href="/2020/12/27/Java_19_%E6%AD%BB%E9%94%81/"/>
      <url>/2020/12/27/Java_19_%E6%AD%BB%E9%94%81/</url>
      
        <content type="html"><![CDATA[<ul><li><p>概述</p><p>线程死锁是指由于两个或者多个线程互相持有对方所需要的资源，导致这些线程处于等待状态，无法前往执行</p></li><li><p>什么情况下会产生死锁</p><ol><li><p>资源有限</p></li><li><p>同步嵌套</p></li></ol></li></ul><span id="more"></span><ul><li><p>代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">objA</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">objB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (objA)&#123;</span><br><span class="line">                    <span class="comment">//线程一</span></span><br><span class="line">                    <span class="keyword">synchronized</span> (objB)&#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;小康同学正在走路&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (objB)&#123;</span><br><span class="line">                    <span class="comment">//线程二</span></span><br><span class="line">                    <span class="keyword">synchronized</span> (objA)&#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;小薇同学正在走路&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程同步</title>
      <link href="/2020/12/23/Java_18_%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/"/>
      <url>/2020/12/23/Java_18_%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[<h3 id="卖票案例"><a href="#卖票案例" class="headerlink" title="卖票案例"></a>卖票案例</h3><ul><li><p>案例需求</p><p>某电影院目前正在上映国产大片，共有100张票，而它有3个窗口卖票，请设计一个程序模拟该电影院卖票</p></li><li><p>实现步骤</p><ul><li><p>定义一个类SellTicket实现Runnable接口，里面定义一个成员变量：private int tickets &#x3D; 100;</p></li><li><p>在SellTicket类中重写run()方法实现卖票，代码步骤如下</p></li><li><p>判断票数大于0，就卖票，并告知是哪个窗口卖的</p></li><li><p>卖了票之后，总票数要减1</p></li><li><p>票卖没了，线程停止</p></li><li><p>定义一个测试类SellTicketDemo，里面有main方法，代码步骤如下</p></li><li><p>创建SellTicket类的对象</p></li><li><p>创建三个Thread类的对象，把SellTicket对象作为构造方法的参数，并给出对应的窗口名称</p></li><li><p>启动线程</p></li></ul></li></ul><span id="more"></span><ul><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SellTicket</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">tickets</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="comment">//在SellTicket类中重写run()方法实现卖票，代码步骤如下</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(ticket &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="comment">//卖完了</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    ticket--;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;在卖票,还剩下&quot;</span> + ticket + <span class="string">&quot;张票&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SellTicketDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建SellTicket类的对象</span></span><br><span class="line">        <span class="type">SellTicket</span> <span class="variable">st</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SellTicket</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建三个Thread类的对象，把SellTicket对象作为构造方法的参数，并给出对应的窗口名称</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(st,<span class="string">&quot;窗口1&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(st,<span class="string">&quot;窗口2&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(st,<span class="string">&quot;窗口3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//启动线程</span></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="卖票案例的问题"><a href="#卖票案例的问题" class="headerlink" title="卖票案例的问题"></a>卖票案例的问题</h3><ul><li><p>卖票出现了问题</p><ul><li><p>相同的票出现了多次</p></li><li><p>出现了负数的票</p></li></ul></li><li><p>问题产生原因</p><p>线程执行的随机性导致的,可能在卖票过程中丢失cpu的执行权,导致出现问题</p></li></ul><h3 id="同步代码块解决数据安全问题"><a href="#同步代码块解决数据安全问题" class="headerlink" title="同步代码块解决数据安全问题"></a>同步代码块解决数据安全问题</h3><ul><li><p>安全问题出现的条件</p><ul><li><p>是多线程环境</p></li><li><p>有共享数据</p></li><li><p>有多条语句操作共享数据</p></li></ul></li><li><p>如何解决多线程安全问题呢?</p><ul><li>基本思想：让程序没有安全问题的环境</li></ul></li><li><p>怎么实现呢?</p><ul><li><p>把多条语句操作共享数据的代码给锁起来，让任意时刻只能有一个线程执行即可</p></li><li><p>Java提供了同步代码块的方式来解决</p></li></ul></li><li><p>同步代码块格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(任意对象) &#123; </span><br><span class="line">多条语句操作共享数据的代码 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>synchronized(任意对象)：就相当于给代码加锁了，任意对象就可以看成是一把锁</p></li><li><p>同步的好处和弊端  </p><ul><li><p>好处：解决了多线程的数据安全问题</p></li><li><p>弊端：当线程很多时，因为每个线程都会去判断同步上的锁，这是很耗费资源的，无形中会降低程序的运行效率</p></li></ul></li><li><p>代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SellTicket</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">tickets</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (obj) &#123; <span class="comment">// 对可能有安全问题的代码加锁,多个线程必须使用同一把锁</span></span><br><span class="line">                <span class="comment">//t1进来后，就会把这段代码给锁起来</span></span><br><span class="line">                <span class="keyword">if</span> (tickets &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                        <span class="comment">//t1休息100毫秒</span></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//窗口1正在出售第100张票</span></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;正在出售第&quot;</span> + tickets + <span class="string">&quot;张票&quot;</span>);</span><br><span class="line">                    tickets--; <span class="comment">//tickets = 99;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//t1出来了，这段代码的锁就被释放了</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SellTicketDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SellTicket</span> <span class="variable">st</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SellTicket</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(st, <span class="string">&quot;窗口1&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(st, <span class="string">&quot;窗口2&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(st, <span class="string">&quot;窗口3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="同步方法解决数据安全问题"><a href="#同步方法解决数据安全问题" class="headerlink" title="同步方法解决数据安全问题"></a>同步方法解决数据安全问题</h3><ul><li><p>同步方法的格式</p><p>同步方法：就是把synchronized关键字加到方法上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="keyword">synchronized</span> 返回值类型 方法名(方法参数) &#123; </span><br><span class="line">方法体；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同步方法的锁对象是什么呢?</p><p>​    this</p></li><li><p>静态同步方法</p><p>同步静态方法：就是把synchronized关键字加到静态方法上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="keyword">static</span> <span class="keyword">synchronized</span> 返回值类型 方法名(方法参数) &#123; </span><br><span class="line">方法体；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同步静态方法的锁对象是什么呢?</p><p>​    类名.class</p></li><li><p>代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">ticketCount</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;窗口一&quot;</span>.equals(Thread.currentThread().getName()))&#123;</span><br><span class="line">                <span class="comment">//同步方法</span></span><br><span class="line">                <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> synchronizedMthod();</span><br><span class="line">                <span class="keyword">if</span>(result)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;窗口二&quot;</span>.equals(Thread.currentThread().getName()))&#123;</span><br><span class="line">                <span class="comment">//同步代码块</span></span><br><span class="line">                <span class="keyword">synchronized</span> (MyRunnable.class)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(ticketCount == <span class="number">0</span>)&#123;</span><br><span class="line">                       <span class="keyword">break</span>;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                        ticketCount--;</span><br><span class="line">                        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;在卖票,还剩下&quot;</span> + ticketCount + <span class="string">&quot;张票&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="type">boolean</span> <span class="title function_">synchronizedMthod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(ticketCount == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">10</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            ticketCount--;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;在卖票,还剩下&quot;</span> + ticketCount + <span class="string">&quot;张票&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">          <span class="type">MyRunnable</span> <span class="variable">mr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRunnable</span>();</span><br><span class="line"><span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(mr);</span><br><span class="line">      <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(mr);</span><br><span class="line"></span><br><span class="line">      t1.setName(<span class="string">&quot;窗口一&quot;</span>);</span><br><span class="line">      t2.setName(<span class="string">&quot;窗口二&quot;</span>);</span><br><span class="line"></span><br><span class="line">      t1.start();</span><br><span class="line">      t2.start();</span><br><span class="line">  &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="Lock锁"><a href="#Lock锁" class="headerlink" title="Lock锁"></a>Lock锁</h3><p>虽然我们可以理解同步代码块和同步方法的锁对象问题，但是我们并没有直接看到在哪里加上了锁，在哪里释放了锁，为了更清晰的表达如何加锁和释放锁，JDK5以后提供了一个新的锁对象Lock</p><p>Lock是接口不能直接实例化，这里采用它的实现类ReentrantLock来实例化</p><ul><li><p>ReentrantLock构造方法</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>ReentrantLock()</td><td>创建一个ReentrantLock的实例</td></tr></tbody></table></li><li><p>加锁解锁方法</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>void lock()</td><td>获得锁</td></tr><tr><td>void unlock()</td><td>释放锁</td></tr></tbody></table></li><li><p>代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Ticket</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="comment">//票的数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">//synchronized (obj)&#123;//多个线程必须使用同一把锁.</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                lock.lock();</span><br><span class="line">                <span class="keyword">if</span> (ticket &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">//卖完了</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    ticket--;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;在卖票,还剩下&quot;</span> + ticket + <span class="string">&quot;张票&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Ticket</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Ticket</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(ticket);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(ticket);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(ticket);</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;窗口一&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;窗口二&quot;</span>);</span><br><span class="line">        t3.setName(<span class="string">&quot;窗口三&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>守护线程</title>
      <link href="/2020/12/22/Java_17_%E5%AE%88%E6%8A%A4%E7%BA%BF%E7%A8%8B/"/>
      <url>/2020/12/22/Java_17_%E5%AE%88%E6%8A%A4%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<ul><li><p>相关方法</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>void setDaemon(boolean on)</td><td>将此线程标记为守护线程，当运行的线程都是守护线程时，Java虚拟机将退出</td></tr></tbody></table></li></ul><span id="more"></span><ul><li><p>代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread1</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.println(getName() + <span class="string">&quot;---&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread2</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(getName() + <span class="string">&quot;---&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyThread1</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread1</span>();</span><br><span class="line">        <span class="type">MyThread2</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread2</span>();</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;女神&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;备胎&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把第二个线程设置为守护线程</span></span><br><span class="line">        <span class="comment">//当普通线程执行完之后,那么守护线程也没有继续运行下去的必要了.</span></span><br><span class="line">        t2.setDaemon(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程优先级</title>
      <link href="/2020/12/21/Java_16_%E7%BA%BF%E7%A8%8B%E4%BC%98%E5%85%88%E7%BA%A7/"/>
      <url>/2020/12/21/Java_16_%E7%BA%BF%E7%A8%8B%E4%BC%98%E5%85%88%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<ul><li><p>线程调度</p><ul><li><p>两种调度方式</p><ul><li>分时调度模型：所有线程轮流使用 CPU 的使用权，平均分配每个线程占用 CPU 的时间片</li><li>抢占式调度模型：优先让优先级高的线程使用 CPU，如果线程的优先级相同，那么会随机选择一个，优先级高的线程获取的 CPU 时间片相对多一些</li></ul></li><li><p>Java使用的是抢占式调度模型</p></li><li><p>随机性</p><p>假如计算机只有一个 CPU，那么 CPU 在某一个时刻只能执行一条指令，线程只有得到CPU时间片，也就是使用权，才可以执行指令。所以说多线程程序的执行是有随机性，因为谁抢到CPU的使用权是不一定的</p></li></ul></li></ul><span id="more"></span><p><img src="https://gitee.com/andornot888/andornot_images/raw/master//imgs/java16_1.png" alt="05_多线程示例图"></p><ul><li><p>优先级相关方法</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>final int getPriority()</td><td>返回此线程的优先级</td></tr><tr><td>final void setPriority(int newPriority)</td><td>更改此线程的优先级线程默认优先级是5；线程优先级的范围是：1-10</td></tr></tbody></table></li><li><p>代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCallable</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;String&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;---&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;线程执行完毕了&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//优先级: 1 - 10 默认值:5</span></span><br><span class="line">        <span class="type">MyCallable</span> <span class="variable">mc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyCallable</span>();</span><br><span class="line"></span><br><span class="line">        FutureTask&lt;String&gt; ft = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(mc);</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(ft);</span><br><span class="line">        t1.setName(<span class="string">&quot;飞机&quot;</span>);</span><br><span class="line">        t1.setPriority(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//System.out.println(t1.getPriority());//5</span></span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="type">MyCallable</span> <span class="variable">mc2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyCallable</span>();</span><br><span class="line"></span><br><span class="line">        FutureTask&lt;String&gt; ft2 = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(mc2);</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(ft2);</span><br><span class="line">        t2.setName(<span class="string">&quot;坦克&quot;</span>);</span><br><span class="line">        t2.setPriority(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//System.out.println(t2.getPriority());//5</span></span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现多线程的三种方式</title>
      <link href="/2020/12/20/Java_15_%E5%AE%9E%E7%8E%B0%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
      <url>/2020/12/20/Java_15_%E5%AE%9E%E7%8E%B0%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p> 实现多线程有以下三种形式：</p><ul><li>继承Thread类</li><li>实现Runnable接口</li><li>实现Callable接口</li></ul><span id="more"></span><h3 id="实现多线程方式一：继承Thread类"><a href="#实现多线程方式一：继承Thread类" class="headerlink" title="实现多线程方式一：继承Thread类"></a>实现多线程方式一：继承Thread类</h3><ul><li><p>方法介绍</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>void run()</td><td>在线程开启后，此方法将被调用执行</td></tr><tr><td>void start()</td><td>使此线程开始执行，Java虚拟机会调用run方法()</td></tr></tbody></table></li><li><p>实现步骤</p><ul><li>定义一个类MyThread继承Thread类</li><li>在MyThread类中重写run()方法</li><li>创建MyThread类的对象</li><li>启动线程</li></ul></li><li><p>代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThreadDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">my1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">my2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        my1.run();</span></span><br><span class="line"><span class="comment">//        my2.run();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//void start() 导致此线程开始执行; Java虚拟机调用此线程的run方法</span></span><br><span class="line">        my1.start();</span><br><span class="line">        my2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>两个小问题</p><ul><li><p>为什么要重写run()方法？</p><p>因为run()是用来封装被线程执行的代码</p></li><li><p>run()方法和start()方法的区别？</p><p>run()：封装线程执行的代码，直接调用，相当于普通方法的调用</p><p><strong>start()：启动线程；然后由JVM调用此线程的run()方法</strong></p><ul><li><blockquote><p>Causes this thread to begin execution; the Java Virtual Machine calls the <code>run</code> method of this thread.</p></blockquote><p>start()启动线程，Java虚拟机调用这个线程的run方法。</p></li><li><blockquote><p>The result is that two threads are running concurrently: the current thread (which returns from the call to the <code>start</code> method) and the other thread (which executes its <code>run</code> method).</p></blockquote><p>两个线程同时运行:当前线程(它从对start方法的调用中返回)和另一个线程(它执行它的run方法)</p></li><li><blockquote><p>It is never legal to start a thread more than once.</p><p>In particular, a thread may not be restarted once it has completed execution.</p></blockquote><p>多次启动一个线程是不合法的。</p><p>线程完成执行后，不能重新启动，否则会报异常IllegalThreadStateException</p></li><li><blockquote><p>@exception  IllegalThreadStateException  if the thread was already started.</p></blockquote></li></ul></li></ul></li></ul><h3 id="实现多线程方式二：实现Runnable接口"><a href="#实现多线程方式二：实现Runnable接口" class="headerlink" title="实现多线程方式二：实现Runnable接口"></a>实现多线程方式二：实现Runnable接口</h3><ul><li><p>Thread构造方法</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>Thread(Runnable target)</td><td>分配一个新的Thread对象</td></tr><tr><td>Thread(Runnable target, String name)</td><td>分配一个新的Thread对象</td></tr></tbody></table></li><li><p>实现步骤</p><ul><li>定义一个类MyRunnable实现Runnable接口</li><li>在MyRunnable类中重写run()方法</li><li>创建MyRunnable类的对象</li><li>创建Thread类的对象，把MyRunnable对象作为构造方法的参数</li><li>启动线程</li></ul></li><li><p>代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRunnableDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建MyRunnable类的对象</span></span><br><span class="line">        <span class="type">MyRunnable</span> <span class="variable">my</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRunnable</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建Thread类的对象，把MyRunnable对象作为构造方法的参数</span></span><br><span class="line">        <span class="comment">//Thread(Runnable target)</span></span><br><span class="line"><span class="comment">//        Thread t1 = new Thread(my);</span></span><br><span class="line"><span class="comment">//        Thread t2 = new Thread(my);</span></span><br><span class="line">        <span class="comment">//Thread(Runnable target, String name)</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(my,<span class="string">&quot;坦克&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(my,<span class="string">&quot;飞机&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//启动线程</span></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="实现多线程方式三-实现Callable接口"><a href="#实现多线程方式三-实现Callable接口" class="headerlink" title="实现多线程方式三: 实现Callable接口"></a>实现多线程方式三: 实现Callable接口</h3><ul><li><p>方法介绍</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>V call()</td><td>计算结果，如果无法计算结果，则抛出一个异常</td></tr><tr><td>FutureTask(Callable&lt;V&gt; callable)</td><td>创建一个 FutureTask，一旦运行就执行给定的 Callable</td></tr><tr><td>V get()</td><td>如有必要，等待计算完成，然后获取其结果</td></tr></tbody></table></li><li><p>实现步骤</p><ul><li>定义一个类MyCallable实现Callable接口</li><li>在MyCallable类中重写call()方法</li><li>创建MyCallable类的对象</li><li>创建Future的实现类FutureTask对象，把MyCallable对象作为构造方法的参数</li><li>创建Thread类的对象，把FutureTask对象作为构造方法的参数</li><li>启动线程</li><li>再调用get方法，就可以获取线程结束之后的结果。</li></ul></li><li><p>查看源码</p><ul><li>FutureTask实现了Runnable接口和Future接口</li></ul></li><li><p>代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCallable</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;String&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;跟女孩表白&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回值就表示线程运行完毕之后的结果</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;答应&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        <span class="comment">//线程开启之后需要执行里面的call方法</span></span><br><span class="line">        <span class="type">MyCallable</span> <span class="variable">mc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyCallable</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Thread t1 = new Thread(mc);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//可以获取线程执行完毕之后的结果.也可以作为参数传递给Thread对象</span></span><br><span class="line">        FutureTask&lt;String&gt; ft = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(mc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建线程对象</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(ft);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//String s = ft.get();</span></span><br><span class="line">        <span class="comment">//开启线程</span></span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> ft.get();</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="三种实现方式的对比"><a href="#三种实现方式的对比" class="headerlink" title="三种实现方式的对比"></a>三种实现方式的对比</h3><ul><li>实现Runnable、Callable接口<ul><li>好处: 扩展性强，实现该接口的同时还可以继承其他的类</li><li>缺点: 编程相对复杂，不能直接使用Thread类中的方法</li></ul></li><li>继承Thread类<ul><li>好处: 编程比较简单，可以直接使用Thread类中的方法</li><li>缺点: 可以扩展性较差，不能再继承其他的类</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML常用转义字符</title>
      <link href="/2020/12/19/HTML_2_CommonEscape/"/>
      <url>/2020/12/19/HTML_2_CommonEscape/</url>
      
        <content type="html"><![CDATA[<p>实体名称易理解，但不一定支持所有浏览器；</p><p>实体(Entity)编号，各种浏览器都能处理。</p><span id="more"></span><p><img src="https://gitee.com/andornot888/andornot_images/raw/master//imgs/HTML2_1.png" alt="image-20211217224643782"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打开新标签页</title>
      <link href="/2020/12/17/HTML_1_OpenNewTab/"/>
      <url>/2020/12/17/HTML_1_OpenNewTab/</url>
      
        <content type="html"><![CDATA[<p>打开新标签页需配置&lt;a&gt;标签target属性为<code>_blank</code>。</p><ul><li>_parent：在父窗口中打开链接。</li><li>_self：默认，当前页面跳转。</li><li>_top：在当前窗体打开链接，并替换当前的整个窗体(框架页)。</li><li>_blank：新窗口打开。</li></ul><span id="more"></span><p>打开新标签页：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.xxx.com/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>访问xxx!<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>去除文件名的扩展名</title>
      <link href="/2020/12/16/Java_13_%E5%8E%BB%E9%99%A4%E6%96%87%E4%BB%B6%E5%90%8D%E7%9A%84%E6%89%A9%E5%B1%95%E5%90%8D/"/>
      <url>/2020/12/16/Java_13_%E5%8E%BB%E9%99%A4%E6%96%87%E4%BB%B6%E5%90%8D%E7%9A%84%E6%89%A9%E5%B1%95%E5%90%8D/</url>
      
        <content type="html"><![CDATA[<p>在最后一个点，去除文件名的扩展名。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">removeExtension</span><span class="params">(String fname)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">pos</span> <span class="operator">=</span> fname.lastIndexOf(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (pos &gt; -<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> fname.substring(<span class="number">0</span>, pos);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> fname;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><p>例如”demo1.txt” → “demo1”。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       System.out.println(removeExtension(<span class="string">&quot;demo1.txt&quot;</span>));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>相关文章：<a href="https://daijing.online/2022/02/16/Java_14_String%E7%B1%BBlastIndexOf()%E6%96%B9%E6%B3%95/">String类lastIndexOf()方法 | 与或非’s Blog (daijing.online)</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>String类lastIndexOf() 方法</title>
      <link href="/2020/12/16/Java_14_String%E7%B1%BBlastIndexOf()%E6%96%B9%E6%B3%95/"/>
      <url>/2020/12/16/Java_14_String%E7%B1%BBlastIndexOf()%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>lastIndexOf() 方法有以下四种形式：</p><ul><li><strong>public int lastIndexOf(int ch):</strong> 返回指定字符在此字符串中最后一次出现处的索引，如果此字符串中没有这样的字符，则返回 -1。</li><li><strong>public int lastIndexOf(int ch, int fromIndex):</strong> 返回指定字符在此字符串中最后一次出现处的索引，从指定的索引处开始进行反向搜索，如果此字符串中没有这样的字符，则返回 -1。</li><li><strong>public int lastIndexOf(String str):</strong> 返回指定子字符串在此字符串中最右边出现处的索引，如果此字符串中没有这样的字符，则返回 -1。</li><li><strong>public int lastIndexOf(String str, int fromIndex):</strong> 返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索，如果此字符串中没有这样的字符，则返回 -1。</li></ul><span id="more"></span><p><strong>参数</strong></p><ul><li><strong>ch</strong> – 字符。</li><li><strong>fromIndex</strong> – 开始搜索的索引位置。</li><li><strong>str</strong> – 要搜索的子字符串。</li></ul><p><strong>返回值</strong></p><p>指定子字符串在字符串中第一次出现处的索引值。</p><p><strong>实例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">Str</span> <span class="operator">=</span> <span class="string">&quot;www.daijjing.online&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">SubStr1</span> <span class="operator">=</span> <span class="string">&quot;daijjing&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">SubStr2</span> <span class="operator">=</span> <span class="string">&quot;online&quot;</span>;</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">&quot;查找字符 i 最后出现的位置 :&quot;</span> );</span><br><span class="line">        System.out.println(Str.lastIndexOf( <span class="string">&#x27;i&#x27;</span> ));</span><br><span class="line">        System.out.print(<span class="string">&quot;从第14个位置查找字符 i 最后出现的位置 :&quot;</span> );</span><br><span class="line">        System.out.println(Str.lastIndexOf( <span class="string">&#x27;i&#x27;</span>, <span class="number">14</span> ));</span><br><span class="line">        System.out.print(<span class="string">&quot;子字符串 SubStr1 最后出现的位置:&quot;</span> );</span><br><span class="line">        System.out.println( Str.lastIndexOf( SubStr1 ));</span><br><span class="line">        System.out.print(<span class="string">&quot;从第十五个位置开始搜索子字符串 SubStr1最后出现的位置 :&quot;</span> );</span><br><span class="line">        System.out.println( Str.lastIndexOf( SubStr1, <span class="number">15</span> ));</span><br><span class="line">        System.out.print(<span class="string">&quot;子字符串 SubStr2 最后出现的位置 :&quot;</span> );</span><br><span class="line">        System.out.println(Str.lastIndexOf( SubStr2 ));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上程序执行结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">查找字符 i 最后出现的位置 :16</span><br><span class="line">从第14个位置查找字符 i 最后出现的位置 :9</span><br><span class="line">子字符串 SubStr1 最后出现的位置:4</span><br><span class="line">从第十五个位置开始搜索子字符串 SubStr1最后出现的位置 :4</span><br><span class="line">子字符串 SubStr2 最后出现的位置 :13</span><br></pre></td></tr></table></figure><p><strong>String 类中的indexof(int ch)方法的形参列表为什么采用int型而不采用char型?</strong></p><p>涉及到了增补字符，因为char型只有65536个字符，不能表示完所有的字符还有一些诸如”火星文”的未知字符，因此用char型来表示是完全不够的,而int类型的范围是- 2 ^ 31 ~2 ^ 31 - 1,足够用来表示已知和未知的字符，并且int跟char海涉及到隐式字符转换，这样用int作为形参不仅没有多费功夫还扩大了indexof的涵盖范围。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Indexof_Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        String s=<span class="string">&quot;hello.wor.ld&quot;</span>;</span><br><span class="line">        <span class="comment">//基本字符与增补字符</span></span><br><span class="line">        <span class="comment">//Character.MIN_SUPPLEMENTARY_CODE_POINT   最小的增补字符</span></span><br><span class="line">        System.out.println(   s.indexOf(<span class="number">46</span>)  );  <span class="comment">//indexOf  返回类型位  int   ??为什么用int 不用char 涉及增补字符</span></span><br><span class="line">        System.out.println(   s.indexOf(<span class="string">&#x27;.&#x27;</span>) );   <span class="comment">//隐式字符转换</span></span><br><span class="line"></span><br><span class="line">        System.out.println(  s.lastIndexOf(<span class="string">&#x27;.&#x27;</span>) ); <span class="comment">//从后往前查找  返回的索引还是从0开始</span></span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反射</title>
      <link href="/2020/12/06/Java_12_%E5%8F%8D%E5%B0%84/"/>
      <url>/2020/12/06/Java_12_%E5%8F%8D%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<h3 id="1-反射的概述"><a href="#1-反射的概述" class="headerlink" title="1.反射的概述"></a>1.反射的概述</h3><ul><li><p>反射机制</p><p>是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；<br>对于任意一个对象，都能够调用它的任意属性和方法；<br>这种动态获取信息以及动态调用对象方法的功能称为Java语言的反射机制。</p></li></ul><span id="more"></span><h3 id="2-获取Class类对象的三种方式"><a href="#2-获取Class类对象的三种方式" class="headerlink" title="2.获取Class类对象的三种方式"></a>2.获取Class类对象的三种方式</h3><ul><li><p>三种方式分类</p><ul><li><p>类名.class属性</p></li><li><p>对象名.getClass()方法</p></li><li><p>Class.forName(全类名)方法</p></li></ul><p><img src="https://gitee.com/andornot888/andornot_images/raw/master//imgs/java12_1.png" alt="08_获取Class对象的三种方式"></p></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学生在学习&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">//1.Class类中的静态方法forName(&quot;全类名&quot;)</span></span><br><span class="line">            <span class="comment">//全类名:包名 + 类名</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.jia.myreflect2.Student&quot;</span>);</span><br><span class="line">        System.out.println(clazz);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.通过class属性来获取</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz2</span> <span class="operator">=</span> Student.class;</span><br><span class="line">        System.out.println(clazz2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.利用对象的getClass方法来获取class对象</span></span><br><span class="line">        <span class="comment">//getClass方法是定义在Object类中.</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz3</span> <span class="operator">=</span> s.getClass();</span><br><span class="line">        System.out.println(clazz3);</span><br><span class="line"></span><br><span class="line">        System.out.println(clazz == clazz2);</span><br><span class="line">        System.out.println(clazz2 == clazz3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-反射获取构造方法并使用"><a href="#3-反射获取构造方法并使用" class="headerlink" title="3.反射获取构造方法并使用"></a>3.反射获取构造方法并使用</h3><h4 id="3-1Class类获取构造方法对象的方法"><a href="#3-1Class类获取构造方法对象的方法" class="headerlink" title="3.1Class类获取构造方法对象的方法"></a>3.1Class类获取构造方法对象的方法</h4><ul><li><p>方法介绍</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>Constructor&lt;?&gt;[] getConstructors()</td><td>返回所有公共构造方法对象的数组</td></tr><tr><td>Constructor&lt;?&gt;[] getDeclaredConstructors()</td><td>返回所有构造方法对象的数组</td></tr><tr><td>Constructor<T> getConstructor(Class&lt;?&gt;… parameterTypes)</td><td>返回单个公共构造方法对象</td></tr><tr><td>Constructor<T> getDeclaredConstructor(Class&lt;?&gt;… parameterTypes)</td><td>返回单个构造方法对象</td></tr></tbody></table></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有的有参构造方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Student</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name的值为:&quot;</span> + name);</span><br><span class="line">        System.out.println(<span class="string">&quot;private...Student...有参构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//公共的无参构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;public...Student...无参构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//公共的有参构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name的值为:&quot;</span> + name + <span class="string">&quot;age的值为:&quot;</span> + age);</span><br><span class="line">        System.out.println(<span class="string">&quot;public...Student...有参构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException &#123;</span><br><span class="line">        <span class="comment">//method1();</span></span><br><span class="line">        <span class="comment">//method2();</span></span><br><span class="line">        <span class="comment">//method3();</span></span><br><span class="line">        <span class="comment">//method4();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method4</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException &#123;</span><br><span class="line">        <span class="comment">//        Constructor&lt;T&gt; getDeclaredConstructor(Class&lt;?&gt;... parameterTypes)：</span></span><br><span class="line"><span class="comment">//                                      返回单个构造方法对象</span></span><br><span class="line">        <span class="comment">//1.获取Class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.jia.myreflect3.Student&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> clazz.getDeclaredConstructor(String.class);</span><br><span class="line">        System.out.println(constructor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method3</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException &#123;</span><br><span class="line">        <span class="comment">//        Constructor&lt;T&gt; getConstructor(Class&lt;?&gt;... parameterTypes)：</span></span><br><span class="line"><span class="comment">//                                      返回单个公共构造方法对象</span></span><br><span class="line">        <span class="comment">//1.获取Class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.jia.myreflect3.Student&quot;</span>);</span><br><span class="line">        <span class="comment">//小括号中,一定要跟构造方法的形参保持一致.</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor1</span> <span class="operator">=</span> clazz.getConstructor();</span><br><span class="line">        System.out.println(constructor1);</span><br><span class="line"></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor2</span> <span class="operator">=</span> clazz.getConstructor(String.class, <span class="type">int</span>.class);</span><br><span class="line">        System.out.println(constructor2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//因为Student类中,没有只有一个int的构造,所以这里会报错.</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor3</span> <span class="operator">=</span> clazz.getConstructor(<span class="type">int</span>.class);</span><br><span class="line">        System.out.println(constructor3);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">//        Constructor&lt;?&gt;[] getDeclaredConstructors()：</span></span><br><span class="line"><span class="comment">//                                      返回所有构造方法对象的数组</span></span><br><span class="line">        <span class="comment">//1.获取Class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.jia.myreflect3.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Constructor[] constructors = clazz.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor constructor : constructors) &#123;</span><br><span class="line">            System.out.println(constructor);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">//        Constructor&lt;?&gt;[] getConstructors()：</span></span><br><span class="line"><span class="comment">//                                      返回所有公共构造方法对象的数组</span></span><br><span class="line">        <span class="comment">//1.获取Class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.jia.myreflect3.Student&quot;</span>);</span><br><span class="line">        Constructor[] constructors = clazz.getConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor constructor : constructors) &#123;</span><br><span class="line">            System.out.println(constructor);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-2Constructor类用于创建对象的方法"><a href="#3-2Constructor类用于创建对象的方法" class="headerlink" title="3.2Constructor类用于创建对象的方法"></a>3.2Constructor类用于创建对象的方法</h4><ul><li><p>方法介绍</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>T newInstance(Object…initargs)</td><td>根据指定的构造方法创建对象</td></tr><tr><td>setAccessible(boolean flag)</td><td>设置为true,表示取消访问检查</td></tr></tbody></table></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Student类同上一个示例,这里就不在重复提供了</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException &#123;</span><br><span class="line">        <span class="comment">//T newInstance(Object... initargs)：根据指定的构造方法创建对象</span></span><br><span class="line">        <span class="comment">//method1();</span></span><br><span class="line">        <span class="comment">//method2();</span></span><br><span class="line">        <span class="comment">//method3();</span></span><br><span class="line">        <span class="comment">//method4();</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method4</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException &#123;</span><br><span class="line">        <span class="comment">//获取一个私有的构造方法并创建对象</span></span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.jia.myreflect3.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取一个私有化的构造方法.</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> clazz.getDeclaredConstructor(String.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//被private修饰的成员,不能直接使用的</span></span><br><span class="line">        <span class="comment">//如果用反射强行获取并使用,需要临时取消访问检查</span></span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.直接创建对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) constructor.newInstance(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method3</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line">        <span class="comment">//简写格式</span></span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.jia.myreflect3.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.在Class类中,有一个newInstance方法,可以利用空参直接创建一个对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) clazz.newInstance();<span class="comment">//这个方法现在已经过时了,了解一下</span></span><br><span class="line"></span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException &#123;</span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.jia.myreflect3.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取构造方法对象</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> clazz.getConstructor();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.利用空参来创建Student的对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) constructor.newInstance();</span><br><span class="line"></span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException &#123;</span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.jia.myreflect3.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取构造方法对象</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> clazz.getConstructor(String.class, <span class="type">int</span>.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.利用newInstance创建Student的对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) constructor.newInstance(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">23</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-3小结"><a href="#3-3小结" class="headerlink" title="3.3小结"></a>3.3小结</h4><ul><li><p>获取class对象</p><p>三种方式: Class.forName(“全类名”), 类名.class, 对象名.getClass()</p></li><li><p>获取里面的构造方法对象</p><p>getConstructor (Class<?>... parameterTypes)getDeclaredConstructor (Class<?>… parameterTypes)</p></li><li><p>如果是public的，直接创建对象</p><p>newInstance(Object… initargs)</p></li><li><p>如果是非public的，需要临时取消检查，然后再创建对象</p><p>setAccessible(boolean)  暴力反射</p></li></ul><h3 id="4-反射获取成员变量并使用"><a href="#4-反射获取成员变量并使用" class="headerlink" title="4.反射获取成员变量并使用"></a>4.反射获取成员变量并使用</h3><h4 id="4-1Class类获取成员变量对象的方法"><a href="#4-1Class类获取成员变量对象的方法" class="headerlink" title="4.1Class类获取成员变量对象的方法"></a>4.1Class类获取成员变量对象的方法</h4><ul><li><p>方法分类</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>Field[] getFields()</td><td>返回所有公共成员变量对象的数组</td></tr><tr><td>Field[] getDeclaredFields()</td><td>返回所有成员变量对象的数组</td></tr><tr><td>Field getField(String name)</td><td>返回单个公共成员变量对象</td></tr><tr><td>Field getDeclaredField(String name)</td><td>返回单个成员变量对象</td></tr></tbody></table></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String gender;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">money</span> <span class="operator">=</span> <span class="number">300</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, gender=&#x27;&quot;</span> + gender + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, money=&quot;</span> + money +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException &#123;</span><br><span class="line">       <span class="comment">// method1();</span></span><br><span class="line">        <span class="comment">//method2();</span></span><br><span class="line">        <span class="comment">//method3();</span></span><br><span class="line">        <span class="comment">//method4();</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method4</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException &#123;</span><br><span class="line">        <span class="comment">//        Field getDeclaredField(String name)：返回单个成员变量对象</span></span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.jia.myreflect4.Student&quot;</span>);</span><br><span class="line">  </span><br><span class="line">        <span class="comment">//2.获取money成员变量</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;money&quot;</span>);</span><br><span class="line">  </span><br><span class="line">        <span class="comment">//3.打印一下</span></span><br><span class="line">        System.out.println(field);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method3</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException &#123;</span><br><span class="line">        <span class="comment">//        Field getField(String name)：返回单个公共成员变量对象</span></span><br><span class="line">        <span class="comment">//想要获取的成员变量必须是真实存在的</span></span><br><span class="line">        <span class="comment">//且必须是public修饰的.</span></span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.jia.myreflect4.Student&quot;</span>);</span><br><span class="line">  </span><br><span class="line">        <span class="comment">//2.获取name这个成员变量</span></span><br><span class="line">        <span class="comment">//Field field = clazz.getField(&quot;name&quot;);</span></span><br><span class="line">        <span class="comment">//Field field = clazz.getField(&quot;name1&quot;);</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getField(<span class="string">&quot;money&quot;</span>);</span><br><span class="line">  </span><br><span class="line">        <span class="comment">//3.打印一下</span></span><br><span class="line">        System.out.println(field);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">//        Field[] getDeclaredFields()：返回所有成员变量对象的数组</span></span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.jia.myreflect4.Student&quot;</span>);</span><br><span class="line">  </span><br><span class="line">        <span class="comment">//2.获取所有的Field对象</span></span><br><span class="line">        Field[] fields = clazz.getDeclaredFields();</span><br><span class="line">  </span><br><span class="line">        <span class="comment">//3.遍历</span></span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            System.out.println(field);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">//        Field[] getFields()：返回所有公共成员变量对象的数组</span></span><br><span class="line">  </span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.jia.myreflect4.Student&quot;</span>);</span><br><span class="line">  </span><br><span class="line">        <span class="comment">//2.获取Field对象.</span></span><br><span class="line">        Field[] fields = clazz.getFields();</span><br><span class="line">  </span><br><span class="line">        <span class="comment">//3.遍历</span></span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            System.out.println(field);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="4-2Field类用于给成员变量赋值的方法"><a href="#4-2Field类用于给成员变量赋值的方法" class="headerlink" title="4.2Field类用于给成员变量赋值的方法"></a>4.2Field类用于给成员变量赋值的方法</h4><ul><li><p>方法介绍</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>void set(Object obj, Object value)</td><td>赋值</td></tr><tr><td>Object get(Object obj)</td><td>获取值</td></tr></tbody></table></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Student类同上一个示例,这里就不在重复提供了</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException, IllegalAccessException, InstantiationException &#123;</span><br><span class="line"><span class="comment">//        Object get(Object obj) 返回由该 Field表示的字段在指定对象上的值。</span></span><br><span class="line">        <span class="comment">//method1();</span></span><br><span class="line">        <span class="comment">//method2();</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.jia.myreflect4.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取成员变量Field的对象</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;money&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.取消一下访问检查</span></span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.调用get方法来获取值</span></span><br><span class="line">        <span class="comment">//4.1创建一个对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) clazz.newInstance();</span><br><span class="line">        <span class="comment">//4.2获取指定对象的money的值</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> field.get(student);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.打印一下</span></span><br><span class="line">        System.out.println(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line">        <span class="comment">//        void set(Object obj, Object value)：给obj对象的成员变量赋值为value</span></span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.jia.myreflect4.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取name这个Field对象</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.利用set方法进行赋值.</span></span><br><span class="line">        <span class="comment">//3.1先创建一个Student对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) clazz.newInstance();</span><br><span class="line">        <span class="comment">//3.2有了对象才可以给指定对象进行赋值</span></span><br><span class="line">        field.set(student,<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-反射获取成员方法并使用"><a href="#5-反射获取成员方法并使用" class="headerlink" title="5.反射获取成员方法并使用"></a>5.反射获取成员方法并使用</h3><h4 id="5-1Class类获取成员方法对象的方法"><a href="#5-1Class类获取成员方法对象的方法" class="headerlink" title="5.1Class类获取成员方法对象的方法"></a>5.1Class类获取成员方法对象的方法</h4><ul><li><p>方法分类</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>Method[] getMethods()</td><td>返回所有公共成员方法对象的数组，包括继承的</td></tr><tr><td>Method[] getDeclaredMethods()</td><td>返回所有成员方法对象的数组，不包括继承的</td></tr><tr><td>Method getMethod(String name, Class&lt;?&gt;… parameterTypes)</td><td>返回单个公共成员方法对象</td></tr><tr><td>Method getDeclaredMethod(String name, Class&lt;?&gt;… parameterTypes)</td><td>返回单个成员方法对象</td></tr></tbody></table></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有的，无参无返回值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;私有的show方法，无参无返回值&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//公共的，无参无返回值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">function1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;function1方法，无参无返回值&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//公共的，有参无返回值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">function2</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;function2方法，有参无返回值,参数为&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//公共的，无参有返回值</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">function3</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;function3方法，无参有返回值&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;aaa&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//公共的，有参有返回值</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">function4</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;function4方法，有参有返回值,参数为&quot;</span> + name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;aaa&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException &#123;</span><br><span class="line">        <span class="comment">//method1();</span></span><br><span class="line">        <span class="comment">//method2();</span></span><br><span class="line">        <span class="comment">//method3();</span></span><br><span class="line">        <span class="comment">//method4();</span></span><br><span class="line">        <span class="comment">//method5();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method5</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException &#123;</span><br><span class="line">        <span class="comment">//        Method getDeclaredMethod(String name, Class&lt;?&gt;... parameterTypes)：</span></span><br><span class="line"><span class="comment">//                                返回单个成员方法对象</span></span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.jia.myreflect5.Student&quot;</span>);</span><br><span class="line">        <span class="comment">//2.获取一个成员方法show</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">&quot;show&quot;</span>);</span><br><span class="line">        <span class="comment">//3.打印一下</span></span><br><span class="line">        System.out.println(method);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method4</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException &#123;</span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.jia.myreflect5.Student&quot;</span>);</span><br><span class="line">        <span class="comment">//2.获取一个有形参的方法function2</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;function2&quot;</span>, String.class);</span><br><span class="line">        <span class="comment">//3.打印一下</span></span><br><span class="line">        System.out.println(method);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method3</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException &#123;</span><br><span class="line">        <span class="comment">//        Method getMethod(String name, Class&lt;?&gt;... parameterTypes) ：</span></span><br><span class="line"><span class="comment">//                                返回单个公共成员方法对象</span></span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.jia.myreflect5.Student&quot;</span>);</span><br><span class="line">        <span class="comment">//2.获取成员方法function1</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method1</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;function1&quot;</span>);</span><br><span class="line">        <span class="comment">//3.打印一下</span></span><br><span class="line">        System.out.println(method1);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">//        Method[] getDeclaredMethods()：</span></span><br><span class="line"><span class="comment">//                                返回所有成员方法对象的数组，不包括继承的</span></span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.jia.myreflect5.Student&quot;</span>);</span><br><span class="line">  </span><br><span class="line">        <span class="comment">//2.获取Method对象</span></span><br><span class="line">        Method[] methods = clazz.getDeclaredMethods();</span><br><span class="line">        <span class="comment">//3.遍历一下数组</span></span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            System.out.println(method);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">//        Method[] getMethods()：返回所有公共成员方法对象的数组，包括继承的</span></span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.jia.myreflect5.Student&quot;</span>);</span><br><span class="line">        <span class="comment">//2.获取成员方法对象</span></span><br><span class="line">        Method[] methods = clazz.getMethods();</span><br><span class="line">        <span class="comment">//3.遍历</span></span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            System.out.println(method);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="5-2Method类用于执行方法的方法"><a href="#5-2Method类用于执行方法的方法" class="headerlink" title="5.2Method类用于执行方法的方法"></a>5.2Method类用于执行方法的方法</h4><ul><li><p>方法介绍</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>Object invoke(Object obj, Object… args)</td><td>运行方法</td></tr></tbody></table><p>参数一: 用obj对象调用该方法</p><p>参数二: 调用方法的传递的参数(如果没有就不写)</p><p>返回值: 方法的返回值(如果没有就不写)</p></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InstantiationException, InvocationTargetException &#123;</span><br><span class="line"><span class="comment">//        Object invoke(Object obj, Object... args)：运行方法</span></span><br><span class="line"><span class="comment">//        参数一：用obj对象调用该方法</span></span><br><span class="line"><span class="comment">//        参数二：调用方法的传递的参数（如果没有就不写）</span></span><br><span class="line"><span class="comment">//        返回值：方法的返回值（如果没有就不写）</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.jia.myreflect5.Student&quot;</span>);</span><br><span class="line">        <span class="comment">//2.获取里面的Method对象  function4</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;function4&quot;</span>, String.class);</span><br><span class="line">        <span class="comment">//3.运行function4方法就可以了</span></span><br><span class="line">        <span class="comment">//3.1创建一个Student对象,当做方法的调用者</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) clazz.newInstance();</span><br><span class="line">        <span class="comment">//3.2运行方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(student, <span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        <span class="comment">//4.打印一下返回值</span></span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类加载器</title>
      <link href="/2020/12/05/Java_11_%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/"/>
      <url>/2020/12/05/Java_11_%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="类加载器的作用"><a href="#类加载器的作用" class="headerlink" title="类加载器的作用"></a>类加载器的作用</h3><p>负责将.class文件（存储的物理文件）加载在到内存中</p><p><img src="https://gitee.com/andornot888/andornot_images/raw/master//imgs/java11_1.png" alt="01_类加载器"></p><span id="more"></span><h3 id="类加载的过程"><a href="#类加载的过程" class="headerlink" title="类加载的过程"></a>类加载的过程</h3><ul><li><p>类加载时机</p><ul><li>创建类的实例（对象）</li><li>调用类的类方法</li><li>访问类或者接口的类变量，或者为该类变量赋值</li><li>使用反射方式来强制创建某个类或接口对应的java.lang.Class对象</li><li>初始化某个类的子类</li><li>直接使用java.exe命令来运行某个主类</li></ul></li><li><p>类加载过程</p><ol><li><p>加载</p><ul><li>通过包名 + 类名，获取这个类，准备用流进行传输</li><li>在这个类加载到内存中</li><li>加载完毕创建一个class对象</li></ul><p><img src="https://gitee.com/andornot888/andornot_images/raw/master//imgs/java11_2.png" alt="02_类加载过程加载"></p></li><li><p>链接</p><ul><li><p>验证</p><p>确保Class文件字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身安全</p><p>(文件中的信息是否符合虚拟机规范有没有安全隐患)</p></li></ul><p><img src="https://gitee.com/andornot888/andornot_images/raw/master//imgs/java11_3.png" alt="03_类加载过程验证"></p><ul><li><p>准备</p><p>负责为类的类变量（被static修饰的变量）分配内存，并设置默认初始化值</p><p>(初始化静态变量)</p></li></ul><p><img src="https://gitee.com/andornot888/andornot_images/raw/master//imgs/java11_4.png" alt="04_类加载过程准备"></p><ul><li><p>解析</p><p>将类的二进制数据流中的符号引用替换为直接引用</p><p>(本类中如果用到了其他类，此时就需要找到对应的类)</p></li></ul><p><img src="https://gitee.com/andornot888/andornot_images/raw/master//imgs/java11_5.png" alt="05_类加载过程解析"></p></li><li><p>初始化</p><p>根据程序员通过程序制定的主观计划去初始化类变量和其他资源</p><p>(静态变量赋值以及初始化其他资源)</p><p><img src="https://gitee.com/andornot888/andornot_images/raw/master//imgs/java11_6.png" alt="06_类加载过程初始化"></p></li></ol></li><li><p>小结</p><ul><li>当一个类被使用的时候，才会加载到内存</li><li>类加载的过程: 加载、验证、准备、解析、初始化</li></ul></li></ul><h3 id="类加载的分类"><a href="#类加载的分类" class="headerlink" title="类加载的分类"></a>类加载的分类</h3><ul><li><p>分类</p><ul><li>Bootstrap class loader：虚拟机的内置类加载器，通常表示为null ，并且没有父null</li><li>Platform class loader：平台类加载器,负责加载JDK中一些特殊的模块</li><li>System class loader：系统类加载器,负责加载用户类路径上所指定的类库</li></ul></li><li><p>类加载器的继承关系</p><ul><li>System的父加载器为Platform</li><li>Platform的父加载器为Bootstrap</li></ul></li><li><p>代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassLoaderDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//获取系统类加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">systemClassLoader</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取系统类加载器的父加载器 --- 平台类加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader1</span> <span class="operator">=</span> systemClassLoader.getParent();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取平台类加载器的父加载器 --- 启动类加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader2</span> <span class="operator">=</span> classLoader1.getParent();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;系统类加载器&quot;</span> + systemClassLoader);</span><br><span class="line">        System.out.println(<span class="string">&quot;平台类加载器&quot;</span> + classLoader1);</span><br><span class="line">        System.out.println(<span class="string">&quot;启动类加载器&quot;</span> + classLoader2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h3><ul><li><p>介绍</p><p>如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行，如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器，如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载，这就是双亲委派模式</p><p><img src="https://gitee.com/andornot888/andornot_images/raw/master//imgs/java11_7.png" alt="07_双亲委派模型"></p></li></ul><ul><li>启动类加载器：它不是一个Java类，是C++写的。主要负责JDK的核心类库，比如rt.jar,resource.jar等类库。启动类加载器完全是JVM自己控制的，开发人员是无法访问的。</li><li>扩展类加载器：是一个继承ClassLoader类的Java类，负责加载{JAVA_HOME}&#x2F;jre&#x2F;lib&#x2F;ext&#x2F;目录下的所有jar包</li><li>应用程序类加载器：是一个继承ClassLoader类的Java类，负载加载classpath目录下的所有jar和class文件，基本上你写的类文件，都是被应用程序类加载器加载的。</li></ul><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>　①<strong>防止重复加载同一个.class。</strong>通过委托去询问上级是否已经加载过该.class，如果加载过了，则不需要重新加载。保证了数据安全。</p><p>　②<strong>防止核心.class被篡改。</strong>通过委托的方式，保证核心.class不被篡改，即使被篡改也不会被加载，即使被加载也不会是同一个class对象，因为不同的加载器加载同一个.class也不是同一个Class对象。这样则保证了Class的执行安全。</p><p>举个例子：java核心api中定义类型不会被随意替换，假设通过网络传递一个名为java.lang.Integer的类，通过双亲委托模式传递到启动类加载器，而启动类加载器在核心Java API发现这个名字的类，发现该类已被加载，并不会重新加载网络传递的过来 java.lang.Integer，而直接返回已加载过的Integer.class，这样便可以防止核心API库被随意篡改。</p><p>###ClassLoader 中的两个方法</p><ul><li><p>方法介绍</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public static ClassLoader getSystemClassLoader()</td><td>获取系统类加载器</td></tr><tr><td>public InputStream getResourceAsStream(String name)</td><td>加载某一个资源文件</td></tr></tbody></table></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassLoaderDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//static ClassLoader getSystemClassLoader() 获取系统类加载器</span></span><br><span class="line">        <span class="comment">//InputStream getResourceAsStream(String name)  加载某一个资源文件</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取系统类加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">systemClassLoader</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//利用加载器去加载一个指定的文件</span></span><br><span class="line">        <span class="comment">//参数：文件的路径（放在src的根目录下，默认去那里加载）</span></span><br><span class="line">        <span class="comment">//返回值：字节流。</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> systemClassLoader.getResourceAsStream(<span class="string">&quot;prop.properties&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        prop.load(is);</span><br><span class="line"></span><br><span class="line">        System.out.println(prop);</span><br><span class="line"></span><br><span class="line">        is.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux命令大全</title>
      <link href="/2020/11/28/Linux_1_Linux%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/"/>
      <url>/2020/11/28/Linux_1_Linux%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="一、基本命令"><a href="#一、基本命令" class="headerlink" title="一、基本命令"></a>一、基本命令</h2><h3 id="1-1-关机和重启"><a href="#1-1-关机和重启" class="headerlink" title="1.1 关机和重启"></a>1.1 关机和重启</h3><p>关机</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">shutdown -h now     立刻关机</span><br><span class="line">shutdown -h 5       5分钟后关机</span><br><span class="line">poweroff            立刻关机</span><br></pre></td></tr></table></figure><p>重启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">shutdown -r now        立刻重启</span><br><span class="line">shutdown -r 5        5分钟后重启</span><br><span class="line">reboot                立刻重启</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="1-2-帮助命令"><a href="#1-2-帮助命令" class="headerlink" title="1.2 帮助命令"></a>1.2 帮助命令</h3><p>–help命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shutdown --<span class="built_in">help</span>：</span><br><span class="line">ifconfig  --<span class="built_in">help</span>：查看网卡信息</span><br></pre></td></tr></table></figure><p>man命令（命令说明书） </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man shutdown</span><br></pre></td></tr></table></figure><p>  注意：man shutdown打开命令说明书之后，使用按键q退出</p><h2 id="二、目录操作命令"><a href="#二、目录操作命令" class="headerlink" title="二、目录操作命令"></a>二、目录操作命令</h2><h3 id="2-1-目录切换-cd"><a href="#2-1-目录切换-cd" class="headerlink" title="2.1 目录切换 cd"></a>2.1 目录切换 cd</h3><p>命令：cd 目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /        切换到根目录</span><br><span class="line"><span class="built_in">cd</span> /usr        切换到根目录下的usr目录</span><br><span class="line"><span class="built_in">cd</span> ../        切换到上一级目录 或者  <span class="built_in">cd</span> ..</span><br><span class="line"><span class="built_in">cd</span> ~        切换到home目录</span><br><span class="line"><span class="built_in">cd</span> -        切换到上次访问的目录</span><br></pre></td></tr></table></figure><h3 id="2-2-目录查看-ls-al"><a href="#2-2-目录查看-ls-al" class="headerlink" title="2.2 目录查看 ls [-al]"></a>2.2 目录查看 ls [-al]</h3><p>命令：ls [-al]</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span>                查看当前目录下的所有目录和文件</span><br><span class="line"><span class="built_in">ls</span> -a            查看当前目录下的所有目录和文件（包括隐藏的文件）</span><br><span class="line"><span class="built_in">ls</span> -l 或 ll       列表查看当前目录下的所有目录和文件（列表查看，显示更多信息）</span><br><span class="line"><span class="built_in">ls</span> /dir            查看指定目录下的所有目录和文件   如：<span class="built_in">ls</span> /usr</span><br></pre></td></tr></table></figure><h3 id="2-3-目录操作【增，删，改，查】"><a href="#2-3-目录操作【增，删，改，查】" class="headerlink" title="2.3 目录操作【增，删，改，查】"></a>2.3 目录操作【增，删，改，查】</h3><h4 id="2-3-1-创建目录【增】-mkdir"><a href="#2-3-1-创建目录【增】-mkdir" class="headerlink" title="2.3.1 创建目录【增】 mkdir"></a>2.3.1 创建目录【增】 mkdir</h4><p>命令：mkdir 目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span>    aaa            在当前目录下创建一个名为aaa的目录</span><br><span class="line"><span class="built_in">mkdir</span>    /usr/aaa    在指定目录下创建一个名为aaa的目录</span><br></pre></td></tr></table></figure><h4 id="2-3-2-删除目录或文件【删】rm"><a href="#2-3-2-删除目录或文件【删】rm" class="headerlink" title="2.3.2 删除目录或文件【删】rm"></a>2.3.2 删除目录或文件【删】rm</h4><p>命令：rm [-rf] 目录</p><p>删除文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> 文件        删除当前目录下的文件</span><br><span class="line"><span class="built_in">rm</span> -f 文件    删除当前目录的的文件（不询问）</span><br></pre></td></tr></table></figure><p>删除目录：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -r aaa    递归删除当前目录下的aaa目录</span><br><span class="line"><span class="built_in">rm</span> -rf aaa    递归删除当前目录下的aaa目录（不询问）</span><br></pre></td></tr></table></figure><p>全部删除：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf *    将当前目录下的所有目录和文件全部删除</span><br><span class="line"><span class="built_in">rm</span> -rf /*    【自杀命令！慎用！慎用！慎用！】将根目录下的所有文件全部删除</span><br></pre></td></tr></table></figure><p>注意：rm不仅可以删除目录，也可以删除其他文件或压缩包，为了方便大家的记忆，无论删除任何目录或文件，都直接使用 rm -rf 目录&#x2F;文件&#x2F;压缩包</p><h4 id="2-3-3-目录修改【改】mv-和-cp"><a href="#2-3-3-目录修改【改】mv-和-cp" class="headerlink" title="2.3.3 目录修改【改】mv 和 cp"></a>2.3.3 目录修改【改】mv 和 cp</h4><p>一、重命名目录<br>    命令：mv 当前目录  新目录<br>    例如：mv aaa bbb    将目录aaa改为bbb<br>    注意：mv的语法不仅可以对目录进行重命名而且也可以对各种文件，压缩包等进行    重命名的操作</p><p>二、剪切目录<br>    命令：mv 目录名称 目录的新位置<br>    示例：将&#x2F;usr&#x2F;tmp目录下的aaa目录剪切到 &#x2F;usr目录下面     mv &#x2F;usr&#x2F;tmp&#x2F;aaa &#x2F;usr<br>    注意：mv语法不仅可以对目录进行剪切操作，对文件和压缩包等都可执行剪切操作</p><p>三、拷贝目录<br>    命令：cp -r 目录名称 目录拷贝的目标位置   -r代表递归<br>    示例：将&#x2F;usr&#x2F;tmp目录下的aaa目录复制到 &#x2F;usr目录下面     cp &#x2F;usr&#x2F;tmp&#x2F;aaa  &#x2F;usr<br>    注意：cp命令不仅可以拷贝目录还可以拷贝文件，压缩包等，拷贝文件和压缩包时不    用写-r递归</p><h4 id="2-3-4-搜索目录【查】find"><a href="#2-3-4-搜索目录【查】find" class="headerlink" title="2.3.4 搜索目录【查】find"></a>2.3.4 搜索目录【查】find</h4><p>命令：find 目录 参数 文件名称<br>示例：find &#x2F;usr&#x2F;tmp -name ‘a*’    查找&#x2F;usr&#x2F;tmp目录下的所有以a开头的目录或文件</p><h2 id="三、文件操作命令"><a href="#三、文件操作命令" class="headerlink" title="三、文件操作命令"></a>三、文件操作命令</h2><h3 id="3-1-文件操作【增，删，改，查】"><a href="#3-1-文件操作【增，删，改，查】" class="headerlink" title="3.1 文件操作【增，删，改，查】"></a>3.1 文件操作【增，删，改，查】</h3><h4 id="3-1-1-新建文件【增】touch"><a href="#3-1-1-新建文件【增】touch" class="headerlink" title="3.1.1 新建文件【增】touch"></a>3.1.1 新建文件【增】touch</h4><p>命令：touch 文件名<br>示例：在当前目录创建一个名为aa.txt的文件        touch  aa.txt</p><h4 id="3-1-2-删除文件-【删】-rm"><a href="#3-1-2-删除文件-【删】-rm" class="headerlink" title="3.1.2 删除文件 【删】 rm"></a>3.1.2 删除文件 【删】 rm</h4><p>命令：rm -rf 文件名</p><h4 id="3-1-3-修改文件【改】-vi或vim"><a href="#3-1-3-修改文件【改】-vi或vim" class="headerlink" title="3.1.3 修改文件【改】 vi或vim"></a>3.1.3 修改文件【改】 vi或vim</h4><p>【vi编辑器的3种模式】<br>    基本上vi可以分为三种状态，分别是命令模式（command mode）、插入模式（Insert mode）和底行模式（last line mode），各模式的功能区分如下：</p><ol><li><p><strong>命令行模式command mode）</strong><br>   控制屏幕光标的移动，字符、字或行的删除，查找，移动复制某区段及进入Insert mode下，或者到 last line mode。<br>   命令行模式下的常用命令：<br>   【1】控制光标移动：↑，↓，j<br>   【2】删除当前行：dd<br>   【3】查找：&#x2F;字符<br>   【4】进入编辑模式：i o a<br>   【5】进入底行模式：:</p></li><li><p><strong>编辑模式（Insert mode）</strong><br>   只有在Insert mode下，才可以做文字输入，按「ESC」键可回到命令行模式。<br>   编辑模式下常用命令：<br>   【1】ESC 退出编辑模式到命令行模式；</p></li><li><p><strong>底行模式（last line mode）</strong><br>  将文件保存或退出vi，也可以设置编辑环境，如寻找字符串、列出行号……等。<br>  底行模式下常用命令：<br>  【1】退出编辑：   :q<br>  【2】强制退出：   :q!<br>  【3】保存并退出：  :wq</p></li></ol><p><strong>打开文件</strong></p><p>命令：vi 文件名<br>示例：打开当前目录下的aa.txt文件     vi aa.txt 或者 vim aa.txt</p><p>注意：使用vi编辑器打开文件后，并不能编辑，因为此时处于命令模式，点击键盘i&#x2F;a&#x2F;o进入编辑模式。</p><p><strong>编辑文件</strong></p><p>使用vi编辑器打开文件后点击按键：i ，a或者o即可进入编辑模式。</p><p>i:在光标所在字符前开始插入<br>a:在光标所在字符后开始插入<br>o:在光标所在行的下面另起一新行插入</p><p><strong>保存或者取消编辑</strong></p><p>保存文件：</p><p>第一步：ESC  进入命令行模式<br>第二步：:     进入底行模式<br>第三步：wq     保存并退出编辑</p><p>取消编辑：</p><p>第一步：ESC  进入命令行模式<br>第二步：:     进入底行模式<br>第三步：q!     撤销本次修改并退出编辑</p><h4 id="3-1-4-文件的查看【查】"><a href="#3-1-4-文件的查看【查】" class="headerlink" title="3.1.4 文件的查看【查】"></a>3.1.4 文件的查看【查】</h4><p>文件的查看命令：cat&#x2F;more&#x2F;less&#x2F;tail</p><p>cat：看最后一屏</p><p>示例：使用cat查看&#x2F;etc&#x2F;sudo.conf文件，只能显示最后一屏内容<br>cat sudo.conf</p><p>more：百分比显示</p><p>示例：使用more查看&#x2F;etc&#x2F;sudo.conf文件，可以显示百分比，回车可以向下一行，空格可以向下一页，q可以退出查看<br>more sudo.conf</p><p>less：翻页查看</p><p>示例：使用less查看&#x2F;etc&#x2F;sudo.conf文件，可以使用键盘上的PgUp和PgDn向上    和向下翻页，q结束查看<br>less sudo.conf</p><p>tail：指定行数或者动态查看</p><p>示例：使用tail -10 查看&#x2F;etc&#x2F;sudo.conf文件的后10行，Ctrl+C结束<br>tail -10 sudo.conf</p><h3 id="3-2-权限修改"><a href="#3-2-权限修改" class="headerlink" title="3.2 权限修改"></a>3.2 权限修改</h3><p>rwx：r代表可读，w代表可写，x代表该文件是一个可执行文件，如果rwx任意位置变为-则代表不可读或不可写或不可执行文件。</p><p>示例：给aaa.txt文件权限改为可执行文件权限，aaa.txt文件的权限是-rw——-</p><p>第一位：-就代表是文件，d代表是文件夹<br>第一段（3位）：代表拥有者的权限<br>第二段（3位）：代表拥有者所在的组，组员的权限<br>第三段（最后3位）：代表的是其他用户的权限</p><p>   421  421  421</p><ul><li>rw-   —     —</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">命令：<span class="built_in">chmod</span> +x aaa.txt</span><br><span class="line">或者采用8421法</span><br><span class="line">命令：<span class="built_in">chmod</span> 100 aaa.txt</span><br></pre></td></tr></table></figure><h2 id="四、压缩文件操作"><a href="#四、压缩文件操作" class="headerlink" title="四、压缩文件操作"></a>四、压缩文件操作</h2><h3 id="4-1-打包和压缩"><a href="#4-1-打包和压缩" class="headerlink" title="4.1 打包和压缩"></a>4.1 打包和压缩</h3><p>Windows的压缩文件的扩展名  .zip&#x2F;.rar<br>linux中的打包文件：aa.tar<br>linux中的压缩文件：bb.gz<br>linux中打包并压缩的文件：.tar.gz</p><p>Linux中的打包文件一般是以.tar结尾的，压缩的命令一般是以.gz结尾的。<br>而一般情况下打包和压缩是一起进行的，打包并压缩后的文件的后缀名一般.tar.gz。</p><p>命令：tar -zcvf 打包压缩后的文件名 要打包的文件<br>其中：z：调用gzip压缩命令进行压缩<br>  c：打包文件<br>  v：显示运行过程<br>  f：指定文件名</p><p>示例：打包并压缩&#x2F;usr&#x2F;tmp 下的所有文件 压缩后的压缩包指定名称为xxx.tar<br>tar -zcvf ab.tar aa.txt bb.txt<br>或：tar -zcvf ab.tar  *</p><h3 id="4-2-解压"><a href="#4-2-解压" class="headerlink" title="4.2 解压"></a>4.2 解压</h3><p>命令：tar [-zxvf] 压缩文件<br>其中：x：代表解压<br>示例：将&#x2F;usr&#x2F;tmp 下的ab.tar解压到当前目录下</p><p><img src="https://gitee.com/andornot888/andornot_images/raw/master//imgs/Linux1_1.png" alt="img"></p><p>示例：将&#x2F;usr&#x2F;tmp 下的ab.tar解压到根目录&#x2F;usr下<br>tar -xvf ab.tar -C &#x2F;usr——C代表指定解压的位置</p><img src="https://gitee.com/andornot888/andornot_images/raw/master//imgs/Linux1_3.png" alt="img" style="zoom:80%;" /><h2 id="五、查找命令"><a href="#五、查找命令" class="headerlink" title="五、查找命令"></a>五、查找命令</h2><h3 id="5-1-grep"><a href="#5-1-grep" class="headerlink" title="5.1 grep"></a>5.1 grep</h3><p>grep命令是一种强大的文本搜索工具</p><p>使用实例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep sshd  查找指定ssh服务进程 </span><br><span class="line">ps -ef | grep sshd | grep -v grep 查找指定服务进程，排除gerp身 </span><br><span class="line">ps -ef | grep sshd -c 查找指定进程个数 </span><br></pre></td></tr></table></figure><h3 id="5-2-find"><a href="#5-2-find" class="headerlink" title="5.2 find"></a>5.2 find</h3><p>find命令在目录结构中搜索文件，并对搜索结果执行指定的操作。 </p><p>find 默认搜索当前目录及其子目录，并且不过滤任何结果（也就是返回所有文件），将它们全都显示在屏幕上。</p><p>使用实例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">find . -name <span class="string">&quot;*.log&quot;</span> -<span class="built_in">ls</span>  在当前目录查找以.<span class="built_in">log</span>结尾的文件，并显示详细信息。 </span><br><span class="line">find /root/ -perm 600   查找/root/目录下权限为600的文件 </span><br><span class="line">find . -<span class="built_in">type</span> f -name <span class="string">&quot;*.log&quot;</span>  查找当目录，以.<span class="built_in">log</span>结尾的普通文件 </span><br><span class="line">find . -<span class="built_in">type</span> d | <span class="built_in">sort</span>   查找当前所有目录并排序 </span><br><span class="line">find . -size +100M  查找当前目录大于100M的文件</span><br></pre></td></tr></table></figure><h3 id="5-3-locate"><a href="#5-3-locate" class="headerlink" title="5.3 locate"></a>5.3 locate</h3><p>locate 让使用者可以很快速的搜寻某个路径。默认每天自动更新一次，所以使用locate 命令查不到最新变动过的文件。为了避免这种情况，可以在使用locate之前，先使用updatedb命令，手动更新数据库。如果数据库中没有查询的数据，则会报出locate: can not stat () &#96;&#x2F;var&#x2F;lib&#x2F;mlocate&#x2F;mlocate.db’: No such file or directory该错误！updatedb即可！</p><p>yum -y install mlocate 如果是精简版CentOS系统需要安装locate命令</p><p>使用实例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">updatedb</span><br><span class="line">locate /etc/sh 搜索etc目录下所有以sh开头的文件 </span><br><span class="line">locate <span class="built_in">pwd</span> 查找和<span class="built_in">pwd</span>相关的所有文件</span><br></pre></td></tr></table></figure><h3 id="5-4-whereis"><a href="#5-4-whereis" class="headerlink" title="5.4 whereis"></a>5.4 whereis</h3><p>whereis命令是定位可执行文件、源代码文件、帮助文件在文件系统中的位置。这些文件的属性应属于原始代码，二进制文件，或是帮助文件。</p><p>使用实例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whereis <span class="built_in">ls</span>    将和<span class="built_in">ls</span>文件相关的文件都查找出来</span><br></pre></td></tr></table></figure><h3 id="5-5-which"><a href="#5-5-which" class="headerlink" title="5.5 which"></a>5.5 which</h3><p>which命令的作用是在PATH变量指定的路径中，搜索某个系统命令的位置，并且返回第一个搜索结果。</p><p>使用实例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">which</span> <span class="built_in">pwd</span>  查找<span class="built_in">pwd</span>命令所在路径 </span><br><span class="line"><span class="built_in">which</span> java  查找path中java的路径 </span><br></pre></td></tr></table></figure><h2 id="六、su、sudo"><a href="#六、su、sudo" class="headerlink" title="六、su、sudo"></a>六、su、sudo</h2><h3 id="6-1-su"><a href="#6-1-su" class="headerlink" title="6.1 su"></a>6.1 su</h3><p>su用于用户之间的切换。但是切换前的用户依然保持登录状态。如果是root 向普通或虚拟用户切换不需要密码，反之普通用户切换到其它任何用户都需要密码验证。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">su <span class="built_in">test</span>:切换到<span class="built_in">test</span>用户，但是路径还是/root目录</span><br><span class="line">su - <span class="built_in">test</span> : 切换到<span class="built_in">test</span>用户，路径变成了/home/test</span><br><span class="line">su : 切换到root用户，但是路径还是原来的路径</span><br><span class="line">su - : 切换到root用户，并且路径是/root</span><br></pre></td></tr></table></figure><p>su不足：如果某个用户需要使用root权限、则必须要把root密码告诉此用户。</p><p>退出返回之前的用户：exit</p><h3 id="6-2-sudo"><a href="#6-2-sudo" class="headerlink" title="6.2 sudo"></a>6.2 sudo</h3><p>sudo是为所有想使用root权限的普通用户设计的。可以让普通用户具有临时使用root权限的权利。只需输入自己账户的密码即可。</p><p>进入sudo配置文件命令：</p><p>vi &#x2F;etc&#x2F;sudoer或者visudo</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">案例：</span><br><span class="line">允许hadoop用户以root身份执行各种应用命令，需要输入hadoop用户的密码。</span><br><span class="line">hadoop  ALL=(ALL)   ALL </span><br><span class="line"></span><br><span class="line">案例：</span><br><span class="line">只允许hadoop用户以root身份执行<span class="built_in">ls</span> 、<span class="built_in">cat</span>命令，并且执行时候免输入密码。 </span><br><span class="line">配置文件中： </span><br><span class="line">hadoop  ALL=NOPASSWD:  /bin/ls, /bin/cat </span><br></pre></td></tr></table></figure><h2 id="七、系统服务"><a href="#七、系统服务" class="headerlink" title="七、系统服务"></a>七、系统服务</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">service iptables status  --查看iptables服务的状态</span><br><span class="line">service iptables start  --开启iptables服务</span><br><span class="line">service iptables stop  --停止iptables服务</span><br><span class="line">service iptables restart  --重启iptables服务</span><br><span class="line"></span><br><span class="line">chkconfig iptables off  --关闭iptables服务的开机自启动</span><br><span class="line">chkconfig iptables on  --开启iptables服务的开机自启动</span><br></pre></td></tr></table></figure><h2 id="八、网络管理"><a href="#八、网络管理" class="headerlink" title="八、网络管理"></a>八、网络管理</h2><h3 id="8-1-主机名配置"><a href="#8-1-主机名配置" class="headerlink" title="8.1 主机名配置"></a>8.1 主机名配置</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># vi /etc/sysconfig/network</span></span><br><span class="line">NETWORKING=<span class="built_in">yes</span></span><br><span class="line">HOSTNAME=node1</span><br></pre></td></tr></table></figure><h3 id="8-2-IP-地址配置"><a href="#8-2-IP-地址配置" class="headerlink" title="8.2 IP 地址配置"></a>8.2 IP 地址配置</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># vi /etc/sysconfig/network-scripts/ifcfg-eth0</span></span><br></pre></td></tr></table></figure><h3 id="8-3-域名映射"><a href="#8-3-域名映射" class="headerlink" title="8.3 域名映射"></a>8.3 域名映射</h3><p>&#x2F;etc&#x2F;hosts文件用于在通过主机名进行访问时做ip地址解析之用。所以，你想访问一个什么样的主机名，就需要把这个主机名和它对应的ip地址。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># vi /etc/hosts</span></span><br><span class="line"></span><br><span class="line"><span class="comment">####在最后加上</span></span><br><span class="line"></span><br><span class="line">192.168.52.201  node1</span><br><span class="line">192.168.52.202  node2</span><br><span class="line">192.168.52.203  node3</span><br></pre></td></tr></table></figure><h2 id="九、定时任务指令crontab-配置"><a href="#九、定时任务指令crontab-配置" class="headerlink" title="九、定时任务指令crontab 配置"></a>九、定时任务指令crontab 配置</h2><p>crontab是Unix和Linux用于设置定时任务的指令。通过crontab命令，可以在固定间隔时间,执行指定的系统指令或shell脚本。时间间隔的单位可以是分钟、小时、日、月、周及以上的任意组合。</p><p>crontab安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install crontabs</span><br></pre></td></tr></table></figure><p>服务操作说明：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service crond start   <span class="comment">## 启动服务 </span></span><br><span class="line">service crond stop    <span class="comment">## 关闭服务 </span></span><br><span class="line">service crond restart <span class="comment">## 重启服务</span></span><br></pre></td></tr></table></figure><h3 id="9-1-命令格式"><a href="#9-1-命令格式" class="headerlink" title="9.1 命令格式"></a>9.1 命令格式</h3><p>crontab [-u user] file</p><p>crontab [-u user] [ -e | -l | -r ]</p><p>参数说明：</p><p>-u user：用来设定某个用户的crontab服务  </p><p>file：file是命令文件的名字,表示将file做为crontab的任务列表文件</p><p>并载入crontab。</p><p>-e：编辑某个用户的crontab文件内容。如果不指定用户，则表示编辑当前</p><p>用户的crontab文件。</p><p>-l：显示某个用户的crontab文件内容。如果不指定用户，则表示显示当前</p><p>用户的crontab文件内容。</p><p>-r：删除定时任务配置，从&#x2F;var&#x2F;spool&#x2F;cron目录中删除某个用户的crontab</p><p>文件，如果不指定用户，则默认删除当前用户的crontab文件。</p><p>命令示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">crontab file [-u user] <span class="comment">## 用指定的文件替代目前的crontab</span></span><br><span class="line">crontab -l [-u user]  <span class="comment">## 列出用户目前的crontab</span></span><br><span class="line">crontab -e [-u user]  <span class="comment">## 编辑用户目前的crontab</span></span><br></pre></td></tr></table></figure><h3 id="9-2-配置说明、实例"><a href="#9-2-配置说明、实例" class="headerlink" title="9.2 配置说明、实例"></a>9.2 配置说明、实例</h3><p>命令：*   *    *   *   *   command  </p><p>解释：分  时  日  月  周  命令</p><p>第1列表示分钟1～59 每分钟用*或者 *&#x2F;1表示    </p><p>第2列表示小时0～23（0表示0点）</p><p>第3列表示日期1～31  </p><p>第4列表示月份1～12  </p><p>第5列标识号星期0～6（0表示星期天）  </p><p>第6列要运行的命令</p><p>配置实例：</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">先打开定时任务所在的文件：</span><br><span class="line">crontab -e</span><br><span class="line"></span><br><span class="line">每分钟执行一次<span class="built_in">date</span>命令 </span><br><span class="line">*/1 * * * * <span class="built_in">date</span> &gt;&gt; /root/date.txt</span><br><span class="line"></span><br><span class="line">每晚的21:30重启apache。 </span><br><span class="line">30 21 * * * service httpd restart</span><br><span class="line"></span><br><span class="line">每月1、10、22日的4 : 45重启apache。  </span><br><span class="line">45 4 1,10,22 * * service httpd restart</span><br><span class="line"></span><br><span class="line">每周六、周日的1 : 10重启apache。 </span><br><span class="line">10 1 * * 6,0 service httpd restart</span><br><span class="line"></span><br><span class="line">每天18 : 00至23 : 00之间每隔30分钟重启apache。</span><br><span class="line">0,30   18-23    *   *   *   service httpd restart</span><br><span class="line">晚上11点到早上7点之间，每隔一小时重启apache</span><br><span class="line"></span><br><span class="line">* 23-7/1    *   *   *   service httpd restart</span><br></pre></td></tr></table></figure><h2 id="十、其他命令"><a href="#十、其他命令" class="headerlink" title="十、其他命令"></a>十、其他命令</h2><h3 id="10-1-查看当前目录：pwd"><a href="#10-1-查看当前目录：pwd" class="headerlink" title="10.1 查看当前目录：pwd"></a>10.1 查看当前目录：pwd</h3><p>命令：pwd     查看当前目录路径</p><h3 id="10-2-查看进程：ps-ef"><a href="#10-2-查看进程：ps-ef" class="headerlink" title="10.2 查看进程：ps -ef"></a>10.2 查看进程：ps -ef</h3><p>命令：ps -ef    查看所有正在运行的进程</p><h3 id="10-3-结束进程：kill"><a href="#10-3-结束进程：kill" class="headerlink" title="10.3 结束进程：kill"></a>10.3 结束进程：kill</h3><p>命令：kill pid 或者 kill -9 pid(强制杀死进程)           pid:进程号</p><h3 id="10-4-网络通信命令："><a href="#10-4-网络通信命令：" class="headerlink" title="10.4 网络通信命令："></a>10.4 网络通信命令：</h3><p>ifconfig：查看网卡信息</p><p>命令：ifconfig 或 ifconfig | more</p><p>ping：查看与某台机器的连接情况</p><p>命令：ping ip</p><p>netstat -an：查看当前系统端口</p><p>命令：netstat -an</p><p>搜索指定端口<br>命令：netstat -an | grep 8080</p><h3 id="10-5-配置网络"><a href="#10-5-配置网络" class="headerlink" title="10.5 配置网络"></a>10.5 配置网络</h3><p>命令：setup</p><h3 id="10-6-重启网络"><a href="#10-6-重启网络" class="headerlink" title="10.6 重启网络"></a>10.6 重启网络</h3><p>命令：service network restart</p><h3 id="10-7-切换用户"><a href="#10-7-切换用户" class="headerlink" title="10.7 切换用户"></a>10.7 切换用户</h3><p>命令：su - 用户名</p><h3 id="10-8-关闭防火墙"><a href="#10-8-关闭防火墙" class="headerlink" title="10.8 关闭防火墙"></a>10.8 关闭防火墙</h3><p>命令：chkconfig iptables off</p><p>或者：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iptables -L;</span><br><span class="line">iptables -F;</span><br><span class="line">service iptables stop</span><br></pre></td></tr></table></figure><h3 id="10-9-修改文件权限"><a href="#10-9-修改文件权限" class="headerlink" title="10.9 修改文件权限"></a>10.9 修改文件权限</h3><p>命令：chmod 777</p><h3 id="10-10-清屏"><a href="#10-10-清屏" class="headerlink" title="10.10 清屏"></a>10.10 清屏</h3><p>命令：ctrl + l</p><h3 id="10-11-vi模式下快捷键"><a href="#10-11-vi模式下快捷键" class="headerlink" title="10.11 vi模式下快捷键"></a>10.11 vi模式下快捷键</h3><p>esc后:</p><p>保存并退出快捷键：shift+z+z</p><p>光标跳到最后一行快捷键：shift+g</p><p>删除一行：dd</p><p>复制一行内容：y+y</p><p>粘贴复制的内容：p</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HashMap循环遍历</title>
      <link href="/2020/11/18/Java_10_HashMap%E5%BE%AA%E7%8E%AF%E9%81%8D%E5%8E%86/"/>
      <url>/2020/11/18/Java_10_HashMap%E5%BE%AA%E7%8E%AF%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<p>HashMap 遍历从大的方向来说，可分为以下 4 类：</p><ol><li>迭代器（Iterator）方式遍历；</li><li>For Each 方式遍历；</li><li>Lambda 表达式遍历（JDK 1.8+）;</li><li>Streams API 遍历（JDK 1.8+）。</li></ol><span id="more"></span><p>但每种类型下又有不同的实现方式，因此具体的遍历方式又可以分为以下 7 种：</p><ol><li>使用迭代器（Iterator）EntrySet 的方式进行遍历；</li><li>使用迭代器（Iterator）KeySet 的方式进行遍历；</li><li>使用 For Each EntrySet 的方式进行遍历；</li><li>使用 For Each KeySet 的方式进行遍历；</li><li>使用 Lambda 表达式的方式进行遍历；</li><li>使用 Streams API 单线程的方式进行遍历；</li><li>使用 Streams API 多线程的方式进行遍历。</li></ol><p>接下来我们来看每种遍历方式的具体实现代码。</p><h3 id="1-迭代器-EntrySet"><a href="#1-迭代器-EntrySet" class="headerlink" title="1.迭代器 EntrySet"></a>1.迭代器 EntrySet</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashMapTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建并赋值 HashMap</span></span><br><span class="line">        Map&lt;Integer, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(<span class="number">1</span>, <span class="string">&quot;Java&quot;</span>);</span><br><span class="line">        map.put(<span class="number">2</span>, <span class="string">&quot;JDK&quot;</span>);</span><br><span class="line">        map.put(<span class="number">3</span>, <span class="string">&quot;Spring Framework&quot;</span>);</span><br><span class="line">        map.put(<span class="number">4</span>, <span class="string">&quot;MyBatis framework&quot;</span>);</span><br><span class="line">        map.put(<span class="number">5</span>, <span class="string">&quot;与或非&quot;</span>);</span><br><span class="line">        <span class="comment">// 遍历</span></span><br><span class="line">        Iterator&lt;Map.Entry&lt;Integer, String&gt;&gt; iterator = map.entrySet().iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            Map.Entry&lt;Integer, String&gt; entry = iterator.next();</span><br><span class="line">            System.out.println(entry.getKey());</span><br><span class="line">            System.out.println(entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上程序的执行结果为：</p><blockquote><p>1</p><p>Java</p><p>2</p><p>JDK</p><p>3</p><p>Spring Framework</p><p>4</p><p>MyBatis framework</p><p>5</p><p>与或非</p></blockquote><h3 id="2-迭代器-KeySet"><a href="#2-迭代器-KeySet" class="headerlink" title="2.迭代器 KeySet"></a>2.迭代器 KeySet</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashMapTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建并赋值 HashMap</span></span><br><span class="line">        Map&lt;Integer, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(<span class="number">1</span>, <span class="string">&quot;Java&quot;</span>);</span><br><span class="line">        map.put(<span class="number">2</span>, <span class="string">&quot;JDK&quot;</span>);</span><br><span class="line">        map.put(<span class="number">3</span>, <span class="string">&quot;Spring Framework&quot;</span>);</span><br><span class="line">        map.put(<span class="number">4</span>, <span class="string">&quot;MyBatis framework&quot;</span>);</span><br><span class="line">        map.put(<span class="number">5</span>, <span class="string">&quot;与或非&quot;</span>);</span><br><span class="line">        <span class="comment">// 遍历</span></span><br><span class="line">        Iterator&lt;Integer&gt; iterator = map.keySet().iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">key</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">            System.out.println(key);</span><br><span class="line">            System.out.println(map.get(key));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上程序的执行结果为：</p><blockquote><p>1</p><p>Java</p><p>2</p><p>JDK</p><p>3</p><p>Spring Framework</p><p>4</p><p>MyBatis framework</p><p>5</p><p>与或非</p></blockquote><h3 id="3-ForEach-EntrySet"><a href="#3-ForEach-EntrySet" class="headerlink" title="3.ForEach EntrySet"></a>3.ForEach EntrySet</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashMapTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建并赋值 HashMap</span></span><br><span class="line">        Map&lt;Integer, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(<span class="number">1</span>, <span class="string">&quot;Java&quot;</span>);</span><br><span class="line">        map.put(<span class="number">2</span>, <span class="string">&quot;JDK&quot;</span>);</span><br><span class="line">        map.put(<span class="number">3</span>, <span class="string">&quot;Spring Framework&quot;</span>);</span><br><span class="line">        map.put(<span class="number">4</span>, <span class="string">&quot;MyBatis framework&quot;</span>);</span><br><span class="line">        map.put(<span class="number">5</span>, <span class="string">&quot;与或非&quot;</span>);</span><br><span class="line">        <span class="comment">// 遍历</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer, String&gt; entry : map.entrySet()) &#123;</span><br><span class="line">            System.out.println(entry.getKey());</span><br><span class="line">            System.out.println(entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上程序的执行结果为：</p><blockquote><p>1</p><p>Java</p><p>2</p><p>JDK</p><p>3</p><p>Spring Framework</p><p>4</p><p>MyBatis framework</p><p>5</p><p>与或非</p></blockquote><h3 id="4-ForEach-KeySet"><a href="#4-ForEach-KeySet" class="headerlink" title="4.ForEach KeySet"></a>4.ForEach KeySet</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashMapTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建并赋值 HashMap</span></span><br><span class="line">        Map&lt;Integer, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(<span class="number">1</span>, <span class="string">&quot;Java&quot;</span>);</span><br><span class="line">        map.put(<span class="number">2</span>, <span class="string">&quot;JDK&quot;</span>);</span><br><span class="line">        map.put(<span class="number">3</span>, <span class="string">&quot;Spring Framework&quot;</span>);</span><br><span class="line">        map.put(<span class="number">4</span>, <span class="string">&quot;MyBatis framework&quot;</span>);</span><br><span class="line">        map.put(<span class="number">5</span>, <span class="string">&quot;与或非&quot;</span>);</span><br><span class="line">        <span class="comment">// 遍历</span></span><br><span class="line">        <span class="keyword">for</span> (Integer key : map.keySet()) &#123;</span><br><span class="line">            System.out.println(key);</span><br><span class="line">            System.out.println(map.get(key));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上程序的执行结果为：</p><blockquote><p>1</p><p>Java</p><p>2</p><p>JDK</p><p>3</p><p>Spring Framework</p><p>4</p><p>MyBatis framework</p><p>5</p><p>与或非</p></blockquote><h3 id="5-Lambda"><a href="#5-Lambda" class="headerlink" title="5.Lambda"></a>5.Lambda</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashMapTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建并赋值 HashMap</span></span><br><span class="line">        Map&lt;Integer, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(<span class="number">1</span>, <span class="string">&quot;Java&quot;</span>);</span><br><span class="line">        map.put(<span class="number">2</span>, <span class="string">&quot;JDK&quot;</span>);</span><br><span class="line">        map.put(<span class="number">3</span>, <span class="string">&quot;Spring Framework&quot;</span>);</span><br><span class="line">        map.put(<span class="number">4</span>, <span class="string">&quot;MyBatis framework&quot;</span>);</span><br><span class="line">        map.put(<span class="number">5</span>, <span class="string">&quot;与或非&quot;</span>);</span><br><span class="line">        <span class="comment">// 遍历</span></span><br><span class="line">        map.forEach((key, value) -&gt; &#123;</span><br><span class="line">            System.out.println(key);</span><br><span class="line">            System.out.println(value);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上程序的执行结果为：</p><blockquote><p>1</p><p>Java</p><p>2</p><p>JDK</p><p>3</p><p>Spring Framework</p><p>4</p><p>MyBatis framework</p><p>5</p><p>与或非</p></blockquote><h3 id="6-Streams-API-单线程"><a href="#6-Streams-API-单线程" class="headerlink" title="6.Streams API 单线程"></a>6.Streams API 单线程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashMapTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建并赋值 HashMap</span></span><br><span class="line">        Map&lt;Integer, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(<span class="number">1</span>, <span class="string">&quot;Java&quot;</span>);</span><br><span class="line">        map.put(<span class="number">2</span>, <span class="string">&quot;JDK&quot;</span>);</span><br><span class="line">        map.put(<span class="number">3</span>, <span class="string">&quot;Spring Framework&quot;</span>);</span><br><span class="line">        map.put(<span class="number">4</span>, <span class="string">&quot;MyBatis framework&quot;</span>);</span><br><span class="line">        map.put(<span class="number">5</span>, <span class="string">&quot;与或非&quot;</span>);</span><br><span class="line">        <span class="comment">// 遍历</span></span><br><span class="line">        map.entrySet().stream().forEach((entry) -&gt; &#123;</span><br><span class="line">            System.out.println(entry.getKey());</span><br><span class="line">            System.out.println(entry.getValue());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上程序的执行结果为：</p><blockquote><p>1</p><p>Java</p><p>2</p><p>JDK</p><p>3</p><p>Spring Framework</p><p>4</p><p>MyBatis framework</p><p>5</p><p>与或非</p></blockquote><h3 id="7-Streams-API-多线程"><a href="#7-Streams-API-多线程" class="headerlink" title="7.Streams API 多线程"></a>7.Streams API 多线程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashMapTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建并赋值 HashMap</span></span><br><span class="line">        Map&lt;Integer, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(<span class="number">1</span>, <span class="string">&quot;Java&quot;</span>);</span><br><span class="line">        map.put(<span class="number">2</span>, <span class="string">&quot;JDK&quot;</span>);</span><br><span class="line">        map.put(<span class="number">3</span>, <span class="string">&quot;Spring Framework&quot;</span>);</span><br><span class="line">        map.put(<span class="number">4</span>, <span class="string">&quot;MyBatis framework&quot;</span>);</span><br><span class="line">        map.put(<span class="number">5</span>, <span class="string">&quot;与或非&quot;</span>);</span><br><span class="line">        <span class="comment">// 遍历</span></span><br><span class="line">        map.entrySet().parallelStream().forEach((entry) -&gt; &#123;</span><br><span class="line">            System.out.println(entry.getKey());</span><br><span class="line">            System.out.println(entry.getValue());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上程序的执行结果为：</p><blockquote><p>4</p><p>MyBatis framework</p><p>5</p><p>与或非</p><p>1</p><p>Java</p><p>2</p><p>JDK</p><p>3</p><p>Spring Framework</p></blockquote><h3 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h3><p>接下来我们使用 Oracle 官方提供的性能测试工具 JMH（Java Microbenchmark Harness，JAVA 微基准测试套件）来测试一下这 7 种循环的性能。</p><p>首先，我们先要引入 JMH 框架，在 <code>pom.xml</code> 文件中添加如下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.openjdk.jmh/jmh-core --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openjdk.jmh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jmh-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.openjdk.jmh/jmh-generator-annprocess --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openjdk.jmh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jmh-generator-annprocess<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后编写测试代码，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@BenchmarkMode(Mode.AverageTime)</span> <span class="comment">// 测试完成时间</span></span><br><span class="line"><span class="meta">@OutputTimeUnit(TimeUnit.NANOSECONDS)</span></span><br><span class="line"><span class="meta">@Warmup(iterations = 2, time = 1, timeUnit = TimeUnit.SECONDS)</span> <span class="comment">// 预热 2 轮，每次 1s</span></span><br><span class="line"><span class="meta">@Measurement(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)</span> <span class="comment">// 测试 5 轮，每次 1s</span></span><br><span class="line"><span class="meta">@Fork(1)</span> <span class="comment">// fork 1 个线程</span></span><br><span class="line"><span class="meta">@State(Scope.Thread)</span> <span class="comment">// 每个测试线程一个实例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashMapCycleTest</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> Map&lt;Integer, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>() &#123;&#123;</span><br><span class="line">        <span class="comment">// 添加数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            put(i, <span class="string">&quot;val:&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RunnerException &#123;</span><br><span class="line">        <span class="comment">// 启动基准测试</span></span><br><span class="line">        <span class="type">Options</span> <span class="variable">opt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OptionsBuilder</span>()</span><br><span class="line">                .include(HashMapCycle.class.getSimpleName()) <span class="comment">// 要导入的测试类</span></span><br><span class="line">                .output(<span class="string">&quot;/Users/admin/Desktop/jmh-map.log&quot;</span>) <span class="comment">// 输出测试结果的文件</span></span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Runner</span>(opt).run(); <span class="comment">// 执行测试</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">entrySet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 遍历</span></span><br><span class="line">        Iterator&lt;Map.Entry&lt;Integer, String&gt;&gt; iterator = map.entrySet().iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            Map.Entry&lt;Integer, String&gt; entry = iterator.next();</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">k</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">            <span class="type">String</span> <span class="variable">v</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">forEachEntrySet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 遍历</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer, String&gt; entry : map.entrySet()) &#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">k</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">            <span class="type">String</span> <span class="variable">v</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">keySet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 遍历</span></span><br><span class="line">        Iterator&lt;Integer&gt; iterator = map.keySet().iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">k</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">            <span class="type">String</span> <span class="variable">v</span> <span class="operator">=</span> map.get(k);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">forEachKeySet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 遍历</span></span><br><span class="line">        <span class="keyword">for</span> (Integer key : map.keySet()) &#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">k</span> <span class="operator">=</span> key;</span><br><span class="line">            <span class="type">String</span> <span class="variable">v</span> <span class="operator">=</span> map.get(k);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lambda</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 遍历</span></span><br><span class="line">        map.forEach((key, value) -&gt; &#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">k</span> <span class="operator">=</span> key;</span><br><span class="line">            <span class="type">String</span> <span class="variable">v</span> <span class="operator">=</span> value;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">streamApi</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 单线程遍历</span></span><br><span class="line">        map.entrySet().stream().forEach((entry) -&gt; &#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">k</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">            <span class="type">String</span> <span class="variable">v</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">parallelStreamApi</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 多线程遍历</span></span><br><span class="line">        map.entrySet().parallelStream().forEach((entry) -&gt; &#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">k</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">            <span class="type">String</span> <span class="variable">v</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所有被添加了 <code>@Benchmark</code> 注解的方法都会被测试，因为 parallelStream 为多线程版本性能一定是最好的，所以就不参与测试了，其他 6 个方法的测试结果如下：</p><p><img src="https://gitee.com/andornot888/andornot_images/raw/master//imgs/hashmap1.webp" alt="图片"></p><p>其中 Units 为 ns&#x2F;op 意思是执行完成时间（单位为纳秒），而 Score 列为平均执行时间， <code>±</code> 符号表示误差。从以上结果可以看出，两个 <code>entrySet</code> 的性能相近，并且执行速度最快，接下来是 <code>stream</code> ，然后是两个 <code>keySet</code>，性能最差的是 <code>KeySet</code> 。</p><blockquote><p>注：以上结果基于测试环境：JDK 1.8 &#x2F; Mac mini (2018) &#x2F; Idea 2020.1</p></blockquote><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p><strong>从以上结果可以看出 <code>entrySet</code> 的性能比 <code>keySet</code> 的性能高出了一倍之多，因此我们应该尽量使用 <code>entrySet</code> 来实现 Map 集合的遍历</strong>。</p><h3 id="字节码分析"><a href="#字节码分析" class="headerlink" title="字节码分析"></a>字节码分析</h3><p>要理解以上的测试结果，我们需要把所有遍历代码通过 <code>javac</code> 编译成字节码来看具体的原因。</p><p>编译后，我们使用 Idea 打开字节码，内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by Fernflower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Map.Entry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashMapTest</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> Map&lt;Integer, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>() &#123;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">var1</span> <span class="operator">=</span> <span class="number">0</span>; var1 &lt; <span class="number">2</span>; ++var1) &#123;</span><br><span class="line">                <span class="built_in">this</span>.put(var1, <span class="string">&quot;val:&quot;</span> + var1);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HashMapTest</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] var0)</span> &#123;</span><br><span class="line">        entrySet();</span><br><span class="line">        keySet();</span><br><span class="line">        forEachEntrySet();</span><br><span class="line">        forEachKeySet();</span><br><span class="line">        lambda();</span><br><span class="line">        streamApi();</span><br><span class="line">        parallelStreamApi();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">entrySet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">var0</span> <span class="operator">=</span> map.entrySet().iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(var0.hasNext()) &#123;</span><br><span class="line">            <span class="type">Entry</span> <span class="variable">var1</span> <span class="operator">=</span> (Entry)var0.next();</span><br><span class="line">            System.out.println(var1.getKey());</span><br><span class="line">            System.out.println((String)var1.getValue());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">keySet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">var0</span> <span class="operator">=</span> map.keySet().iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(var0.hasNext()) &#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">var1</span> <span class="operator">=</span> (Integer)var0.next();</span><br><span class="line">            System.out.println(var1);</span><br><span class="line">            System.out.println((String)map.get(var1));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">forEachEntrySet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">var0</span> <span class="operator">=</span> map.entrySet().iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(var0.hasNext()) &#123;</span><br><span class="line">            <span class="type">Entry</span> <span class="variable">var1</span> <span class="operator">=</span> (Entry)var0.next();</span><br><span class="line">            System.out.println(var1.getKey());</span><br><span class="line">            System.out.println((String)var1.getValue());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">forEachKeySet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">var0</span> <span class="operator">=</span> map.keySet().iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(var0.hasNext()) &#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">var1</span> <span class="operator">=</span> (Integer)var0.next();</span><br><span class="line">            System.out.println(var1);</span><br><span class="line">            System.out.println((String)map.get(var1));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">lambda</span><span class="params">()</span> &#123;</span><br><span class="line">        map.forEach((var0, var1) -&gt; &#123;</span><br><span class="line">            System.out.println(var0);</span><br><span class="line">            System.out.println(var1);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">streamApi</span><span class="params">()</span> &#123;</span><br><span class="line">        map.entrySet().stream().forEach((var0) -&gt; &#123;</span><br><span class="line">            System.out.println(var0.getKey());</span><br><span class="line">            System.out.println((String)var0.getValue());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">parallelStreamApi</span><span class="params">()</span> &#123;</span><br><span class="line">        map.entrySet().parallelStream().forEach((var0) -&gt; &#123;</span><br><span class="line">            System.out.println(var0.getKey());</span><br><span class="line">            System.out.println((String)var0.getValue());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从结果可以看出，除了 Lambda 和 Streams API 之外，通过迭代器循环和 <code>for</code> 循环的遍历的 <code>EntrySet</code> 最终生成的代码是一样的，他们都是在循环中创建了一个遍历对象 <code>Entry</code> ，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">entrySet</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Iterator</span> <span class="variable">var0</span> <span class="operator">=</span> map.entrySet().iterator();</span><br><span class="line">    <span class="keyword">while</span>(var0.hasNext()) &#123;</span><br><span class="line">        <span class="type">Entry</span> <span class="variable">var1</span> <span class="operator">=</span> (Entry)var0.next();</span><br><span class="line">        System.out.println(var1.getKey());</span><br><span class="line">        System.out.println((String)var1.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">forEachEntrySet</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Iterator</span> <span class="variable">var0</span> <span class="operator">=</span> map.entrySet().iterator();</span><br><span class="line">    <span class="keyword">while</span>(var0.hasNext()) &#123;</span><br><span class="line">        <span class="type">Entry</span> <span class="variable">var1</span> <span class="operator">=</span> (Entry)var0.next();</span><br><span class="line">        System.out.println(var1.getKey());</span><br><span class="line">        System.out.println((String)var1.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而 <code>KeySet</code> 的代码也是类似的，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">keySet</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Iterator</span> <span class="variable">var0</span> <span class="operator">=</span> map.keySet().iterator();</span><br><span class="line">    <span class="keyword">while</span>(var0.hasNext()) &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">var1</span> <span class="operator">=</span> (Integer)var0.next();</span><br><span class="line">        System.out.println(var1);</span><br><span class="line">        System.out.println((String)map.get(var1));</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">forEachKeySet</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Iterator</span> <span class="variable">var0</span> <span class="operator">=</span> map.keySet().iterator();</span><br><span class="line">    <span class="keyword">while</span>(var0.hasNext()) &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">var1</span> <span class="operator">=</span> (Integer)var0.next();</span><br><span class="line">        System.out.println(var1);</span><br><span class="line">        System.out.println((String)map.get(var1));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以我们在使用迭代器或是 <code>for</code> 循环 <code>EntrySet</code> 时，他们的性能都是相同的，因为他们最终生成的字节码基本都是一样的；同理 <code>KeySet</code> 的两种遍历方式也是类似的。</p><h3 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h3><p><code>EntrySet</code> 之所以比 <code>KeySet</code> 的性能高是因为，<code>KeySet</code> 在循环时使用了 <code>map.get(key)</code>，而 <code>map.get(key)</code> 相当于又遍历了一遍 Map 集合去查询 <code>key</code> 所对应的值。为什么要用“又”这个词？那是因为<strong>在使用迭代器或者 for 循环时，其实已经遍历了一遍 Map 集合了，因此再使用 <code>map.get(key)</code> 查询时，相当于遍历了两遍</strong>。</p><p>而 <code>EntrySet</code> 只遍历了一遍 Map 集合，之后通过代码“Entry&lt;Integer, String&gt; entry &#x3D; iterator.next()”把对象的 <code>key</code> 和 <code>value</code> 值都放入到了 <code>Entry</code> 对象中，因此再获取 <code>key</code> 和 <code>value</code> 值时就无需再遍历 Map 集合，只需要从 <code>Entry</code> 对象中取值就可以了。</p><p>所以，**<code>EntrySet</code> 的性能比 <code>KeySet</code> 的性能高出了一倍，因为 <code>KeySet</code> 相当于循环了两遍 Map 集合，而 <code>EntrySet</code> 只循环了一遍**。</p><h3 id="安全性测试"><a href="#安全性测试" class="headerlink" title="安全性测试"></a>安全性测试</h3><p>从上面的性能测试结果和原理分析，我想大家应该选用那种遍历方式，已经心中有数的，而接下来我们就从「安全」的角度入手，来分析那种遍历方式更安全。</p><p>我们把以上遍历划分为四类进行测试：迭代器方式、For 循环方式、Lambda 方式和 Stream 方式，测试代码如下。</p><h4 id="1-迭代器方式"><a href="#1-迭代器方式" class="headerlink" title="1.迭代器方式"></a>1.迭代器方式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Iterator&lt;Map.Entry&lt;Integer, String&gt;&gt; iterator = map.entrySet().iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">    Map.Entry&lt;Integer, String&gt; entry = iterator.next();</span><br><span class="line">    <span class="keyword">if</span> (entry.getKey() == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 删除</span></span><br><span class="line">        System.out.println(<span class="string">&quot;del:&quot;</span> + entry.getKey());</span><br><span class="line">        iterator.remove();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;show:&quot;</span> + entry.getKey());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上程序的执行结果：</p><blockquote><p>show:0</p><p>del:1</p><p>show:2</p></blockquote><p>测试结果：<strong>迭代器中循环删除数据安全</strong>。</p><h4 id="2-For-循环方式"><a href="#2-For-循环方式" class="headerlink" title="2.For 循环方式"></a>2.For 循环方式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Map.Entry&lt;Integer, String&gt; entry : map.entrySet()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (entry.getKey() == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 删除</span></span><br><span class="line">        System.out.println(<span class="string">&quot;del:&quot;</span> + entry.getKey());</span><br><span class="line">        map.remove(entry.getKey());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;show:&quot;</span> + entry.getKey());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上程序的执行结果：</p><p><img src="https://gitee.com/andornot888/andornot_images/raw/master//imgs/hashmap2.png" alt="图片"></p><p>测试结果：<strong>For 循环中删除数据非安全</strong>。</p><h4 id="3-Lambda-方式"><a href="#3-Lambda-方式" class="headerlink" title="3.Lambda 方式"></a>3.Lambda 方式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">map.forEach((key, value) -&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="number">1</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;del:&quot;</span> + key);</span><br><span class="line">        map.remove(key);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;show:&quot;</span> + key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>以上程序的执行结果：</p><p><img src="https://gitee.com/andornot888/andornot_images/raw/master//imgs/hashmap3.png" alt="图片">测试结果：<strong>Lambda 循环中删除数据非安全</strong>。</p><p><strong>Lambda 删除的正确方式</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据 map 中的 key 去判断删除</span></span><br><span class="line">map.keySet().removeIf(key -&gt; key == <span class="number">1</span>);</span><br><span class="line">map.forEach((key, value) -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;show:&quot;</span> + key);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>以上程序的执行结果：</p><blockquote><p>show:0</p><p>show:2</p></blockquote><p>从上面的代码可以看出，可以先使用 <code>Lambda</code> 的 <code>removeIf</code> 删除多余的数据，再进行循环是一种正确操作集合的方式。</p><h4 id="4-Stream-方式"><a href="#4-Stream-方式" class="headerlink" title="4.Stream 方式"></a>4.Stream 方式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">map.entrySet().stream().forEach((entry) -&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (entry.getKey() == <span class="number">1</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;del:&quot;</span> + entry.getKey());</span><br><span class="line">        map.remove(entry.getKey());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;show:&quot;</span> + entry.getKey());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>以上程序的执行结果：</p><p><img src="https://gitee.com/andornot888/andornot_images/raw/master//imgs/hashmap4.png" alt="图片"></p><p>测试结果：<strong>Stream 循环中删除数据非安全</strong>。</p><p><strong>Stream 循环的正确方式</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">map.entrySet().stream().filter(m -&gt; <span class="number">1</span> != m.getKey()).forEach((entry) -&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (entry.getKey() == <span class="number">1</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;del:&quot;</span> + entry.getKey());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;show:&quot;</span> + entry.getKey());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>以上程序的执行结果：</p><blockquote><p>show:0</p><p>show:2</p></blockquote><p>从上面的代码可以看出，可以使用 <code>Stream</code> 中的 <code>filter</code> 过滤掉无用的数据，再进行遍历也是一种安全的操作集合的方式。</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>我们不能在遍历中使用集合 <code>map.remove()</code> 来删除数据，这是非安全的操作方式，但我们可以使用迭代器的 <code>iterator.remove()</code> 的方法来删除数据，这是安全的删除集合的方式。同样的我们也可以使用 Lambda 中的 <code>removeIf</code> 来提前删除数据，或者是使用 Stream 中的 <code>filter</code> 过滤掉要删除的数据进行循环，这样都是安全的，当然我们也可以在 <code>for</code> 循环前删除数据在遍历也是线程安全的。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文我们讲了 HashMap 4 种遍历方式：迭代器、for、lambda、stream，以及具体的 7 种遍历方法，综合性能和安全性来看，<strong>我们应该尽量使用迭代器（Iterator）来遍历 <code>EntrySet</code> 的遍历方式来操作 Map 集合</strong>，这样就会既安全又高效了。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>增强for和集合的四种遍历方式优缺点</title>
      <link href="/2020/11/16/Java_5_%E5%A2%9E%E5%BC%BAfor%E5%92%8C%E9%9B%86%E5%90%88%E7%9A%84%E5%9B%9B%E7%A7%8D%E9%81%8D%E5%8E%86%E6%96%B9%E5%BC%8F%E4%BC%98%E7%BC%BA%E7%82%B9/"/>
      <url>/2020/11/16/Java_5_%E5%A2%9E%E5%BC%BAfor%E5%92%8C%E9%9B%86%E5%90%88%E7%9A%84%E5%9B%9B%E7%A7%8D%E9%81%8D%E5%8E%86%E6%96%B9%E5%BC%8F%E4%BC%98%E7%BC%BA%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<p>增强for的出现是替代迭代器的，所以在遍历集合或者遍历数组就可以使用增强for去完成。</p><p>四种遍历方法：迭代器、普通for循环、增强for循环、(非重点)listiterator(iterator的子接口)两者相类似。</p><span id="more"></span><p>增强for循环的格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(数据大类型  变量名 : 数组或者集合对象名)&#123;</span><br><span class="line">  输出变量</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>  增强for循环的弊端：</p><ul><li><p>如果集合的对象是null，如果再次对集合操作，就会出现异常；</p></li><li><p>对集合进行判断，非空判断解决</p></li></ul><p>(还以一种Vector自带的elements()方法,类似于迭代器的遍历方法)</p><p>如果集合为null,抛出:java.lang.NullPointerException</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForExercise</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">ArrayList&lt;String&gt; array = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"><span class="comment">//array=null;</span></span><br><span class="line">array.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">array.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">array.add(<span class="string">&quot;worlid&quot;</span>);</span><br><span class="line"><span class="comment">// 迭代器遍历</span></span><br><span class="line"><span class="comment">//优点:自带选择判断语句hasNext()方法,不会出现遍历数量出现错误,书写复杂</span></span><br><span class="line"><span class="comment">//    可以对集合进行删除操作</span></span><br><span class="line"><span class="comment">//缺点:该方法只能遍历集合,比较局限,且需要建立对象,占用空间大</span></span><br><span class="line">Iterator&lt;String&gt; it = array.iterator();</span><br><span class="line"><span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> it.next();</span><br><span class="line">System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line"><span class="comment">//普通for循环</span></span><br><span class="line"><span class="comment">//优点:有判断数组长度的控制语句,并且可以选择遍历长度,</span></span><br><span class="line"><span class="comment">//    for循环使用范围广,且使用简单</span></span><br><span class="line"><span class="comment">//缺点:for循环更多适用于循环条件,不能对集合本身进行操作,对于集合遍历稍显不足</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> x=<span class="number">0</span>;x&lt;array.size();x++) &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> array.get(x);</span><br><span class="line">System.out.println(s1);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;-----------------&quot;</span>);</span><br><span class="line"><span class="comment">//增强for循环</span></span><br><span class="line"><span class="comment">//优点:代码简单易读,书写方便</span></span><br><span class="line"><span class="comment">//缺点:不能对集合本身进行操作</span></span><br><span class="line"><span class="keyword">for</span>(String b:array) &#123;</span><br><span class="line">System.out.println(b);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>身份证工具类</title>
      <link href="/2020/11/01/Java_4_IDCardUtil/"/>
      <url>/2020/11/01/Java_4_IDCardUtil/</url>
      
        <content type="html"><![CDATA[<p>校验身份证号；</p><p>根据身份证号获取年龄、出生日期、性别。</p><span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IDCardUtil</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 15位身份证号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">FIFTEEN_ID_CARD</span> <span class="operator">=</span> <span class="number">15</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 18位身份证号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">EIGHTEEN_ID_CARD</span> <span class="operator">=</span> <span class="number">18</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">SimpleDateFormat</span> <span class="variable">format</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据身份证号获取性别</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> IDCard</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getSex</span><span class="params">(String IDCard)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sex</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(IDCard)) &#123;</span><br><span class="line">            <span class="comment">// 15位身份证号</span></span><br><span class="line">            <span class="keyword">if</span> (IDCard.length() == FIFTEEN_ID_CARD) &#123;</span><br><span class="line">                <span class="keyword">if</span> (Integer.parseInt(IDCard.substring(<span class="number">14</span>, <span class="number">15</span>)) % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                    sex = <span class="string">&quot;2&quot;</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    sex = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 18位身份证号</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (IDCard.length() == EIGHTEEN_ID_CARD) &#123;</span><br><span class="line">                <span class="comment">// 判断性别</span></span><br><span class="line">                <span class="keyword">if</span> (Integer.parseInt(IDCard.substring(<span class="number">16</span>).substring(<span class="number">0</span>, <span class="number">1</span>)) % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                    sex = <span class="string">&quot;2&quot;</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    sex = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据身份证号获取年龄</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> IDCard</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title function_">getAge</span><span class="params">(String IDCard)</span> &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(IDCard) &amp;&amp; isValid(IDCard)) &#123;</span><br><span class="line">            <span class="comment">// 15位身份证号</span></span><br><span class="line">            <span class="keyword">if</span> (IDCard.length() == FIFTEEN_ID_CARD) &#123;</span><br><span class="line">                <span class="comment">// 身份证上的年份(15位身份证为1980年前的)</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">uyear</span> <span class="operator">=</span> <span class="string">&quot;19&quot;</span> + IDCard.substring(<span class="number">6</span>, <span class="number">8</span>);</span><br><span class="line">                <span class="comment">// 身份证上的月份</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">uyue</span> <span class="operator">=</span> IDCard.substring(<span class="number">8</span>, <span class="number">10</span>);</span><br><span class="line">                <span class="comment">// 当前年份</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">fyear</span> <span class="operator">=</span> format.format(date).substring(<span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">                <span class="comment">// 当前月份</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">fyue</span> <span class="operator">=</span> format.format(date).substring(<span class="number">5</span>, <span class="number">7</span>);</span><br><span class="line">                <span class="keyword">if</span> (Integer.parseInt(uyue) &lt;= Integer.parseInt(fyue)) &#123;</span><br><span class="line">                    age = Integer.parseInt(fyear) - Integer.parseInt(uyear) + <span class="number">1</span>;</span><br><span class="line">                    <span class="comment">// 当前用户还没过生</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    age = Integer.parseInt(fyear) - Integer.parseInt(uyear);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 18位身份证号</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (IDCard.length() == EIGHTEEN_ID_CARD) &#123;</span><br><span class="line">                <span class="comment">// 身份证上的年份</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">year</span> <span class="operator">=</span> IDCard.substring(<span class="number">6</span>).substring(<span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">                <span class="comment">// 身份证上的月份</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">yue</span> <span class="operator">=</span> IDCard.substring(<span class="number">10</span>).substring(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">                <span class="comment">// 当前年份</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">fyear</span> <span class="operator">=</span> format.format(date).substring(<span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">                <span class="comment">// 当前月份</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">fyue</span> <span class="operator">=</span> format.format(date).substring(<span class="number">5</span>, <span class="number">7</span>);</span><br><span class="line">                <span class="comment">// 当前月份大于用户出身的月份表示已过生日</span></span><br><span class="line">                <span class="keyword">if</span> (Integer.parseInt(yue) &lt;= Integer.parseInt(fyue)) &#123;</span><br><span class="line">                    age = Integer.parseInt(fyear) - Integer.parseInt(year) + <span class="number">1</span>;</span><br><span class="line">                    <span class="comment">// 当前用户还没过生日</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    age = Integer.parseInt(fyear) - Integer.parseInt(year);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取出生日期 yyyy年MM月dd日</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> IDCard</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getBirthday</span><span class="params">(String IDCard)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">birthday</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">year</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">month</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">day</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(IDCard)) &#123;</span><br><span class="line">            <span class="comment">// 15位身份证号</span></span><br><span class="line">            <span class="keyword">if</span> (IDCard.length() == FIFTEEN_ID_CARD) &#123;</span><br><span class="line">                <span class="comment">// 身份证上的年份(15位身份证为1980年前的)</span></span><br><span class="line">                year = <span class="string">&quot;19&quot;</span> + IDCard.substring(<span class="number">6</span>, <span class="number">8</span>);</span><br><span class="line">                <span class="comment">// 身份证上的月份</span></span><br><span class="line">                month = IDCard.substring(<span class="number">8</span>, <span class="number">10</span>);</span><br><span class="line">                <span class="comment">// 身份证上的日期</span></span><br><span class="line">                day = IDCard.substring(<span class="number">10</span>, <span class="number">12</span>);</span><br><span class="line">                <span class="comment">// 18位身份证号</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (IDCard.length() == EIGHTEEN_ID_CARD) &#123;</span><br><span class="line">                <span class="comment">// 身份证上的年份</span></span><br><span class="line">                year = IDCard.substring(<span class="number">6</span>).substring(<span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">                <span class="comment">// 身份证上的月份</span></span><br><span class="line">                month = IDCard.substring(<span class="number">10</span>).substring(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">                <span class="comment">// 身份证上的日期</span></span><br><span class="line">                day = IDCard.substring(<span class="number">12</span>).substring(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            birthday = year + <span class="string">&quot;-&quot;</span> + month + <span class="string">&quot;-&quot;</span> + day;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 身份证验证</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     *            号码内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否有效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">validResult</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">idNumPattern</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;(^[1-9]\\d&#123;5&#125;(18|19|([23]\\d))\\d&#123;2&#125;((0[1-9])|(10|11|12))(([0-2][1-9])&quot;</span> +</span><br><span class="line">                <span class="string">&quot;|10|20|30|31)\\d&#123;3&#125;[0-9Xx]$)|(^[1-9]\\d&#123;5&#125;\\d&#123;2&#125;((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\\d&#123;2&#125;$)&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 格式验证</span></span><br><span class="line">        <span class="keyword">if</span> (!idNumPattern.matcher(id).matches())&#123;</span><br><span class="line">            validResult = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 校验长度只能为15或18</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> id.length();</span><br><span class="line">        <span class="keyword">if</span> (len != FIFTEEN_ID_CARD &amp;&amp; len != EIGHTEEN_ID_CARD) &#123;</span><br><span class="line">            validResult = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> validResult;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抽奖（生成不重复随机数）</title>
      <link href="/2020/10/28/Java_3_core_array_lottery/"/>
      <url>/2020/10/28/Java_3_core_array_lottery/</url>
      
        <content type="html"><![CDATA[<p>​    来自《Java核心技术》数组章节的案例，根据开奖的数量和开奖的最大值输出不重复随机数，即开奖结果。</p><span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Lottery</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入开奖的数量：&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入开奖的最大值：&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//填充数组：1，2，3，...，n</span></span><br><span class="line">        <span class="type">int</span>[] numbers = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">            numbers[i] = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] result = <span class="keyword">new</span> <span class="title class_">int</span>[k];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; result.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> (<span class="type">int</span>) (Math.random() * n);<span class="comment">//生成一个0~（n-1）之间的随机索引</span></span><br><span class="line">            result[i] = numbers[r];</span><br><span class="line">            numbers[r] = numbers[n - <span class="number">1</span>];<span class="comment">//将numbers数组的最后一个值赋给上一步生成的“随机数”所在的索引位置，避免生成重复结果</span></span><br><span class="line">            n--;</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(result);</span><br><span class="line">        System.out.println(<span class="string">&quot;开奖结果为：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> r : result) &#123;</span><br><span class="line">            System.out.println(r);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获取时间差</title>
      <link href="/2020/10/24/Java_2_getTimeDeffer/"/>
      <url>/2020/10/24/Java_2_getTimeDeffer/</url>
      
        <content type="html"><![CDATA[<p>  根据两个字符串类型时间获取时分秒时间差。</p><span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取时间差</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> time1 time2 需要计算的时间</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getTimeDeffer</span><span class="params">(String time1, String time2)</span> &#123;</span><br><span class="line">       <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">       <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">       <span class="keyword">if</span> (time1 != <span class="literal">null</span> &amp;&amp; time2 != <span class="literal">null</span> &amp;&amp; time1.length() != <span class="number">0</span> &amp;&amp; time2.length() != <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="type">long</span> <span class="variable">dt1</span> <span class="operator">=</span> sdf.parse(time1).getTime();</span><br><span class="line">               <span class="type">long</span> <span class="variable">dt2</span> <span class="operator">=</span> sdf.parse(time2).getTime();</span><br><span class="line">               <span class="type">long</span> <span class="variable">dc</span> <span class="operator">=</span> Math.abs(dt2 - dt1);</span><br><span class="line">               <span class="type">long</span> <span class="variable">seconds</span> <span class="operator">=</span> dc / <span class="number">1000</span>;</span><br><span class="line">               <span class="type">long</span> <span class="variable">date</span> <span class="operator">=</span> seconds / (<span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span>);     <span class="comment">//相差的天数</span></span><br><span class="line">               <span class="type">long</span> <span class="variable">hour</span> <span class="operator">=</span> (seconds - date * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span>) / (<span class="number">60</span> * <span class="number">60</span>);<span class="comment">//相差的小时数</span></span><br><span class="line">               <span class="type">long</span> <span class="variable">minut</span> <span class="operator">=</span> (seconds - date * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> - hour * <span class="number">60</span> * <span class="number">60</span>) / (<span class="number">60</span>);<span class="comment">//相差的分钟数</span></span><br><span class="line">               <span class="type">long</span> <span class="variable">second</span> <span class="operator">=</span> (seconds - date * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> - hour * <span class="number">60</span> * <span class="number">60</span> - minut * <span class="number">60</span>);<span class="comment">//相差的秒数</span></span><br><span class="line">               <span class="keyword">return</span> (date == <span class="number">0</span> ? <span class="string">&quot;&quot;</span> : (date + <span class="string">&quot;天&quot;</span>)) + (hour == <span class="number">0</span> ? <span class="string">&quot;&quot;</span> : (hour + <span class="string">&quot;小时&quot;</span>)) + (minut == <span class="number">0</span> ? <span class="string">&quot;&quot;</span> : (minut + <span class="string">&quot;分&quot;</span>)) + (second == <span class="number">0</span> ? <span class="string">&quot;&quot;</span> : (second + <span class="string">&quot;秒&quot;</span>));</span><br><span class="line">           &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>String、StringBuffer和StringBuilder的区别</title>
      <link href="/2020/10/20/Java_1_String%E3%80%81StringBuffer%E5%92%8CStringBuilder/"/>
      <url>/2020/10/20/Java_1_String%E3%80%81StringBuffer%E5%92%8CStringBuilder/</url>
      
        <content type="html"><![CDATA[<p>string、stringbuffer和stringbuilder的区别是什么？string为什么是不可变的？</p><span id="more"></span><h2 id="Answer："><a href="#Answer：" class="headerlink" title="Answer："></a>Answer：</h2><ul><li><p><code>String</code> 类中使用 final 关键字修饰字符数组来保存字符串，<code>private final char value[]</code>，所以<code>String</code> 对象是不可变的。</p><blockquote><p>补充：在 Java 9 之后，String 、<code>StringBuilder</code> 与 <code>StringBuffer</code> 的实现改用 byte 数组存储字符串 <code>private final byte[] value</code></p></blockquote><p>而 <code>StringBuilder</code> 与 <code>StringBuffer</code> 都继承自 <code>AbstractStringBuilder</code> 类，在 <code>AbstractStringBuilder</code> 中也是使用字符数组保存字符串<code>char[]value</code> 但是没有用 <code>final</code> 关键字修饰，所以这两种对象都是可变的。</p></li><li><p><code>StringBuffer</code> 对方法加了同步锁或者对调用的方法加了同步锁，所以是线程安全的。<code>StringBuilder</code> 并没有对方法进行加同步锁，所以是非线程安全的。</p></li><li><p>每次对 <code>String</code> 类型进行改变的时候，都会生成一个新的 <code>String</code> 对象，然后将指针指向新的 <code>String</code> 对象。<code>StringBuffer</code> 每次都会对 <code>StringBuffer</code> 对象本身进行操作，而不是生成新的对象并改变对象引用。相同情况下使用 <code>StringBuilder</code> 相比使用 <code>StringBuffer</code> 仅能获得 10%~15% 左右的性能提升，但却要冒多线程不安全的风险。</p></li><li><p>操作少量的数据: 适用 <code>String</code></p></li><li><p>单线程操作字符串缓冲区下操作大量数据: 适用 <code>StringBuilder</code></p></li><li><p>多线程操作字符串缓冲区下操作大量数据: 适用 <code>StringBuffer</code></p></li></ul><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><h3 id="1-String对象的两种创建方式："><a href="#1-String对象的两种创建方式：" class="headerlink" title="1.String对象的两种创建方式："></a>1.String对象的两种创建方式：</h3><blockquote><p>从概念上讲，Java字符串就是Unicode字符序列。例如，串”Java\u2122” 由5个Unicode字符J、 a、 v、 a和TM。Java没有内置的字符串类型，而是在标准Java类库中提供了一个预定义类，很自然地叫做String。每个用双引号括起来的字符串都是Strinq类的一个实例。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;abcd&quot;</span>;</span><br><span class="line">     <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abcd&quot;</span>);</span><br><span class="line">     System.out.println(str1==str2);<span class="comment">//false</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/andornot888/andornot_images/raw/master//imgs/java1_1.png" alt="image-20210827170942332"></p><p>这两种不同的创建方法是有差别的，第一种方式是在常量池中拿对象，第二种方式是直接在堆内存空间创建一个新的对象。</p><p><strong>String 类型的常量池比较特殊。它的主要使用方法有两种：</strong></p><ul><li>直接使用双引号声明出来的 String 对象会直接存储在常量池中。</li><li>如果不是用双引号声明的 String 对象，可以使用 String 提供的 intern 方法。String.intern() 是一个 Native 方法，它的作用是：如果运行时常量池中已经包含一个等于此 String 对象内容的字符串，则返回常量池中该字符串的引用；如果没有，则在常量池中创建与此 String 内容相同的字符串，并返回常量池中创建的字符串的引用。</li></ul><p>String.intern()方法主要适用于程序中需要保存有限个会被反复使用的值的场景，这样可以减少内存消耗，同时在进行比较操作时减少时耗，提高程序性能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;计算机&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> s1.intern();</span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="string">&quot;计算机&quot;</span>;</span><br><span class="line">System.out.println(s2);<span class="comment">//计算机</span></span><br><span class="line">System.out.println(s1 == s2);<span class="comment">//false，因为一个是堆内存中的String对象一个是常量池中的String对象，</span></span><br><span class="line">System.out.println(s3 == s2);<span class="comment">//true，因为两个都是常量池中的String对象</span></span><br></pre></td></tr></table></figure><h3 id="2-String-字符串拼接"><a href="#2-String-字符串拼接" class="headerlink" title="2.String 字符串拼接"></a>2.String 字符串拼接</h3><p>如果一个String类型和一个非String类型进行拼接，String类型在前</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">ans</span> <span class="operator">=</span> s + num;</span><br></pre></td></tr></table></figure><p>面试题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;str&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;ing&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> <span class="string">&quot;str&quot;</span> + <span class="string">&quot;ing&quot;</span>;<span class="comment">//常量池中的对象</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str4</span> <span class="operator">=</span> str1 + str2; <span class="comment">//在堆上创建的新的对象  </span></span><br><span class="line"><span class="type">String</span> <span class="variable">str5</span> <span class="operator">=</span> <span class="string">&quot;string&quot;</span>;<span class="comment">//常量池中的对象</span></span><br><span class="line">System.out.println(str3 == str4);<span class="comment">//false</span></span><br><span class="line">System.out.println(str3 == str5);<span class="comment">//true</span></span><br><span class="line">System.out.println(str4 == str5);<span class="comment">//false</span></span><br></pre></td></tr></table></figure><h3 id="3-空值与Null串"><a href="#3-空值与Null串" class="headerlink" title="3.空值与Null串"></a>3.空值与Null串</h3><p>检查一个字符串既不是<code>null</code>，也不为空串，这种情况使用以下条件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(str != <span class="literal">null</span> &amp;&amp; str.length() != <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>首先要检查str不为null。</p><h3 id="4-String-API"><a href="#4-String-API" class="headerlink" title="4.String API"></a>4.String API</h3><ul><li><p><strong>int compareTo (String other)</strong></p><p>按照字典顺序,如果字符串位于other之前,返回一个负数;如果字符串位于other之后,返回一个正数;如果两个字符串相等,返回0。</p></li><li><p><strong>boolean startsWith (String prefix)</strong></p></li><li><p><strong>boolean endsWith (String suffix)</strong></p><p>如果字符串以suffix开头或结尾,则返回true。</p></li><li><p><strong>int indexOf (String str)</strong></p><p><strong>int indexof (String str, int fromlndex)</strong></p><p><strong>int indexOf (int cp)</strong></p><p><strong>int indexof (int cp, int fromlndex)</strong></p><p>返回与字符串str或代码点cp匹配的第一个子串的开始位置。这个位置从索引0或fromlndex开始计算。如果在原始串中不存在str,返回-1 </p></li><li><p><strong>String trim ()</strong></p><p>返回一个新字符串。这个字符串将删除了原始字符串头部和尾部的空格。</p></li><li><p><strong>String join (CharSequence delimiter,CharSequence…elements) 8</strong></p><p>返回一个新字符串,用给定的定界符连接所有元素。</p></li></ul><h2 id="StringBuilder-和StringBuffer"><a href="#StringBuilder-和StringBuffer" class="headerlink" title="StringBuilder 和StringBuffer"></a>StringBuilder 和StringBuffer</h2><h3 id="1-构建字符串构建器"><a href="#1-构建字符串构建器" class="headerlink" title="1.构建字符串构建器"></a>1.构建字符串构建器</h3><p>有些时候,需要由较短的字符串构建字符串,例如,按键或来自文件中的单词。采用字符串连接的方式达到此目的效率比较低。每次连接字符串,都会构建一个新的String对象,既耗时,又浪费空间。</p><p>使用StringBuilder类就可以避免这个问题的发生,如果需要用许多小段的字符串构建一个字符串,那么应该按照下列步骤进行。</p><p>首先,构建一个空的字符串构建器:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br></pre></td></tr></table></figure><p>当每次需要添加一部分内容时,就调用append方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">builder. append (ch); <span class="comment">// appends a single character </span></span><br><span class="line"></span><br><span class="line">builder. append(str); <span class="comment">// appends a string</span></span><br></pre></td></tr></table></figure><p>在需要构建字符串时就调用toString方法,将可以得到一个String对象,其中包含了构建器中的字符序列。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">completedString</span> <span class="operator">=</span> builder. toString();</span><br></pre></td></tr></table></figure><blockquote><p>注释:在JDK5.0中引入StringBuilder类。这个类的前身是StringBuffer,其效率稍有些低,但允许采用多线程的方式执行添加或删除字符的操作。如果所有字符串在一个单线程中编辑(通常都是这样) ,则应该用StringBuilder替代它。<strong>这两个类的API是相同的。</strong> </p></blockquote><h3 id="2-常用API"><a href="#2-常用API" class="headerlink" title="2.常用API"></a>2.常用API</h3><ul><li><p><strong>StringBuilder append (String str)</strong></p><p>追加一个字符串并返回this</p></li><li><p><strong>StringBuilder append (char c)</strong></p><p>追加一个代码单元并返回this</p></li><li><p><strong>StringBuilder appendCodePoint (int cp)</strong></p><p>追加一个代码点,并将其转换为一个或两个代码单元并返回this</p></li><li><p><strong>void setCharAt (inti, char c)</strong></p><p>将第i个代码单元设置为c</p></li><li><p><strong>StringBuilder insert (int offset, String str)</strong></p><p>在offset位置插入一个字符串并返回this</p></li><li><p><strong>StringBuilder insert (int offset, Char c)</strong></p><p>在offset位置插入一个代码单元并返回this</p></li><li><p><strong>StringBuilder delete (int startindex, int endindex)</strong></p><p>删除偏移量从startIndex到-endindex-1的代码单元并返回this.</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
